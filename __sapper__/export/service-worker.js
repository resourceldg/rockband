!function(){"use strict";const e=["client/breakpoints.3a210827.js","client/_layout.72539ed1.js","client/index.0266ede0.js","client/index.7dd1ab90.js","client/index.4b2c97c7.js","client/progress-indicators.0d7a79ac.js","client/navigation-drawers.2d1d1394.js","client/index.873c3065.js","client/PropsTable.f4733062.js","client/Code.c843ff04.js","client/Card.712bf997.js","client/index.e5eee94b.js","client/data-tables.496a152f.js","client/index.a92ad96d.js","client/selection-controls.192108b7.js","client/text-fields.998ad1ff.js","client/index.ab3e2d7d.js","client/index.e245b9c7.js","client/tooltips.3c23b707.js","client/date-pickers.cb380804.js","client/snackbars.d821407d.js","client/index.9a8a628d.js","client/treeviews.4e5fac21.js","client/index.cda34478.js","client/buttons.c556b2f4.js","client/index.64a82224.js","client/sliders.c584a058.js","client/images.3e4b3983.js","client/selects.e3362c2e.js","client/dialogs.0091d2f2.js","client/cards.95242ffd.js","client/lists.a9c560d6.js","client/menus.47e38d99.js","client/index.5c5e592b.js","client/client.06d517c7.js","client/tabs.ad042096.js","client/typography.16b498f8.js","client/dark-mode.2e85e9ae.js","client/color.15cf3314.js","client/chips.0301831d.js","client/client.e3021870.js"].concat(["service-worker-index.html","data.json","favicon.png","github.png","global.css","logo.svg","manifest.json","prism.css"]),t=new Set(e);self.addEventListener("install",t=>{t.waitUntil(caches.open("cache1607739974674").then(t=>t.addAll(e)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const t of e)"cache1607739974674"!==t&&await caches.delete(t);self.clients.claim()}))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const s=new URL(e.request.url);s.protocol.startsWith("http")&&(s.hostname===self.location.hostname&&s.port!==self.location.port||(s.host===self.location.host&&t.has(s.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline1607739974674").then(async t=>{try{const s=await fetch(e.request);return t.put(e.request,s.clone()),s}catch(s){const c=await t.match(e.request);if(c)return c;throw s}}))))})}();

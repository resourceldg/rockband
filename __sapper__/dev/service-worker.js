(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1609439445932;

	const files = [
		"service-worker-index.html",
		"data.json",
		"face.svg",
		"facebook-24px.svg",
		"favicon.png",
		"github.png",
		"global.css",
		"instagram.svg",
		"logo.svg",
		"manifest.json",
		"prism.css"
	];

	const shell = [
		"client/client.b0aae0e4.js",
		"client/Code.dad4bb45.js",
		"client/index.072d4b6a.js",
		"client/sre.7bf4a32c.js",
		"client/breakpoints.093f1638.js",
		"client/_layout.2d4429ae.js",
		"client/index.e699dc19.js",
		"client/progress-indicators.17cb5518.js",
		"client/index.f3965191.js",
		"client/index.7763868f.js",
		"client/navigation-drawers.07d950ca.js",
		"client/selection-controls.480a9a78.js",
		"client/index.b8fbded3.js",
		"client/index.6df7b644.js",
		"client/index.79b156af.js",
		"client/PropsTable.5764bad5.js",
		"client/Card.3be20a0e.js",
		"client/date-pickers.fda31b30.js",
		"client/index.c547c574.js",
		"client/data-tables.75799cde.js",
		"client/text-fields.3a80e4ae.js",
		"client/index.ee9e58bd.js",
		"client/snackbars.9c3df001.js",
		"client/treeviews.fc0d9e87.js",
		"client/tooltips.5a957be0.js",
		"client/buttons.d65617c1.js",
		"client/dialogs.844d6a29.js",
		"client/index.cea1866e.js",
		"client/selects.d96af1e4.js",
		"client/index.4ef06281.js",
		"client/sliders.3b37a632.js",
		"client/index.c33ce05d.js",
		"client/images.9ad36bf5.js",
		"client/cards.8ae2ce2a.js",
		"client/chips.c05366ac.js",
		"client/lists.54af7c53.js",
		"client/menus.b53a2776.js",
		"client/jump.52624622.js",
		"client/tabs.2b6fad88.js",
		"client/typography.16b2ec18.js",
		"client/dark-mode.76ab46e5.js",
		"client/frontend.afe0cf84.js",
		"client/postgresql.dc197317.js",
		"client/color.f9a2905e.js",
		"client/api.70caea58.js",
		"client/sapper-dev-client.4cd68457.js",
		"client/client.a064e7a0.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener("install", event => {
	  event.waitUntil(
	    caches
	      .open(ASSETS)
	      .then(cache => cache.addAll(to_cache))
	      .then(() => {
	        self.skipWaiting();
	      })
	  );
	});

	self.addEventListener("activate", event => {
	  event.waitUntil(
	    caches.keys().then(async keys => {
	      // delete old caches
	      for (const key of keys) {
	        if (key !== ASSETS) await caches.delete(key);
	      }

	      self.clients.claim();
	    })
	  );
	});

	self.addEventListener("fetch", event => {
	  if (event.request.method !== "GET" || event.request.headers.has("range"))
	    return;

	  const url = new URL(event.request.url);

	  // don't try to handle e.g. data: URIs
	  if (!url.protocol.startsWith("http")) return;

	  // ignore dev server requests
	  if (
	    url.hostname === self.location.hostname &&
	    url.port !== self.location.port
	  )
	    return;

	  // always serve static files and bundler-generated assets from cache
	  if (url.host === self.location.host && cached.has(url.pathname)) {
	    event.respondWith(caches.match(event.request));
	    return;
	  }

	  // for pages, you might want to serve a shell `service-worker-index.html` file,
	  // which Sapper has generated for you. It's not right for every
	  // app, but if it's right for yours then uncomment this section
	  /*
	  if (
	    url.origin === self.origin &&
	    routes.find(route => route.pattern.test(url.pathname))
	  ) {
	    event.respondWith(caches.match("/service-worker-index.html"));
	    return;
	  }
	  */

	  if (event.request.cache === "only-if-cached") return;

	  // for everything else, try the network first, falling back to
	  // cache if the user is offline. (If the pages never change, you
	  // might prefer a cache-first approach to a network-first one.)
	  event.respondWith(
	    caches.open(`offline${timestamp}`).then(async cache => {
	      try {
	        const response = await fetch(event.request);
	        cache.put(event.request, response.clone());
	        return response;
	      } catch (err) {
	        const response = await cache.match(event.request);
	        if (response) return response;

	        throw err;
	      }
	    })
	  );
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

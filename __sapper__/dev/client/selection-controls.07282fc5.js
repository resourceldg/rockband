import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, x as create_slot, G as ClassBuilder, v as validate_slots, F as assign, H as exclude_internal_props, L as Icon, o as create_component, p as claim_component, q as mount_component, r as transition_in, u as transition_out, w as destroy_component, e as element, k as space, c as claim_element, a as children, m as claim_space, b as detach_dev, g as attr_dev, f as add_location, h as insert_dev, j as append_dev, M as listen_dev, B as update_slot, R as empty, T as group_outros, U as check_outros, t as text, l as claim_text, a3 as validate_each_argument, a4 as destroy_each, a0 as binding_callbacks, a1 as bind, J as get_spread_update, a5 as get_spread_object, a2 as add_flush_callback, a6 as set_input_value, z as set_data_dev, O as run_all, Q as bubble, n as noop } from './client.380c418c.js';
import { C as Code } from './Code.7f8fbc59.js';
import { L as Label, C as Checkbox } from './index.3c01b1e5.js';
import { R as Ripple } from './index.b4c5dce0.js';
import './index.28ee893a.js';
import './index.d75a12a3.js';
import './index.3f6edbd6.js';
import { P as PropsTable } from './PropsTable.5882c855.js';

/* src/components/RadioButton/RadioButton.svelte generated by Svelte v3.24.0 */
const file = "src/components/RadioButton/RadioButton.svelte";

const get_label_slot_changes = dirty => ({});

const get_label_slot_context = ctx => ({}); // (52:6) {:else}


function create_else_block(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      class:
      /*disabled*/
      ctx[3] ? "text-gray-500 dark:text-gray-600" : "text-gray-600",
      $$slots: {
        default: [create_default_slot_2]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(icon.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      const icon_changes = {};
      if (dirty &
      /*disabled*/
      8) icon_changes.class =
      /*disabled*/
      ctx[3] ? "text-gray-500 dark:text-gray-600" : "text-gray-600";

      if (dirty &
      /*$$scope*/
      4096) {
        icon_changes.$$scope = {
          dirty,
          ctx
        };
      }

      icon.$set(icon_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(icon, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(52:6) {:else}",
    ctx
  });
  return block;
} // (48:6) {#if selected === value}


function create_if_block(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      class: "text-" + (
      /*disabled*/
      ctx[3] ? "gray" :
      /*color*/
      ctx[2]) + "-500",
      $$slots: {
        default: [create_default_slot_1]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(icon.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      const icon_changes = {};
      if (dirty &
      /*disabled, color*/
      12) icon_changes.class = "text-" + (
      /*disabled*/
      ctx[3] ? "gray" :
      /*color*/
      ctx[2]) + "-500";

      if (dirty &
      /*$$scope*/
      4096) {
        icon_changes.$$scope = {
          dirty,
          ctx
        };
      }

      icon.$set(icon_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(icon, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(48:6) {#if selected === value}",
    ctx
  });
  return block;
} // (53:8) <Icon class={disabled ? 'text-gray-500 dark:text-gray-600' : 'text-gray-600'}>


function create_default_slot_2(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("radio_button_unchecked");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "radio_button_unchecked");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_2.name,
    type: "slot",
    source: "(53:8) <Icon class={disabled ? 'text-gray-500 dark:text-gray-600' : 'text-gray-600'}>",
    ctx
  });
  return block;
} // (49:8) <Icon class="text-{disabled ? 'gray' : color}-500">


function create_default_slot_1(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("radio_button_checked");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "radio_button_checked");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_1.name,
    type: "slot",
    source: "(49:8) <Icon class=\\\"text-{disabled ? 'gray' : color}-500\\\">",
    ctx
  });
  return block;
} // (47:4) <Ripple color={rippleColor}>


function create_default_slot(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block, create_else_block];
  const if_blocks = [];

  function select_block_type(ctx, dirty) {
    if (
    /*selected*/
    ctx[0] ===
    /*value*/
    ctx[5]) return 0;
    return 1;
  }

  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const block = {
    c: function create() {
      if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx);

      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];

        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block.c();
        }

        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching) detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(47:4) <Ripple color={rippleColor}>",
    ctx
  });
  return block;
} // (59:21)      


function fallback_block(ctx) {
  let label_1;
  let current;
  label_1 = new Label({
    props: {
      disabled:
      /*disabled*/
      ctx[3],
      label:
      /*label*/
      ctx[1],
      class:
      /*labelClasses*/
      ctx[6]
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(label_1.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(label_1.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(label_1, target, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      const label_1_changes = {};
      if (dirty &
      /*disabled*/
      8) label_1_changes.disabled =
      /*disabled*/
      ctx[3];
      if (dirty &
      /*label*/
      2) label_1_changes.label =
      /*label*/
      ctx[1];
      if (dirty &
      /*labelClasses*/
      64) label_1_changes.class =
      /*labelClasses*/
      ctx[6];
      label_1.$set(label_1_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(label_1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(label_1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(label_1, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block.name,
    type: "fallback",
    source: "(59:21)      ",
    ctx
  });
  return block;
}

function create_fragment(ctx) {
  let div1;
  let input;
  let input_selected_value;
  let t0;
  let div0;
  let ripple;
  let t1;
  let current;
  let mounted;
  let dispose;
  ripple = new Ripple({
    props: {
      color:
      /*rippleColor*/
      ctx[8],
      $$slots: {
        default: [create_default_slot]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  const label_slot_template =
  /*$$slots*/
  ctx[11].label;
  const label_slot = create_slot(label_slot_template, ctx,
  /*$$scope*/
  ctx[12], get_label_slot_context);
  const label_slot_or_fallback = label_slot || fallback_block(ctx);
  const block = {
    c: function create() {
      div1 = element("div");
      input = element("input");
      t0 = space();
      div0 = element("div");
      create_component(ripple.$$.fragment);
      t1 = space();
      if (label_slot_or_fallback) label_slot_or_fallback.c();
      this.h();
    },
    l: function claim(nodes) {
      div1 = claim_element(nodes, "DIV", {
        class: true
      });
      var div1_nodes = children(div1);
      input = claim_element(div1_nodes, "INPUT", {
        "aria-label": true,
        class: true,
        type: true,
        role: true,
        name: true,
        selected: true
      });
      t0 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", {
        class: true
      });
      var div0_nodes = children(div0);
      claim_component(ripple.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach_dev);
      t1 = claim_space(div1_nodes);
      if (label_slot_or_fallback) label_slot_or_fallback.l(div1_nodes);
      div1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(input, "aria-label",
      /*label*/
      ctx[1]);
      attr_dev(input, "class", "hidden");
      attr_dev(input, "type", "radio");
      attr_dev(input, "role", "radio");
      attr_dev(input, "name",
      /*name*/
      ctx[4]);
      attr_dev(input, "selected", input_selected_value =
      /*selected*/
      ctx[0] ===
      /*value*/
      ctx[5]);
      add_location(input, file, 38, 2, 847);
      attr_dev(div0, "class", "relative");
      add_location(div0, file, 45, 2, 980);
      attr_dev(div1, "class",
      /*c*/
      ctx[7]);
      add_location(div1, file, 35, 0, 807);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div1, anchor);
      append_dev(div1, input);
      append_dev(div1, t0);
      append_dev(div1, div0);
      mount_component(ripple, div0, null);
      append_dev(div1, t1);

      if (label_slot_or_fallback) {
        label_slot_or_fallback.m(div1, null);
      }

      current = true;

      if (!mounted) {
        dispose = listen_dev(div1, "click",
        /*select*/
        ctx[9], false, false, false);
        mounted = true;
      }
    },
    p: function update(ctx, [dirty]) {
      if (!current || dirty &
      /*label*/
      2) {
        attr_dev(input, "aria-label",
        /*label*/
        ctx[1]);
      }

      if (!current || dirty &
      /*name*/
      16) {
        attr_dev(input, "name",
        /*name*/
        ctx[4]);
      }

      if (!current || dirty &
      /*selected, value*/
      33 && input_selected_value !== (input_selected_value =
      /*selected*/
      ctx[0] ===
      /*value*/
      ctx[5])) {
        attr_dev(input, "selected", input_selected_value);
      }

      const ripple_changes = {};
      if (dirty &
      /*rippleColor*/
      256) ripple_changes.color =
      /*rippleColor*/
      ctx[8];

      if (dirty &
      /*$$scope, disabled, color, selected, value*/
      4141) {
        ripple_changes.$$scope = {
          dirty,
          ctx
        };
      }

      ripple.$set(ripple_changes);

      if (label_slot) {
        if (label_slot.p && dirty &
        /*$$scope*/
        4096) {
          update_slot(label_slot, label_slot_template, ctx,
          /*$$scope*/
          ctx[12], dirty, get_label_slot_changes, get_label_slot_context);
        }
      } else {
        if (label_slot_or_fallback && label_slot_or_fallback.p && dirty &
        /*disabled, label, labelClasses*/
        74) {
          label_slot_or_fallback.p(ctx, dirty);
        }
      }

      if (!current || dirty &
      /*c*/
      128) {
        attr_dev(div1, "class",
        /*c*/
        ctx[7]);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(ripple.$$.fragment, local);
      transition_in(label_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(ripple.$$.fragment, local);
      transition_out(label_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div1);
      destroy_component(ripple);
      if (label_slot_or_fallback) label_slot_or_fallback.d(detaching);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

const classesDefault = "inline-flex block items-center mb-2 cursor-pointer z-0";

function instance($$self, $$props, $$invalidate) {
  let {
    selected = ""
  } = $$props;
  let {
    label = ""
  } = $$props;
  let {
    color = "primary"
  } = $$props;
  let {
    disabled = false
  } = $$props;
  let {
    name = ""
  } = $$props;
  let {
    value = ""
  } = $$props;
  let {
    classes = classesDefault
  } = $$props;
  let {
    labelClasses = i => i
  } = $$props;

  function select() {
    if (disabled) return;
    $$invalidate(0, selected = value);
  }

  const cb = new ClassBuilder(classes, classesDefault);
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("RadioButton", $$slots, ['label']);

  $$self.$set = $$new_props => {
    $$invalidate(14, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("selected" in $$new_props) $$invalidate(0, selected = $$new_props.selected);
    if ("label" in $$new_props) $$invalidate(1, label = $$new_props.label);
    if ("color" in $$new_props) $$invalidate(2, color = $$new_props.color);
    if ("disabled" in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
    if ("name" in $$new_props) $$invalidate(4, name = $$new_props.name);
    if ("value" in $$new_props) $$invalidate(5, value = $$new_props.value);
    if ("classes" in $$new_props) $$invalidate(10, classes = $$new_props.classes);
    if ("labelClasses" in $$new_props) $$invalidate(6, labelClasses = $$new_props.labelClasses);
    if ("$$scope" in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
  };

  $$self.$capture_state = () => ({
    Icon,
    Ripple,
    Label,
    ClassBuilder,
    classesDefault,
    selected,
    label,
    color,
    disabled,
    name,
    value,
    classes,
    labelClasses,
    select,
    cb,
    c,
    rippleColor
  });

  $$self.$inject_state = $$new_props => {
    $$invalidate(14, $$props = assign(assign({}, $$props), $$new_props));
    if ("selected" in $$props) $$invalidate(0, selected = $$new_props.selected);
    if ("label" in $$props) $$invalidate(1, label = $$new_props.label);
    if ("color" in $$props) $$invalidate(2, color = $$new_props.color);
    if ("disabled" in $$props) $$invalidate(3, disabled = $$new_props.disabled);
    if ("name" in $$props) $$invalidate(4, name = $$new_props.name);
    if ("value" in $$props) $$invalidate(5, value = $$new_props.value);
    if ("classes" in $$props) $$invalidate(10, classes = $$new_props.classes);
    if ("labelClasses" in $$props) $$invalidate(6, labelClasses = $$new_props.labelClasses);
    if ("c" in $$props) $$invalidate(7, c = $$new_props.c);
    if ("rippleColor" in $$props) $$invalidate(8, rippleColor = $$new_props.rippleColor);
  };

  let c;
  let rippleColor;

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$self.$$.update = () => {
     $$invalidate(7, c = cb.flush().add(classes, true, classesDefault).add($$props.class).get());

    if ($$self.$$.dirty &
    /*value, disabled, color*/
    44) {
       $$invalidate(8, rippleColor = value && !disabled ? color : "gray");
    }
  };

  $$props = exclude_internal_props($$props);
  return [selected, label, color, disabled, name, value, labelClasses, c, rippleColor, select, classes, $$slots, $$scope];
}

class RadioButton extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      selected: 0,
      label: 1,
      color: 2,
      disabled: 3,
      name: 4,
      value: 5,
      classes: 10,
      labelClasses: 6
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "RadioButton",
      options,
      id: create_fragment.name
    });
  }

  get selected() {
    throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set selected(value) {
    throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get label() {
    throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set label(value) {
    throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get color() {
    throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set color(value) {
    throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get disabled() {
    throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set disabled(value) {
    throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get name() {
    throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set name(value) {
    throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get value() {
    throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set value(value) {
    throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get classes() {
    throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set classes(value) {
    throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get labelClasses() {
    throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set labelClasses(value) {
    throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

/* src/components/RadioButton/RadioButtonGroup.svelte generated by Svelte v3.24.0 */
const file$1 = "src/components/RadioButton/RadioButtonGroup.svelte";

const get_default_slot_changes = dirty => ({
  item: dirty &
  /*items*/
  2
});

const get_default_slot_context = ctx => ({
  item:
  /*item*/
  ctx[13]
});

function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[13] = list[i];
  return child_ctx;
} // (25:17)        


function fallback_block$1(ctx) {
  let radiobutton;
  let updating_selected;
  let t;
  let current;
  const radiobutton_spread_levels = [{
    class:
    /*buttonClasses*/
    ctx[5]
  },
  /*item*/
  ctx[13], {
    color:
    /*color*/
    ctx[4]
  }, {
    name:
    /*name*/
    ctx[2] || `radio-${Math.random()}`
  }, {
    disabled:
    /*disabled*/
    ctx[3]
  }];

  function radiobutton_selected_binding(value) {
    /*radiobutton_selected_binding*/
    ctx[10].call(null, value);
  }

  let radiobutton_props = {};

  for (let i = 0; i < radiobutton_spread_levels.length; i += 1) {
    radiobutton_props = assign(radiobutton_props, radiobutton_spread_levels[i]);
  }

  if (
  /*selected*/
  ctx[0] !== void 0) {
    radiobutton_props.selected =
    /*selected*/
    ctx[0];
  }

  radiobutton = new RadioButton({
    props: radiobutton_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(radiobutton, "selected", radiobutton_selected_binding));
  const block = {
    c: function create() {
      create_component(radiobutton.$$.fragment);
      t = space();
    },
    l: function claim(nodes) {
      claim_component(radiobutton.$$.fragment, nodes);
      t = claim_space(nodes);
    },
    m: function mount(target, anchor) {
      mount_component(radiobutton, target, anchor);
      insert_dev(target, t, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      const radiobutton_changes = dirty &
      /*buttonClasses, items, color, name, Math, disabled*/
      62 ? get_spread_update(radiobutton_spread_levels, [dirty &
      /*buttonClasses*/
      32 && {
        class:
        /*buttonClasses*/
        ctx[5]
      }, dirty &
      /*items*/
      2 && get_spread_object(
      /*item*/
      ctx[13]), dirty &
      /*color*/
      16 && {
        color:
        /*color*/
        ctx[4]
      }, dirty &
      /*name, Math*/
      4 && {
        name:
        /*name*/
        ctx[2] || `radio-${Math.random()}`
      }, dirty &
      /*disabled*/
      8 && {
        disabled:
        /*disabled*/
        ctx[3]
      }]) : {};

      if (!updating_selected && dirty &
      /*selected*/
      1) {
        updating_selected = true;
        radiobutton_changes.selected =
        /*selected*/
        ctx[0];
        add_flush_callback(() => updating_selected = false);
      }

      radiobutton.$set(radiobutton_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(radiobutton.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(radiobutton.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(radiobutton, detaching);
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block$1.name,
    type: "fallback",
    source: "(25:17)        ",
    ctx
  });
  return block;
} // (24:2) {#each items as item}


function create_each_block(ctx) {
  let current;
  const default_slot_template =
  /*$$slots*/
  ctx[9].default;
  const default_slot = create_slot(default_slot_template, ctx,
  /*$$scope*/
  ctx[8], get_default_slot_context);
  const default_slot_or_fallback = default_slot || fallback_block$1(ctx);
  const block = {
    c: function create() {
      if (default_slot_or_fallback) default_slot_or_fallback.c();
    },
    l: function claim(nodes) {
      if (default_slot_or_fallback) default_slot_or_fallback.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot_or_fallback) {
        default_slot_or_fallback.m(target, anchor);
      }

      current = true;
    },
    p: function update(ctx, dirty) {
      if (default_slot) {
        if (default_slot.p && dirty &
        /*$$scope, items*/
        258) {
          update_slot(default_slot, default_slot_template, ctx,
          /*$$scope*/
          ctx[8], dirty, get_default_slot_changes, get_default_slot_context);
        }
      } else {
        if (default_slot_or_fallback && default_slot_or_fallback.p && dirty &
        /*buttonClasses, items, color, name, disabled, selected*/
        63) {
          default_slot_or_fallback.p(ctx, dirty);
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block.name,
    type: "each",
    source: "(24:2) {#each items as item}",
    ctx
  });
  return block;
}

function create_fragment$1(ctx) {
  let div;
  let current;
  let each_value =
  /*items*/
  ctx[1];
  validate_each_argument(each_value);
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }

  const out = i => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });

  const block = {
    c: function create() {
      div = element("div");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {
        class: true
      });
      var div_nodes = children(div);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(div_nodes);
      }

      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class",
      /*c*/
      ctx[6]);
      add_location(div, file$1, 22, 0, 564);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }

      current = true;
    },
    p: function update(ctx, [dirty]) {
      if (dirty &
      /*buttonClasses, items, color, name, Math, disabled, selected, $$scope*/
      319) {
        each_value =
        /*items*/
        ctx[1];
        validate_each_argument(each_value);
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }

        group_outros();

        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }

        check_outros();
      }

      if (!current || dirty &
      /*c*/
      64) {
        attr_dev(div, "class",
        /*c*/
        ctx[6]);
      }
    },
    i: function intro(local) {
      if (current) return;

      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }

      current = true;
    },
    o: function outro(local) {
      each_blocks = each_blocks.filter(Boolean);

      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }

      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div);
      destroy_each(each_blocks, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$1.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

const classesDefault$1 = "flex flex-col mb-4 cursor-pointer";

function instance$1($$self, $$props, $$invalidate) {
  let {
    classes = classesDefault$1
  } = $$props;
  let {
    items = []
  } = $$props;
  let {
    selected = ""
  } = $$props;
  let {
    name = ""
  } = $$props;
  let {
    disabled = false
  } = $$props;
  let {
    color = "primary"
  } = $$props;
  let {
    buttonClasses = "inline-flex block items-center mb-2 cursor-pointer z-0"
  } = $$props;
  const cb = new ClassBuilder(classes, classesDefault$1);
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("RadioButtonGroup", $$slots, ['default']);

  function radiobutton_selected_binding(value) {
    selected = value;
    $$invalidate(0, selected);
  }

  $$self.$set = $$new_props => {
    $$invalidate(12, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("classes" in $$new_props) $$invalidate(7, classes = $$new_props.classes);
    if ("items" in $$new_props) $$invalidate(1, items = $$new_props.items);
    if ("selected" in $$new_props) $$invalidate(0, selected = $$new_props.selected);
    if ("name" in $$new_props) $$invalidate(2, name = $$new_props.name);
    if ("disabled" in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
    if ("color" in $$new_props) $$invalidate(4, color = $$new_props.color);
    if ("buttonClasses" in $$new_props) $$invalidate(5, buttonClasses = $$new_props.buttonClasses);
    if ("$$scope" in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
  };

  $$self.$capture_state = () => ({
    RadioButton,
    ClassBuilder,
    classesDefault: classesDefault$1,
    classes,
    items,
    selected,
    name,
    disabled,
    color,
    buttonClasses,
    cb,
    c
  });

  $$self.$inject_state = $$new_props => {
    $$invalidate(12, $$props = assign(assign({}, $$props), $$new_props));
    if ("classes" in $$props) $$invalidate(7, classes = $$new_props.classes);
    if ("items" in $$props) $$invalidate(1, items = $$new_props.items);
    if ("selected" in $$props) $$invalidate(0, selected = $$new_props.selected);
    if ("name" in $$props) $$invalidate(2, name = $$new_props.name);
    if ("disabled" in $$props) $$invalidate(3, disabled = $$new_props.disabled);
    if ("color" in $$props) $$invalidate(4, color = $$new_props.color);
    if ("buttonClasses" in $$props) $$invalidate(5, buttonClasses = $$new_props.buttonClasses);
    if ("c" in $$props) $$invalidate(6, c = $$new_props.c);
  };

  let c;

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$self.$$.update = () => {
     $$invalidate(6, c = cb.flush().add($$props.class).get());
  };

  $$props = exclude_internal_props($$props);
  return [selected, items, name, disabled, color, buttonClasses, c, classes, $$scope, $$slots, radiobutton_selected_binding];
}

class RadioButtonGroup extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$1, create_fragment$1, safe_not_equal, {
      classes: 7,
      items: 1,
      selected: 0,
      name: 2,
      disabled: 3,
      color: 4,
      buttonClasses: 5
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "RadioButtonGroup",
      options,
      id: create_fragment$1.name
    });
  }

  get classes() {
    throw new Error("<RadioButtonGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set classes(value) {
    throw new Error("<RadioButtonGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get items() {
    throw new Error("<RadioButtonGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set items(value) {
    throw new Error("<RadioButtonGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get selected() {
    throw new Error("<RadioButtonGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set selected(value) {
    throw new Error("<RadioButtonGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get name() {
    throw new Error("<RadioButtonGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set name(value) {
    throw new Error("<RadioButtonGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get disabled() {
    throw new Error("<RadioButtonGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set disabled(value) {
    throw new Error("<RadioButtonGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get color() {
    throw new Error("<RadioButtonGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set color(value) {
    throw new Error("<RadioButtonGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get buttonClasses() {
    throw new Error("<RadioButtonGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set buttonClasses(value) {
    throw new Error("<RadioButtonGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

/* src/components/Switch/Switch.svelte generated by Svelte v3.24.0 */
const file$2 = "src/components/Switch/Switch.svelte"; // (63:4) <Ripple color={value && !disabled ? color : 'gray'} noHover>

function create_default_slot$1(ctx) {
  let div;
  let div_style_value;
  const block = {
    c: function create() {
      div = element("div");
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {
        class: true,
        style: true
      });
      children(div).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class",
      /*th*/
      ctx[6]);
      attr_dev(div, "style", div_style_value =
      /*value*/
      ctx[0] ? "left: 1.25rem" : "");
      add_location(div, file$2, 63, 6, 1907);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
    },
    p: function update(ctx, dirty) {
      if (dirty &
      /*th*/
      64) {
        attr_dev(div, "class",
        /*th*/
        ctx[6]);
      }

      if (dirty &
      /*value*/
      1 && div_style_value !== (div_style_value =
      /*value*/
      ctx[0] ? "left: 1.25rem" : "")) {
        attr_dev(div, "style", div_style_value);
      }
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot$1.name,
    type: "slot",
    source: "(63:4) <Ripple color={value && !disabled ? color : 'gray'} noHover>",
    ctx
  });
  return block;
}

function create_fragment$2(ctx) {
  let div2;
  let input;
  let t0;
  let div1;
  let div0;
  let t1;
  let ripple;
  let t2;
  let label_1;
  let t3;
  let current;
  let mounted;
  let dispose;
  ripple = new Ripple({
    props: {
      color:
      /*value*/
      ctx[0] && !
      /*disabled*/
      ctx[3] ?
      /*color*/
      ctx[2] : "gray",
      noHover: true,
      $$slots: {
        default: [create_default_slot$1]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      div2 = element("div");
      input = element("input");
      t0 = space();
      div1 = element("div");
      div0 = element("div");
      t1 = space();
      create_component(ripple.$$.fragment);
      t2 = space();
      label_1 = element("label");
      t3 = text(
      /*label*/
      ctx[1]);
      this.h();
    },
    l: function claim(nodes) {
      div2 = claim_element(nodes, "DIV", {
        class: true
      });
      var div2_nodes = children(div2);
      input = claim_element(div2_nodes, "INPUT", {
        class: true,
        type: true
      });
      t0 = claim_space(div2_nodes);
      div1 = claim_element(div2_nodes, "DIV", {
        class: true
      });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", {
        class: true
      });
      children(div0).forEach(detach_dev);
      t1 = claim_space(div1_nodes);
      claim_component(ripple.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach_dev);
      t2 = claim_space(div2_nodes);
      label_1 = claim_element(div2_nodes, "LABEL", {
        "aria-hidden": true,
        class: true
      });
      var label_1_nodes = children(label_1);
      t3 = claim_text(label_1_nodes,
      /*label*/
      ctx[1]);
      label_1_nodes.forEach(detach_dev);
      div2_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(input, "class", "hidden");
      attr_dev(input, "type", "checkbox");
      add_location(input, file$2, 59, 2, 1712);
      attr_dev(div0, "class", "w-full h-full absolute");
      add_location(div0, file$2, 61, 4, 1797);
      attr_dev(div1, "class",
      /*tr*/
      ctx[5]);
      add_location(div1, file$2, 60, 2, 1776);
      attr_dev(label_1, "aria-hidden", "true");
      attr_dev(label_1, "class",
      /*l*/
      ctx[7]);
      add_location(label_1, file$2, 68, 2, 2004);
      attr_dev(div2, "class",
      /*c*/
      ctx[4]);
      add_location(div2, file$2, 58, 0, 1677);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div2, anchor);
      append_dev(div2, input);
      set_input_value(input,
      /*value*/
      ctx[0]);
      append_dev(div2, t0);
      append_dev(div2, div1);
      append_dev(div1, div0);
      append_dev(div1, t1);
      mount_component(ripple, div1, null);
      append_dev(div2, t2);
      append_dev(div2, label_1);
      append_dev(label_1, t3);
      current = true;

      if (!mounted) {
        dispose = [listen_dev(input, "change",
        /*input_change_handler*/
        ctx[14]), listen_dev(input, "change",
        /*change_handler*/
        ctx[13], false, false, false), listen_dev(div2, "click",
        /*check*/
        ctx[8], false, false, false)];
        mounted = true;
      }
    },
    p: function update(ctx, [dirty]) {
      if (dirty &
      /*value*/
      1) {
        set_input_value(input,
        /*value*/
        ctx[0]);
      }

      const ripple_changes = {};
      if (dirty &
      /*value, disabled, color*/
      13) ripple_changes.color =
      /*value*/
      ctx[0] && !
      /*disabled*/
      ctx[3] ?
      /*color*/
      ctx[2] : "gray";

      if (dirty &
      /*$$scope, th, value*/
      2097217) {
        ripple_changes.$$scope = {
          dirty,
          ctx
        };
      }

      ripple.$set(ripple_changes);

      if (!current || dirty &
      /*tr*/
      32) {
        attr_dev(div1, "class",
        /*tr*/
        ctx[5]);
      }

      if (!current || dirty &
      /*label*/
      2) set_data_dev(t3,
      /*label*/
      ctx[1]);

      if (!current || dirty &
      /*l*/
      128) {
        attr_dev(label_1, "class",
        /*l*/
        ctx[7]);
      }

      if (!current || dirty &
      /*c*/
      16) {
        attr_dev(div2, "class",
        /*c*/
        ctx[4]);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(ripple.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(ripple.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div2);
      destroy_component(ripple);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

const trackClassesDefault = "relative w-10 h-auto z-0 rounded-full overflow-visible flex items-center justify-center";
const thumbClassesDefault = "rounded-full p-2 w-5 h-5 absolute elevation-3 duration-100";
const labelClassesDefault = "pl-2 cursor-pointer";

function instance$2($$self, $$props, $$invalidate) {
  const classesDefault = `inline-flex items-center mb-2 cursor-pointer z-10`;
  let {
    value = false
  } = $$props;
  let {
    label = ""
  } = $$props;
  let {
    color = "primary"
  } = $$props;
  let {
    disabled = false
  } = $$props;
  let {
    trackClasses = trackClassesDefault
  } = $$props;
  let {
    thumbClasses = thumbClassesDefault
  } = $$props;
  let {
    labelClasses = labelClassesDefault
  } = $$props;
  let {
    classes = classesDefault
  } = $$props;
  const cb = new ClassBuilder(classes, classesDefault);
  const trcb = new ClassBuilder(trackClasses, trackClassesDefault);
  const thcb = new ClassBuilder(thumbClasses, thumbClassesDefault);
  const lcb = new ClassBuilder(labelClasses, labelClassesDefault);

  function check() {
    if (disabled) return;
    $$invalidate(0, value = !value);
  }

  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Switch", $$slots, []);

  function change_handler(event) {
    bubble($$self, event);
  }

  function input_change_handler() {
    value = this.value;
    $$invalidate(0, value);
  }

  $$self.$set = $$new_props => {
    $$invalidate(20, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
    if ("label" in $$new_props) $$invalidate(1, label = $$new_props.label);
    if ("color" in $$new_props) $$invalidate(2, color = $$new_props.color);
    if ("disabled" in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
    if ("trackClasses" in $$new_props) $$invalidate(9, trackClasses = $$new_props.trackClasses);
    if ("thumbClasses" in $$new_props) $$invalidate(10, thumbClasses = $$new_props.thumbClasses);
    if ("labelClasses" in $$new_props) $$invalidate(11, labelClasses = $$new_props.labelClasses);
    if ("classes" in $$new_props) $$invalidate(12, classes = $$new_props.classes);
  };

  $$self.$capture_state = () => ({
    Ripple,
    ClassBuilder,
    classesDefault,
    trackClassesDefault,
    thumbClassesDefault,
    labelClassesDefault,
    value,
    label,
    color,
    disabled,
    trackClasses,
    thumbClasses,
    labelClasses,
    classes,
    cb,
    trcb,
    thcb,
    lcb,
    check,
    c,
    tr,
    th,
    l
  });

  $$self.$inject_state = $$new_props => {
    $$invalidate(20, $$props = assign(assign({}, $$props), $$new_props));
    if ("value" in $$props) $$invalidate(0, value = $$new_props.value);
    if ("label" in $$props) $$invalidate(1, label = $$new_props.label);
    if ("color" in $$props) $$invalidate(2, color = $$new_props.color);
    if ("disabled" in $$props) $$invalidate(3, disabled = $$new_props.disabled);
    if ("trackClasses" in $$props) $$invalidate(9, trackClasses = $$new_props.trackClasses);
    if ("thumbClasses" in $$props) $$invalidate(10, thumbClasses = $$new_props.thumbClasses);
    if ("labelClasses" in $$props) $$invalidate(11, labelClasses = $$new_props.labelClasses);
    if ("classes" in $$props) $$invalidate(12, classes = $$new_props.classes);
    if ("c" in $$props) $$invalidate(4, c = $$new_props.c);
    if ("tr" in $$props) $$invalidate(5, tr = $$new_props.tr);
    if ("th" in $$props) $$invalidate(6, th = $$new_props.th);
    if ("l" in $$props) $$invalidate(7, l = $$new_props.l);
  };

  let c;
  let tr;
  let th;
  let l;

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$self.$$.update = () => {
     $$invalidate(4, c = cb.flush().add(classes, true, classesDefault).add($$props.class).get());

    if ($$self.$$.dirty &
    /*value, color, trackClasses*/
    517) {
       $$invalidate(5, tr = trcb.flush().add("bg-gray-700", !value).add(`bg-${color}-200`, value).add(trackClasses, true, trackClassesDefault).get());
    }

    if ($$self.$$.dirty &
    /*thumbClasses, value, color*/
    1029) {
       $$invalidate(6, th = thcb.flush().add(thumbClasses, true, thumbClassesDefault).add("bg-white left-0", !value).add(`bg-${color}-400`, value).get());
    }

    if ($$self.$$.dirty &
    /*labelClasses, disabled*/
    2056) {
       $$invalidate(7, l = lcb.flush().add(labelClasses, true, labelClassesDefault).add("text-gray-500", disabled).add("text-gray-700", !disabled).get());
    }
  };

  $$props = exclude_internal_props($$props);
  return [value, label, color, disabled, c, tr, th, l, check, trackClasses, thumbClasses, labelClasses, classes, change_handler, input_change_handler];
}

class Switch extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$2, create_fragment$2, safe_not_equal, {
      value: 0,
      label: 1,
      color: 2,
      disabled: 3,
      trackClasses: 9,
      thumbClasses: 10,
      labelClasses: 11,
      classes: 12
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Switch",
      options,
      id: create_fragment$2.name
    });
  }

  get value() {
    throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set value(value) {
    throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get label() {
    throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set label(value) {
    throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get color() {
    throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set color(value) {
    throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get disabled() {
    throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set disabled(value) {
    throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get trackClasses() {
    throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set trackClasses(value) {
    throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get thumbClasses() {
    throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set thumbClasses(value) {
    throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get labelClasses() {
    throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set labelClasses(value) {
    throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get classes() {
    throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set classes(value) {
    throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

var code = "<script>\n  import {\n    Checkbox,\n    RadioButtonGroup,\n    Switch\n  } from \"smelte\";\n</script>\n\n<h5 class=\"pb-8 pt-10\" id=\"checkboxes\">Checkboxes</h5>\n\n<Checkbox label=\"A checkbox\" />\n<Checkbox color=\"secondary\" label=\"A colored checkbox\" />\n<Checkbox disabled label=\"A disabled checkbox\" />\n\n<h5 class=\"pb-8 pt-10\" id=\"radio-buttons\">Radio buttons</h5>\n\n<RadioButtonGroup\n  name=\"test\"\n  items={[{ value: 1, label: 'One' }, { value: 2, label: 'Two' }]} />\n\n<RadioButtonGroup\n  name=\"Colored test\"\n  color=\"blue\"\n  items={[{ value: 1, label: 'One' }, { value: 2, label: 'Two' }]} />\n\n<RadioButtonGroup\n  name=\"test-disabled\"\n  disabled\n  items={[{ value: 1, label: 'One' }, { value: 2, label: 'Two' }]} />\n\n<h5 class=\"pb-8 pt-10\" id=\"switches\">Switches</h5>\n\n<Switch />\n\n<Switch color=\"error\" />\n";

/* src/routes/components/selection-controls.svelte generated by Svelte v3.24.0 */
const file$3 = "src/routes/components/selection-controls.svelte";

function create_fragment$3(ctx) {
  let blockquote;
  let p;
  let t0;
  let t1;
  let h50;
  let t2;
  let t3;
  let checkbox0;
  let t4;
  let checkbox1;
  let t5;
  let checkbox2;
  let t6;
  let propstable0;
  let t7;
  let h51;
  let t8;
  let t9;
  let radiobuttongroup0;
  let t10;
  let radiobuttongroup1;
  let t11;
  let radiobuttongroup2;
  let t12;
  let propstable1;
  let t13;
  let h52;
  let t14;
  let t15;
  let switch0;
  let t16;
  let switch1;
  let t17;
  let propstable2;
  let t18;
  let code_1;
  let current;
  checkbox0 = new Checkbox({
    props: {
      label: "A checkbox"
    },
    $$inline: true
  });
  checkbox1 = new Checkbox({
    props: {
      color: "secondary",
      label: "A colored checkbox"
    },
    $$inline: true
  });
  checkbox2 = new Checkbox({
    props: {
      disabled: true,
      label: "A disabled checkbox"
    },
    $$inline: true
  });
  propstable0 = new PropsTable({
    props: {
      data: [{
        prop: "value",
        description: "Input value",
        type: "Boolean",
        default: "null"
      }, {
        prop: "color",
        description: "Color variant, accepts any of the main colors described in Tailwind config",
        type: "String",
        default: "primary"
      }, {
        prop: "label",
        description: "Input label",
        type: "String",
        default: "Empty&nbsp;string"
      }, {
        prop: "checked",
        description: "Checked state",
        default: false,
        type: "Boolean"
      }, {
        prop: "disabled",
        description: "Disabled state",
        default: false,
        type: "Boolean"
      }, {
        prop: "classes",
        description: "Classes to pass down to checkbox wrapper",
        default: "inline-flex items-center mb-2 cursor-pointer z-10",
        type: "String"
      }]
    },
    $$inline: true
  });
  radiobuttongroup0 = new RadioButtonGroup({
    props: {
      name: "test",
      items: [{
        value: 1,
        label: "One"
      }, {
        value: 2,
        label: "Two"
      }]
    },
    $$inline: true
  });
  radiobuttongroup1 = new RadioButtonGroup({
    props: {
      name: "Colored test",
      color: "blue",
      items: [{
        value: 1,
        label: "One"
      }, {
        value: 2,
        label: "Two"
      }]
    },
    $$inline: true
  });
  radiobuttongroup2 = new RadioButtonGroup({
    props: {
      name: "test-disabled",
      disabled: true,
      items: [{
        value: 1,
        label: "One"
      }, {
        value: 2,
        label: "Two"
      }]
    },
    $$inline: true
  });
  propstable1 = new PropsTable({
    props: {
      data: [{
        prop: "value",
        description: "Input value",
        type: "Boolean",
        default: "null"
      }, {
        prop: "color",
        description: "Color variant, accepts any of the main colors described in Tailwind config",
        type: "String",
        default: "primary"
      }, {
        prop: "label",
        description: "Input label",
        type: "String",
        default: "Empty&nbsp;string"
      }, {
        prop: "selected",
        description: "Selected state",
        default: false,
        type: "Boolean"
      }, {
        prop: "disabled",
        description: "Disabled state",
        default: false,
        type: "Boolean"
      }, {
        prop: "classes",
        description: "Classes to pass down to radio button wrapper",
        default: "inline-flex block items-center mb-2 cursor-pointer z-0",
        type: "String"
      }]
    },
    $$inline: true
  });
  switch0 = new Switch({
    $$inline: true
  });
  switch1 = new Switch({
    props: {
      color: "error"
    },
    $$inline: true
  });
  propstable2 = new PropsTable({
    props: {
      data: [{
        prop: "value",
        description: "Input value",
        type: "Boolean",
        default: "null"
      }, {
        prop: "color",
        description: "Color variant, accepts any of the main colors described in Tailwind config",
        type: "String",
        default: "primary"
      }, {
        prop: "label",
        description: "Input label",
        type: "String",
        default: "Empty&nbsp;string"
      }, {
        prop: "disabled",
        description: "Disabled state",
        default: false,
        type: "Boolean"
      }, {
        prop: "classes",
        description: "Classes to pass down to checkbox wrapper",
        default: "inline-flex block items-center mb-2 cursor-pointer z-0",
        type: "String"
      }, {
        prop: "trackClasses",
        description: "Track classes",
        default: "relative w-10 h-auto z-0 rounded-full overflow-visible flex items-center justify-center",
        type: "String"
      }, {
        prop: "thumbClasses",
        description: "Thumb classes",
        default: "rounded-full p-2 w-5 h-5 absolute elevation-3 duration-100",
        type: "String"
      }, {
        prop: "labelClasses",
        description: "Tabel classes",
        default: "pl-2 cursor-pointer",
        type: "String"
      }]
    },
    $$inline: true
  });
  code_1 = new Code({
    props: {
      code
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      blockquote = element("blockquote");
      p = element("p");
      t0 = text("Selection controls allow the user to select options.");
      t1 = space();
      h50 = element("h5");
      t2 = text("Checkboxes");
      t3 = space();
      create_component(checkbox0.$$.fragment);
      t4 = space();
      create_component(checkbox1.$$.fragment);
      t5 = space();
      create_component(checkbox2.$$.fragment);
      t6 = space();
      create_component(propstable0.$$.fragment);
      t7 = space();
      h51 = element("h5");
      t8 = text("Radio buttons");
      t9 = space();
      create_component(radiobuttongroup0.$$.fragment);
      t10 = space();
      create_component(radiobuttongroup1.$$.fragment);
      t11 = space();
      create_component(radiobuttongroup2.$$.fragment);
      t12 = space();
      create_component(propstable1.$$.fragment);
      t13 = space();
      h52 = element("h5");
      t14 = text("Switches");
      t15 = space();
      create_component(switch0.$$.fragment);
      t16 = space();
      create_component(switch1.$$.fragment);
      t17 = space();
      create_component(propstable2.$$.fragment);
      t18 = space();
      create_component(code_1.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      blockquote = claim_element(nodes, "BLOCKQUOTE", {
        class: true,
        cite: true
      });
      var blockquote_nodes = children(blockquote);
      p = claim_element(blockquote_nodes, "P", {});
      var p_nodes = children(p);
      t0 = claim_text(p_nodes, "Selection controls allow the user to select options.");
      p_nodes.forEach(detach_dev);
      blockquote_nodes.forEach(detach_dev);
      t1 = claim_space(nodes);
      h50 = claim_element(nodes, "H5", {
        class: true,
        id: true
      });
      var h50_nodes = children(h50);
      t2 = claim_text(h50_nodes, "Checkboxes");
      h50_nodes.forEach(detach_dev);
      t3 = claim_space(nodes);
      claim_component(checkbox0.$$.fragment, nodes);
      t4 = claim_space(nodes);
      claim_component(checkbox1.$$.fragment, nodes);
      t5 = claim_space(nodes);
      claim_component(checkbox2.$$.fragment, nodes);
      t6 = claim_space(nodes);
      claim_component(propstable0.$$.fragment, nodes);
      t7 = claim_space(nodes);
      h51 = claim_element(nodes, "H5", {
        class: true,
        id: true
      });
      var h51_nodes = children(h51);
      t8 = claim_text(h51_nodes, "Radio buttons");
      h51_nodes.forEach(detach_dev);
      t9 = claim_space(nodes);
      claim_component(radiobuttongroup0.$$.fragment, nodes);
      t10 = claim_space(nodes);
      claim_component(radiobuttongroup1.$$.fragment, nodes);
      t11 = claim_space(nodes);
      claim_component(radiobuttongroup2.$$.fragment, nodes);
      t12 = claim_space(nodes);
      claim_component(propstable1.$$.fragment, nodes);
      t13 = claim_space(nodes);
      h52 = claim_element(nodes, "H5", {
        class: true,
        id: true
      });
      var h52_nodes = children(h52);
      t14 = claim_text(h52_nodes, "Switches");
      h52_nodes.forEach(detach_dev);
      t15 = claim_space(nodes);
      claim_component(switch0.$$.fragment, nodes);
      t16 = claim_space(nodes);
      claim_component(switch1.$$.fragment, nodes);
      t17 = claim_space(nodes);
      claim_component(propstable2.$$.fragment, nodes);
      t18 = claim_space(nodes);
      claim_component(code_1.$$.fragment, nodes);
      this.h();
    },
    h: function hydrate() {
      add_location(p, file$3, 14, 2, 483);
      attr_dev(blockquote, "class", "pl-8 mt-2 mb-10 border-l-8 border-primary-300 text-lg");
      attr_dev(blockquote, "cite", "https://material.io/components/selection-controls/");
      add_location(blockquote, file$3, 11, 0, 344);
      attr_dev(h50, "class", "pb-8 pt-10");
      attr_dev(h50, "id", "checkboxes");
      add_location(h50, file$3, 17, 0, 558);
      attr_dev(h51, "class", "pb-8 pt-10");
      attr_dev(h51, "id", "radio-buttons");
      add_location(h51, file$3, 33, 0, 1457);
      attr_dev(h52, "class", "pb-8 pt-10");
      attr_dev(h52, "id", "switches");
      add_location(h52, file$3, 59, 0, 2584);
    },
    m: function mount(target, anchor) {
      insert_dev(target, blockquote, anchor);
      append_dev(blockquote, p);
      append_dev(p, t0);
      insert_dev(target, t1, anchor);
      insert_dev(target, h50, anchor);
      append_dev(h50, t2);
      insert_dev(target, t3, anchor);
      mount_component(checkbox0, target, anchor);
      insert_dev(target, t4, anchor);
      mount_component(checkbox1, target, anchor);
      insert_dev(target, t5, anchor);
      mount_component(checkbox2, target, anchor);
      insert_dev(target, t6, anchor);
      mount_component(propstable0, target, anchor);
      insert_dev(target, t7, anchor);
      insert_dev(target, h51, anchor);
      append_dev(h51, t8);
      insert_dev(target, t9, anchor);
      mount_component(radiobuttongroup0, target, anchor);
      insert_dev(target, t10, anchor);
      mount_component(radiobuttongroup1, target, anchor);
      insert_dev(target, t11, anchor);
      mount_component(radiobuttongroup2, target, anchor);
      insert_dev(target, t12, anchor);
      mount_component(propstable1, target, anchor);
      insert_dev(target, t13, anchor);
      insert_dev(target, h52, anchor);
      append_dev(h52, t14);
      insert_dev(target, t15, anchor);
      mount_component(switch0, target, anchor);
      insert_dev(target, t16, anchor);
      mount_component(switch1, target, anchor);
      insert_dev(target, t17, anchor);
      mount_component(propstable2, target, anchor);
      insert_dev(target, t18, anchor);
      mount_component(code_1, target, anchor);
      current = true;
    },
    p: noop,
    i: function intro(local) {
      if (current) return;
      transition_in(checkbox0.$$.fragment, local);
      transition_in(checkbox1.$$.fragment, local);
      transition_in(checkbox2.$$.fragment, local);
      transition_in(propstable0.$$.fragment, local);
      transition_in(radiobuttongroup0.$$.fragment, local);
      transition_in(radiobuttongroup1.$$.fragment, local);
      transition_in(radiobuttongroup2.$$.fragment, local);
      transition_in(propstable1.$$.fragment, local);
      transition_in(switch0.$$.fragment, local);
      transition_in(switch1.$$.fragment, local);
      transition_in(propstable2.$$.fragment, local);
      transition_in(code_1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(checkbox0.$$.fragment, local);
      transition_out(checkbox1.$$.fragment, local);
      transition_out(checkbox2.$$.fragment, local);
      transition_out(propstable0.$$.fragment, local);
      transition_out(radiobuttongroup0.$$.fragment, local);
      transition_out(radiobuttongroup1.$$.fragment, local);
      transition_out(radiobuttongroup2.$$.fragment, local);
      transition_out(propstable1.$$.fragment, local);
      transition_out(switch0.$$.fragment, local);
      transition_out(switch1.$$.fragment, local);
      transition_out(propstable2.$$.fragment, local);
      transition_out(code_1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(blockquote);
      if (detaching) detach_dev(t1);
      if (detaching) detach_dev(h50);
      if (detaching) detach_dev(t3);
      destroy_component(checkbox0, detaching);
      if (detaching) detach_dev(t4);
      destroy_component(checkbox1, detaching);
      if (detaching) detach_dev(t5);
      destroy_component(checkbox2, detaching);
      if (detaching) detach_dev(t6);
      destroy_component(propstable0, detaching);
      if (detaching) detach_dev(t7);
      if (detaching) detach_dev(h51);
      if (detaching) detach_dev(t9);
      destroy_component(radiobuttongroup0, detaching);
      if (detaching) detach_dev(t10);
      destroy_component(radiobuttongroup1, detaching);
      if (detaching) detach_dev(t11);
      destroy_component(radiobuttongroup2, detaching);
      if (detaching) detach_dev(t12);
      destroy_component(propstable1, detaching);
      if (detaching) detach_dev(t13);
      if (detaching) detach_dev(h52);
      if (detaching) detach_dev(t15);
      destroy_component(switch0, detaching);
      if (detaching) detach_dev(t16);
      destroy_component(switch1, detaching);
      if (detaching) detach_dev(t17);
      destroy_component(propstable2, detaching);
      if (detaching) detach_dev(t18);
      destroy_component(code_1, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance$3($$self, $$props, $$invalidate) {
  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Selection_controls> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Selection_controls", $$slots, []);

  $$self.$capture_state = () => ({
    Checkbox,
    RadioButtonGroup,
    Switch,
    Icon,
    Code,
    code,
    PropsTable
  });

  return [];
}

class Selection_controls extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$3, create_fragment$3, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Selection_controls",
      options,
      id: create_fragment$3.name
    });
  }

}

export default Selection_controls;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

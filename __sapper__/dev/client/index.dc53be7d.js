import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, x as create_slot, F as assign, G as ClassBuilder, v as validate_slots, H as exclude_internal_props, t as text, l as claim_text, h as insert_dev, z as set_data_dev, b as detach_dev, e as element, c as claim_element, a as children, I as set_attributes, f as add_location, B as update_slot, J as get_spread_update, r as transition_in, u as transition_out, K as createEventDispatcher, L as Icon, o as create_component, p as claim_component, q as mount_component, w as destroy_component, k as space, m as claim_space, g as attr_dev, j as append_dev, M as listen_dev, N as prop_dev, O as run_all, Q as bubble, R as empty, T as group_outros, U as check_outros } from './client.798c10e3.js';
import { R as Ripple } from './index.34e3483a.js';

/* src/components/Checkbox/Label.svelte generated by Svelte v3.24.0 */
const file = "src/components/Checkbox/Label.svelte"; // (27:8) {label}

function fallback_block(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text(
      /*label*/
      ctx[0]);
    },
    l: function claim(nodes) {
      t = claim_text(nodes,
      /*label*/
      ctx[0]);
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    p: function update(ctx, dirty) {
      if (dirty &
      /*label*/
      1) set_data_dev(t,
      /*label*/
      ctx[0]);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block.name,
    type: "fallback",
    source: "(27:8) {label}",
    ctx
  });
  return block;
}

function create_fragment(ctx) {
  let label_1;
  let current;
  const default_slot_template =
  /*$$slots*/
  ctx[7].default;
  const default_slot = create_slot(default_slot_template, ctx,
  /*$$scope*/
  ctx[6], null);
  const default_slot_or_fallback = default_slot || fallback_block(ctx);
  let label_1_levels = [{
    "aria-hidden": "true"
  },
  /*$$props*/
  ctx[2], {
    class:
    /*c*/
    ctx[1]
  }];
  let label_1_data = {};

  for (let i = 0; i < label_1_levels.length; i += 1) {
    label_1_data = assign(label_1_data, label_1_levels[i]);
  }

  const block = {
    c: function create() {
      label_1 = element("label");
      if (default_slot_or_fallback) default_slot_or_fallback.c();
      this.h();
    },
    l: function claim(nodes) {
      label_1 = claim_element(nodes, "LABEL", {
        "aria-hidden": true,
        class: true
      });
      var label_1_nodes = children(label_1);
      if (default_slot_or_fallback) default_slot_or_fallback.l(label_1_nodes);
      label_1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(label_1, label_1_data);
      add_location(label_1, file, 21, 0, 520);
    },
    m: function mount(target, anchor) {
      insert_dev(target, label_1, anchor);

      if (default_slot_or_fallback) {
        default_slot_or_fallback.m(label_1, null);
      }

      current = true;
    },
    p: function update(ctx, [dirty]) {
      if (default_slot) {
        if (default_slot.p && dirty &
        /*$$scope*/
        64) {
          update_slot(default_slot, default_slot_template, ctx,
          /*$$scope*/
          ctx[6], dirty, null, null);
        }
      } else {
        if (default_slot_or_fallback && default_slot_or_fallback.p && dirty &
        /*label*/
        1) {
          default_slot_or_fallback.p(ctx, dirty);
        }
      }

      set_attributes(label_1, label_1_data = get_spread_update(label_1_levels, [{
        "aria-hidden": "true"
      }, dirty &
      /*$$props*/
      4 &&
      /*$$props*/
      ctx[2], (!current || dirty &
      /*c*/
      2) && {
        class:
        /*c*/
        ctx[1]
      }]));
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(label_1);
      if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

const classesDefault = "pl-2 cursor-pointer 'text-gray-700 dark:text-gray-300'";

function instance($$self, $$props, $$invalidate) {
  let {
    classes = classesDefault
  } = $$props;
  let {
    label = ""
  } = $$props;
  let {
    disabled = false
  } = $$props;
  let {
    disabledClasses = "text-gray-500 dark:text-gray-600"
  } = $$props;
  const cb = new ClassBuilder(classes, classesDefault);
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Label", $$slots, ['default']);

  $$self.$set = $$new_props => {
    $$invalidate(2, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("classes" in $$new_props) $$invalidate(3, classes = $$new_props.classes);
    if ("label" in $$new_props) $$invalidate(0, label = $$new_props.label);
    if ("disabled" in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
    if ("disabledClasses" in $$new_props) $$invalidate(5, disabledClasses = $$new_props.disabledClasses);
    if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
  };

  $$self.$capture_state = () => ({
    ClassBuilder,
    classesDefault,
    classes,
    label,
    disabled,
    disabledClasses,
    cb,
    c
  });

  $$self.$inject_state = $$new_props => {
    $$invalidate(2, $$props = assign(assign({}, $$props), $$new_props));
    if ("classes" in $$props) $$invalidate(3, classes = $$new_props.classes);
    if ("label" in $$props) $$invalidate(0, label = $$new_props.label);
    if ("disabled" in $$props) $$invalidate(4, disabled = $$new_props.disabled);
    if ("disabledClasses" in $$props) $$invalidate(5, disabledClasses = $$new_props.disabledClasses);
    if ("c" in $$props) $$invalidate(1, c = $$new_props.c);
  };

  let c;

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$self.$$.update = () => {
     $$invalidate(1, c = cb.flush().add(classes, true, classesDefault).add(disabledClasses, disabled).add($$props.class).get());
  };

  $$props = exclude_internal_props($$props);
  return [label, c, $$props, classes, disabled, disabledClasses, $$scope, $$slots];
}

class Label extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      classes: 3,
      label: 0,
      disabled: 4,
      disabledClasses: 5
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Label",
      options,
      id: create_fragment.name
    });
  }

  get classes() {
    throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set classes(value) {
    throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get label() {
    throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set label(value) {
    throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get disabled() {
    throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set disabled(value) {
    throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get disabledClasses() {
    throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set disabledClasses(value) {
    throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

/* src/components/Checkbox/Checkbox.svelte generated by Svelte v3.24.0 */
const file$1 = "src/components/Checkbox/Checkbox.svelte";

const get_label_slot_changes = dirty => ({});

const get_label_slot_context = ctx => ({}); // (73:8) {:else}


function create_else_block(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      class:
      /*disabled*/
      ctx[4] ? "text-gray-500 dark:text-gray-600" : "text-gray-600 dark:text-gray-300",
      $$slots: {
        default: [create_default_slot_2]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(icon.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      const icon_changes = {};
      if (dirty &
      /*disabled*/
      16) icon_changes.class =
      /*disabled*/
      ctx[4] ? "text-gray-500 dark:text-gray-600" : "text-gray-600 dark:text-gray-300";

      if (dirty &
      /*$$scope*/
      32768) {
        icon_changes.$$scope = {
          dirty,
          ctx
        };
      }

      icon.$set(icon_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(icon, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(73:8) {:else}",
    ctx
  });
  return block;
} // (68:8) {#if checked}


function create_if_block(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      class:
      /*disabled*/
      ctx[4] ? "text-gray-500 dark:text-gray-600" : `text-${
      /*color*/
      ctx[3]}-500 dark:text-${
      /*color*/
      ctx[3]}-100`,
      $$slots: {
        default: [create_default_slot_1]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(icon.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      const icon_changes = {};
      if (dirty &
      /*disabled, color*/
      24) icon_changes.class =
      /*disabled*/
      ctx[4] ? "text-gray-500 dark:text-gray-600" : `text-${
      /*color*/
      ctx[3]}-500 dark:text-${
      /*color*/
      ctx[3]}-100`;

      if (dirty &
      /*$$scope*/
      32768) {
        icon_changes.$$scope = {
          dirty,
          ctx
        };
      }

      icon.$set(icon_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(icon, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(68:8) {#if checked}",
    ctx
  });
  return block;
} // (74:10) <Icon             class={disabled ? 'text-gray-500 dark:text-gray-600' : 'text-gray-600 dark:text-gray-300'}>


function create_default_slot_2(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("check_box_outline_blank");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "check_box_outline_blank");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_2.name,
    type: "slot",
    source: "(74:10) <Icon             class={disabled ? 'text-gray-500 dark:text-gray-600' : 'text-gray-600 dark:text-gray-300'}>",
    ctx
  });
  return block;
} // (69:10) <Icon             class={disabled ? 'text-gray-500 dark:text-gray-600' : `text-${color}-500 dark:text-${color}-100`}>


function create_default_slot_1(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("check_box");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "check_box");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_1.name,
    type: "slot",
    source: "(69:10) <Icon             class={disabled ? 'text-gray-500 dark:text-gray-600' : `text-${color}-500 dark:text-${color}-100`}>",
    ctx
  });
  return block;
} // (67:6) <Ripple color={rippleColor}>


function create_default_slot(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block, create_else_block];
  const if_blocks = [];

  function select_block_type(ctx, dirty) {
    if (
    /*checked*/
    ctx[0]) return 0;
    return 1;
  }

  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const block = {
    c: function create() {
      if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx);

      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];

        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block.c();
        }

        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching) detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(67:6) <Ripple color={rippleColor}>",
    ctx
  });
  return block;
} // (81:23)        


function fallback_block$1(ctx) {
  let label_1;
  let current;
  label_1 = new Label({
    props: {
      disabled:
      /*disabled*/
      ctx[4],
      label:
      /*label*/
      ctx[2],
      class:
      /*labelClasses*/
      ctx[5]
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(label_1.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(label_1.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(label_1, target, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      const label_1_changes = {};
      if (dirty &
      /*disabled*/
      16) label_1_changes.disabled =
      /*disabled*/
      ctx[4];
      if (dirty &
      /*label*/
      4) label_1_changes.label =
      /*label*/
      ctx[2];
      if (dirty &
      /*labelClasses*/
      32) label_1_changes.class =
      /*labelClasses*/
      ctx[5];
      label_1.$set(label_1_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(label_1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(label_1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(label_1, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block$1.name,
    type: "fallback",
    source: "(81:23)        ",
    ctx
  });
  return block;
}

function create_fragment$1(ctx) {
  let div2;
  let div1;
  let input;
  let t0;
  let div0;
  let ripple;
  let t1;
  let div2_class_value;
  let current;
  let mounted;
  let dispose;
  ripple = new Ripple({
    props: {
      color:
      /*rippleColor*/
      ctx[6],
      $$slots: {
        default: [create_default_slot]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  const label_slot_template =
  /*$$slots*/
  ctx[12].label;
  const label_slot = create_slot(label_slot_template, ctx,
  /*$$scope*/
  ctx[15], get_label_slot_context);
  const label_slot_or_fallback = label_slot || fallback_block$1(ctx);
  const block = {
    c: function create() {
      div2 = element("div");
      div1 = element("div");
      input = element("input");
      t0 = space();
      div0 = element("div");
      create_component(ripple.$$.fragment);
      t1 = space();
      if (label_slot_or_fallback) label_slot_or_fallback.c();
      this.h();
    },
    l: function claim(nodes) {
      div2 = claim_element(nodes, "DIV", {
        class: true
      });
      var div2_nodes = children(div2);
      div1 = claim_element(div2_nodes, "DIV", {
        class: true
      });
      var div1_nodes = children(div1);
      input = claim_element(div1_nodes, "INPUT", {
        class: true,
        type: true,
        value: true
      });
      t0 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", {
        class: true
      });
      var div0_nodes = children(div0);
      claim_component(ripple.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach_dev);
      t1 = claim_space(div1_nodes);
      if (label_slot_or_fallback) label_slot_or_fallback.l(div1_nodes);
      div1_nodes.forEach(detach_dev);
      div2_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(input, "class", "hidden");
      attr_dev(input, "type", "checkbox");
      input.__value =
      /*value*/
      ctx[1];
      input.value = input.__value;
      add_location(input, file$1, 64, 4, 1715);
      attr_dev(div0, "class", "relative w-auto h-auto z-0");
      add_location(div0, file$1, 65, 4, 1791);
      attr_dev(div1, "class",
      /*c*/
      ctx[7]);
      add_location(div1, file$1, 63, 2, 1678);
      attr_dev(div2, "class", div2_class_value =
      /*$$props*/
      ctx[9].class);
      add_location(div2, file$1, 62, 0, 1648);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div2, anchor);
      append_dev(div2, div1);
      append_dev(div1, input);
      input.checked =
      /*checked*/
      ctx[0];
      append_dev(div1, t0);
      append_dev(div1, div0);
      mount_component(ripple, div0, null);
      append_dev(div1, t1);

      if (label_slot_or_fallback) {
        label_slot_or_fallback.m(div1, null);
      }

      current = true;

      if (!mounted) {
        dispose = [listen_dev(input, "change",
        /*input_change_handler*/
        ctx[14]), listen_dev(input, "change",
        /*change_handler*/
        ctx[13], false, false, false), listen_dev(div1, "click",
        /*check*/
        ctx[8], false, false, false)];
        mounted = true;
      }
    },
    p: function update(ctx, [dirty]) {
      if (!current || dirty &
      /*value*/
      2) {
        prop_dev(input, "__value",
        /*value*/
        ctx[1]);
        input.value = input.__value;
      }

      if (dirty &
      /*checked*/
      1) {
        input.checked =
        /*checked*/
        ctx[0];
      }

      const ripple_changes = {};
      if (dirty &
      /*rippleColor*/
      64) ripple_changes.color =
      /*rippleColor*/
      ctx[6];

      if (dirty &
      /*$$scope, disabled, color, checked*/
      32793) {
        ripple_changes.$$scope = {
          dirty,
          ctx
        };
      }

      ripple.$set(ripple_changes);

      if (label_slot) {
        if (label_slot.p && dirty &
        /*$$scope*/
        32768) {
          update_slot(label_slot, label_slot_template, ctx,
          /*$$scope*/
          ctx[15], dirty, get_label_slot_changes, get_label_slot_context);
        }
      } else {
        if (label_slot_or_fallback && label_slot_or_fallback.p && dirty &
        /*disabled, label, labelClasses*/
        52) {
          label_slot_or_fallback.p(ctx, dirty);
        }
      }

      if (!current || dirty &
      /*c*/
      128) {
        attr_dev(div1, "class",
        /*c*/
        ctx[7]);
      }

      if (!current || dirty &
      /*$$props*/
      512 && div2_class_value !== (div2_class_value =
      /*$$props*/
      ctx[9].class)) {
        attr_dev(div2, "class", div2_class_value);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(ripple.$$.fragment, local);
      transition_in(label_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(ripple.$$.fragment, local);
      transition_out(label_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div2);
      destroy_component(ripple);
      if (label_slot_or_fallback) label_slot_or_fallback.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$1.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

const classesDefault$1 = "inline-flex items-center mb-2 cursor-pointer z-10";

function instance$1($$self, $$props, $$invalidate) {
  let {
    value = ""
  } = $$props;
  let {
    label = ""
  } = $$props;
  let {
    color = "primary"
  } = $$props;
  let {
    checked = false
  } = $$props;
  let {
    disabled = false
  } = $$props;
  let {
    classes = classesDefault$1
  } = $$props;
  let {
    labelClasses = i => i
  } = $$props;
  let {
    group = []
  } = $$props; // for bind:group
  //keep track of group array state;

  let groupstate = group.includes(value);
  const dispatch = createEventDispatcher();

  function check() {
    if (disabled) return;
    $$invalidate(0, checked = !checked);
    dispatch("change", checked);
  }

  const cb = new ClassBuilder(classes, classesDefault$1);
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Checkbox", $$slots, ['label']);

  function change_handler(event) {
    bubble($$self, event);
  }

  function input_change_handler() {
    checked = this.checked;
    $$invalidate(0, checked);
  }

  $$self.$set = $$new_props => {
    $$invalidate(9, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("value" in $$new_props) $$invalidate(1, value = $$new_props.value);
    if ("label" in $$new_props) $$invalidate(2, label = $$new_props.label);
    if ("color" in $$new_props) $$invalidate(3, color = $$new_props.color);
    if ("checked" in $$new_props) $$invalidate(0, checked = $$new_props.checked);
    if ("disabled" in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
    if ("classes" in $$new_props) $$invalidate(11, classes = $$new_props.classes);
    if ("labelClasses" in $$new_props) $$invalidate(5, labelClasses = $$new_props.labelClasses);
    if ("group" in $$new_props) $$invalidate(10, group = $$new_props.group);
    if ("$$scope" in $$new_props) $$invalidate(15, $$scope = $$new_props.$$scope);
  };

  $$self.$capture_state = () => ({
    Label,
    createEventDispatcher,
    ClassBuilder,
    classesDefault: classesDefault$1,
    Icon,
    Ripple,
    value,
    label,
    color,
    checked,
    disabled,
    classes,
    labelClasses,
    group,
    groupstate,
    dispatch,
    check,
    cb,
    rippleColor,
    c
  });

  $$self.$inject_state = $$new_props => {
    $$invalidate(9, $$props = assign(assign({}, $$props), $$new_props));
    if ("value" in $$props) $$invalidate(1, value = $$new_props.value);
    if ("label" in $$props) $$invalidate(2, label = $$new_props.label);
    if ("color" in $$props) $$invalidate(3, color = $$new_props.color);
    if ("checked" in $$props) $$invalidate(0, checked = $$new_props.checked);
    if ("disabled" in $$props) $$invalidate(4, disabled = $$new_props.disabled);
    if ("classes" in $$props) $$invalidate(11, classes = $$new_props.classes);
    if ("labelClasses" in $$props) $$invalidate(5, labelClasses = $$new_props.labelClasses);
    if ("group" in $$props) $$invalidate(10, group = $$new_props.group);
    if ("groupstate" in $$props) $$invalidate(16, groupstate = $$new_props.groupstate);
    if ("rippleColor" in $$props) $$invalidate(6, rippleColor = $$new_props.rippleColor);
    if ("c" in $$props) $$invalidate(7, c = $$new_props.c);
  };

  let rippleColor;
  let c;

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*value, disabled, group, groupstate, checked*/
    66579) {
       if (value && !disabled) {
        const groupHasValue = group.includes(value); // check if group array has changed, or something else

        if (groupHasValue === groupstate) {
          // add to group array if checked
          if (checked && !groupHasValue) {
            $$invalidate(10, group = group.concat([value]));
            $$invalidate(16, groupstate = true);
          } else if (!checked && groupHasValue) {
            $$invalidate(10, group = [...group.filter(v => v !== value)]); // remove from group array if unchecked

            $$invalidate(16, groupstate = false);
          }
        } else {
          // group array has changed. Click box
          $$invalidate(16, groupstate = groupHasValue);
          check();
        }
      }
    }

    if ($$self.$$.dirty &
    /*checked, disabled, color*/
    25) {
       $$invalidate(6, rippleColor = checked && !disabled ? color : "gray");
    }

     $$invalidate(7, c = cb.flush().add(classes, true, classesDefault$1).add($$props.class).get());
  };

  $$props = exclude_internal_props($$props);
  return [checked, value, label, color, disabled, labelClasses, rippleColor, c, check, $$props, group, classes, $$slots, change_handler, input_change_handler, $$scope];
}

class Checkbox extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$1, create_fragment$1, safe_not_equal, {
      value: 1,
      label: 2,
      color: 3,
      checked: 0,
      disabled: 4,
      classes: 11,
      labelClasses: 5,
      group: 10
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Checkbox",
      options,
      id: create_fragment$1.name
    });
  }

  get value() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set value(value) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get label() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set label(value) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get color() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set color(value) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get checked() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set checked(value) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get disabled() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set disabled(value) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get classes() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set classes(value) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get labelClasses() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set labelClasses(value) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get group() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set group(value) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

export { Checkbox as C, Label as L };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, e as element, j as append_dev, K as createEventDispatcher, G as ClassBuilder, v as validate_slots, F as assign, H as exclude_internal_props, L as Icon, o as create_component, c as claim_element, a as children, p as claim_component, b as detach_dev, g as attr_dev, a9 as toggle_class, f as add_location, h as insert_dev, q as mount_component, r as transition_in, u as transition_out, w as destroy_component, k as space, t as text, m as claim_space, l as claim_text, ae as null_to_empty, M as listen_dev, T as group_outros, U as check_outros, z as set_data_dev, x as create_slot, E as set_style, B as update_slot, Q as bubble, a3 as validate_each_argument, af as Spacer, a4 as destroy_each, a0 as binding_callbacks, a1 as bind, a2 as add_flush_callback, R as empty, ag as HtmlTag, C as Button, J as get_spread_update, a5 as get_spread_object, ah as slide, P as ProgressLinear, ac as add_render_callback, ad as create_bidirectional_transition } from './client.b0aae0e4.js';
import { T as TextField } from './index.b8fbded3.js';
import { S as Select } from './index.79b156af.js';

/* src/components/DataTable/Header.svelte generated by Svelte v3.24.0 */
const file = "src/components/DataTable/Header.svelte";

function add_css() {
  var style = element("style");
  style.id = "svelte-1qy4u3g-style";
  style.textContent = "th.svelte-1qy4u3g .asc.svelte-1qy4u3g{transform:rotate(180deg)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGVhZGVyLnN2ZWx0ZSIsInNvdXJjZXMiOlsiSGVhZGVyLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBpbXBvcnQgeyBDbGFzc0J1aWxkZXIgfSBmcm9tIFwiLi4vLi4vdXRpbHMvY2xhc3Nlcy5qc1wiO1xuICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG4gIGltcG9ydCBJY29uIGZyb20gXCIuLi9JY29uXCI7XG5cbiAgY29uc3QgY2xhc3Nlc0RlZmF1bHQgPSBcImNhcGl0YWxpemUgZHVyYXRpb24tMTAwIHRleHQtZ3JheS02MDAgdGV4dC14cyBob3Zlcjp0ZXh0LWJsYWNrIGRhcmstaG92ZXI6dGV4dC13aGl0ZSBwLTMgZm9udC1ub3JtYWwgdGV4dC1yaWdodFwiO1xuXG5cbiAgZXhwb3J0IGxldCBjbGFzc2VzID0gY2xhc3Nlc0RlZmF1bHQ7XG5cblxuICBleHBvcnQgbGV0IGNvbHVtbiA9IHt9O1xuICBleHBvcnQgbGV0IGFzYyA9IGZhbHNlO1xuICBleHBvcnQgbGV0IHNvcnRCeSA9IGZhbHNlO1xuICBleHBvcnQgbGV0IHNvcnRhYmxlID0gdHJ1ZTtcbiAgZXhwb3J0IGxldCBlZGl0aW5nID0gZmFsc2U7XG5cbiAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICBjb25zdCBjYiA9IG5ldyBDbGFzc0J1aWxkZXIoY2xhc3NlcywgY2xhc3Nlc0RlZmF1bHQpO1xuICAkOiBjID0gY2JcbiAgICAuZmx1c2goKVxuICAgIC5hZGQoY2xhc3NlcywgdHJ1ZSwgY2xhc3Nlc0RlZmF1bHQpXG4gICAgLmFkZCgkJHByb3BzLmNsYXNzKVxuICAgIC5nZXQoKTtcblxuICBmdW5jdGlvbiBoZWFkZXJDb2x1bW5DbGFzcyhjb2x1bW4pIHtcbiAgICBjb25zdCBjYiA9IG5ldyBDbGFzc0J1aWxkZXIoJ3NvcnQtd3JhcHBlciBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWVuZCcpO1xuICAgIGlmIChjb2x1bW4uaGVhZGVyUmVwbGFjZSkge1xuICAgICAgY2IucmVwbGFjZShjb2x1bW4uaGVhZGVyUmVwbGFjZSlcbiAgICB9XG4gICAgaWYgKGNvbHVtbi5oZWFkZXJBZGQpIHtcbiAgICAgIGNiLmFkZChjb2x1bW4uaGVhZGVyQWRkKTtcbiAgICB9XG4gICAgaWYgKGNvbHVtbi5oZWFkZXJSZW1vdmUpIHtcbiAgICAgIGNiLnJlbW92ZShjb2x1bW4uaGVhZGVyUmVtb3ZlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNiLmdldCgpO1xuICB9XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICB0aCAuYXNjIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xuICB9XG48L3N0eWxlPlxuXG48dGhcbiAgY2xhc3M9e2N9XG4gIGNsYXNzOmN1cnNvci1wb2ludGVyPXtzb3J0YWJsZSB8fCBjb2x1bW4uc29ydGFibGV9XG4gIG9uOmNsaWNrPXsoKSA9PiB7XG4gICAgaWYgKGNvbHVtbi5zb3J0YWJsZSA9PT0gZmFsc2UgfHwgIXNvcnRhYmxlKSByZXR1cm47XG4gICAgZGlzcGF0Y2goXCJzb3J0XCIsIGNvbHVtbik7XG5cbiAgICBlZGl0aW5nID0gZmFsc2U7XG4gICAgYXNjID0gc29ydEJ5ID09PSBjb2x1bW4gPyAhYXNjIDogZmFsc2U7XG4gICAgc29ydEJ5ID0gY29sdW1uO1xuICB9fVxuPlxuICA8ZGl2IGNsYXNzPXtoZWFkZXJDb2x1bW5DbGFzcyhjb2x1bW4pfT5cbiAgICB7I2lmIHNvcnRhYmxlICYmIGNvbHVtbi5zb3J0YWJsZSAhPT0gZmFsc2UgJiYgIWNvbHVtbi5pY29uQWZ0ZXJ9XG4gICAgICA8c3BhbiBjbGFzcz1cInNvcnRcIiBjbGFzczphc2M9eyFhc2MgJiYgc29ydEJ5ID09PSBjb2x1bW59PlxuICAgICAgICA8SWNvbiBzbWFsbCBjb2xvcj1cInRleHQtZ3JheS00MDAgZGFyazp0ZXh0LWdyYXktMTAwXCI+YXJyb3dfZG93bndhcmQ8L0ljb24+XG4gICAgICA8L3NwYW4+XG4gICAgey9pZn1cbiAgICA8c3Bhbj57Y29sdW1uLmxhYmVsIHx8IGNvbHVtbi5maWVsZH08L3NwYW4+XG4gICAgeyNpZiBzb3J0YWJsZSAmJiBjb2x1bW4uc29ydGFibGUgIT09IGZhbHNlICYmICEhY29sdW1uLmljb25BZnRlcn1cbiAgICAgIDxzcGFuIGNsYXNzPVwic29ydFwiIGNsYXNzOmFzYz17IWFzYyAmJiBzb3J0QnkgPT09IGNvbHVtbn0+XG4gICAgICAgIDxJY29uIHNtYWxsIGNvbG9yPVwidGV4dC1ncmF5LTQwMCBkYXJrOnRleHQtZ3JheS0xMDBcIj5hcnJvd19kb3dud2FyZDwvSWNvbj5cbiAgICAgIDwvc3Bhbj5cbiAgICB7L2lmfVxuICA8L2Rpdj5cbjwvdGg+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMENFLGlCQUFFLENBQUMsSUFBSSxlQUFDLENBQUMsQUFDUCxTQUFTLENBQUUsT0FBTyxNQUFNLENBQUMsQUFDM0IsQ0FBQyJ9 */";
  append_dev(document.head, style);
} // (61:4) {#if sortable && column.sortable !== false && !column.iconAfter}


function create_if_block_1(ctx) {
  let span;
  let icon;
  let current;
  icon = new Icon({
    props: {
      small: true,
      color: "text-gray-400 dark:text-gray-100",
      $$slots: {
        default: [create_default_slot_1]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      span = element("span");
      create_component(icon.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      span = claim_element(nodes, "SPAN", {
        class: true
      });
      var span_nodes = children(span);
      claim_component(icon.$$.fragment, span_nodes);
      span_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(span, "class", "sort svelte-1qy4u3g");
      toggle_class(span, "asc", !
      /*asc*/
      ctx[0] &&
      /*sortBy*/
      ctx[1] ===
      /*column*/
      ctx[3]);
      add_location(span, file, 61, 6, 1498);
    },
    m: function mount(target, anchor) {
      insert_dev(target, span, anchor);
      mount_component(icon, span, null);
      current = true;
    },
    p: function update(ctx, dirty) {
      const icon_changes = {};

      if (dirty &
      /*$$scope*/
      4096) {
        icon_changes.$$scope = {
          dirty,
          ctx
        };
      }

      icon.$set(icon_changes);

      if (dirty &
      /*asc, sortBy, column*/
      11) {
        toggle_class(span, "asc", !
        /*asc*/
        ctx[0] &&
        /*sortBy*/
        ctx[1] ===
        /*column*/
        ctx[3]);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(span);
      destroy_component(icon);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(61:4) {#if sortable && column.sortable !== false && !column.iconAfter}",
    ctx
  });
  return block;
} // (63:8) <Icon small color="text-gray-400 dark:text-gray-100">


function create_default_slot_1(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("arrow_downward");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "arrow_downward");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_1.name,
    type: "slot",
    source: "(63:8) <Icon small color=\\\"text-gray-400 dark:text-gray-100\\\">",
    ctx
  });
  return block;
} // (67:4) {#if sortable && column.sortable !== false && !!column.iconAfter}


function create_if_block(ctx) {
  let span;
  let icon;
  let current;
  icon = new Icon({
    props: {
      small: true,
      color: "text-gray-400 dark:text-gray-100",
      $$slots: {
        default: [create_default_slot]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      span = element("span");
      create_component(icon.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      span = claim_element(nodes, "SPAN", {
        class: true
      });
      var span_nodes = children(span);
      claim_component(icon.$$.fragment, span_nodes);
      span_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(span, "class", "sort svelte-1qy4u3g");
      toggle_class(span, "asc", !
      /*asc*/
      ctx[0] &&
      /*sortBy*/
      ctx[1] ===
      /*column*/
      ctx[3]);
      add_location(span, file, 67, 6, 1787);
    },
    m: function mount(target, anchor) {
      insert_dev(target, span, anchor);
      mount_component(icon, span, null);
      current = true;
    },
    p: function update(ctx, dirty) {
      const icon_changes = {};

      if (dirty &
      /*$$scope*/
      4096) {
        icon_changes.$$scope = {
          dirty,
          ctx
        };
      }

      icon.$set(icon_changes);

      if (dirty &
      /*asc, sortBy, column*/
      11) {
        toggle_class(span, "asc", !
        /*asc*/
        ctx[0] &&
        /*sortBy*/
        ctx[1] ===
        /*column*/
        ctx[3]);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(span);
      destroy_component(icon);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(67:4) {#if sortable && column.sortable !== false && !!column.iconAfter}",
    ctx
  });
  return block;
} // (69:8) <Icon small color="text-gray-400 dark:text-gray-100">


function create_default_slot(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("arrow_downward");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "arrow_downward");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(69:8) <Icon small color=\\\"text-gray-400 dark:text-gray-100\\\">",
    ctx
  });
  return block;
}

function create_fragment(ctx) {
  let th;
  let div;
  let t0;
  let span;
  let t1_value = (
  /*column*/
  ctx[3].label ||
  /*column*/
  ctx[3].field) + "";
  let t1;
  let t2;
  let div_class_value;
  let th_class_value;
  let current;
  let mounted;
  let dispose;
  let if_block0 =
  /*sortable*/
  ctx[4] &&
  /*column*/
  ctx[3].sortable !== false && !
  /*column*/
  ctx[3].iconAfter && create_if_block_1(ctx);
  let if_block1 =
  /*sortable*/
  ctx[4] &&
  /*column*/
  ctx[3].sortable !== false && !!
  /*column*/
  ctx[3].iconAfter && create_if_block(ctx);
  const block = {
    c: function create() {
      th = element("th");
      div = element("div");
      if (if_block0) if_block0.c();
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      t2 = space();
      if (if_block1) if_block1.c();
      this.h();
    },
    l: function claim(nodes) {
      th = claim_element(nodes, "TH", {
        class: true
      });
      var th_nodes = children(th);
      div = claim_element(th_nodes, "DIV", {
        class: true
      });
      var div_nodes = children(div);
      if (if_block0) if_block0.l(div_nodes);
      t0 = claim_space(div_nodes);
      span = claim_element(div_nodes, "SPAN", {});
      var span_nodes = children(span);
      t1 = claim_text(span_nodes, t1_value);
      span_nodes.forEach(detach_dev);
      t2 = claim_space(div_nodes);
      if (if_block1) if_block1.l(div_nodes);
      div_nodes.forEach(detach_dev);
      th_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      add_location(span, file, 65, 4, 1667);
      attr_dev(div, "class", div_class_value = "" + (null_to_empty(
      /*headerColumnClass*/
      ctx[7](
      /*column*/
      ctx[3])) + " svelte-1qy4u3g"));
      add_location(div, file, 59, 2, 1383);
      attr_dev(th, "class", th_class_value = "" + (null_to_empty(
      /*c*/
      ctx[5]) + " svelte-1qy4u3g"));
      toggle_class(th, "cursor-pointer",
      /*sortable*/
      ctx[4] ||
      /*column*/
      ctx[3].sortable);
      add_location(th, file, 47, 0, 1112);
    },
    m: function mount(target, anchor) {
      insert_dev(target, th, anchor);
      append_dev(th, div);
      if (if_block0) if_block0.m(div, null);
      append_dev(div, t0);
      append_dev(div, span);
      append_dev(span, t1);
      append_dev(div, t2);
      if (if_block1) if_block1.m(div, null);
      current = true;

      if (!mounted) {
        dispose = listen_dev(th, "click",
        /*click_handler*/
        ctx[9], false, false, false);
        mounted = true;
      }
    },
    p: function update(ctx, [dirty]) {
      if (
      /*sortable*/
      ctx[4] &&
      /*column*/
      ctx[3].sortable !== false && !
      /*column*/
      ctx[3].iconAfter) {
        if (if_block0) {
          if_block0.p(ctx, dirty);

          if (dirty &
          /*sortable, column*/
          24) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_1(ctx);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }

      if ((!current || dirty &
      /*column*/
      8) && t1_value !== (t1_value = (
      /*column*/
      ctx[3].label ||
      /*column*/
      ctx[3].field) + "")) set_data_dev(t1, t1_value);

      if (
      /*sortable*/
      ctx[4] &&
      /*column*/
      ctx[3].sortable !== false && !!
      /*column*/
      ctx[3].iconAfter) {
        if (if_block1) {
          if_block1.p(ctx, dirty);

          if (dirty &
          /*sortable, column*/
          24) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block(ctx);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }

      if (!current || dirty &
      /*column*/
      8 && div_class_value !== (div_class_value = "" + (null_to_empty(
      /*headerColumnClass*/
      ctx[7](
      /*column*/
      ctx[3])) + " svelte-1qy4u3g"))) {
        attr_dev(div, "class", div_class_value);
      }

      if (!current || dirty &
      /*c*/
      32 && th_class_value !== (th_class_value = "" + (null_to_empty(
      /*c*/
      ctx[5]) + " svelte-1qy4u3g"))) {
        attr_dev(th, "class", th_class_value);
      }

      if (dirty &
      /*c, sortable, column*/
      56) {
        toggle_class(th, "cursor-pointer",
        /*sortable*/
        ctx[4] ||
        /*column*/
        ctx[3].sortable);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(th);
      if (if_block0) if_block0.d();
      if (if_block1) if_block1.d();
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

const classesDefault = "capitalize duration-100 text-gray-600 text-xs hover:text-black dark-hover:text-white p-3 font-normal text-right";

function instance($$self, $$props, $$invalidate) {
  let {
    classes = classesDefault
  } = $$props;
  let {
    column = {}
  } = $$props;
  let {
    asc = false
  } = $$props;
  let {
    sortBy = false
  } = $$props;
  let {
    sortable = true
  } = $$props;
  let {
    editing = false
  } = $$props;
  const dispatch = createEventDispatcher();
  const cb = new ClassBuilder(classes, classesDefault);

  function headerColumnClass(column) {
    const cb = new ClassBuilder("sort-wrapper flex items-center justify-end");

    if (column.headerReplace) {
      cb.replace(column.headerReplace);
    }

    if (column.headerAdd) {
      cb.add(column.headerAdd);
    }

    if (column.headerRemove) {
      cb.remove(column.headerRemove);
    }

    return cb.get();
  }

  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Header", $$slots, []);

  const click_handler = () => {
    if (column.sortable === false || !sortable) return;
    dispatch("sort", column);
    $$invalidate(2, editing = false);
    $$invalidate(0, asc = sortBy === column ? !asc : false);
    $$invalidate(1, sortBy = column);
  };

  $$self.$set = $$new_props => {
    $$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("classes" in $$new_props) $$invalidate(8, classes = $$new_props.classes);
    if ("column" in $$new_props) $$invalidate(3, column = $$new_props.column);
    if ("asc" in $$new_props) $$invalidate(0, asc = $$new_props.asc);
    if ("sortBy" in $$new_props) $$invalidate(1, sortBy = $$new_props.sortBy);
    if ("sortable" in $$new_props) $$invalidate(4, sortable = $$new_props.sortable);
    if ("editing" in $$new_props) $$invalidate(2, editing = $$new_props.editing);
  };

  $$self.$capture_state = () => ({
    ClassBuilder,
    createEventDispatcher,
    Icon,
    classesDefault,
    classes,
    column,
    asc,
    sortBy,
    sortable,
    editing,
    dispatch,
    cb,
    headerColumnClass,
    c
  });

  $$self.$inject_state = $$new_props => {
    $$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
    if ("classes" in $$props) $$invalidate(8, classes = $$new_props.classes);
    if ("column" in $$props) $$invalidate(3, column = $$new_props.column);
    if ("asc" in $$props) $$invalidate(0, asc = $$new_props.asc);
    if ("sortBy" in $$props) $$invalidate(1, sortBy = $$new_props.sortBy);
    if ("sortable" in $$props) $$invalidate(4, sortable = $$new_props.sortable);
    if ("editing" in $$props) $$invalidate(2, editing = $$new_props.editing);
    if ("c" in $$props) $$invalidate(5, c = $$new_props.c);
  };

  let c;

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$self.$$.update = () => {
     $$invalidate(5, c = cb.flush().add(classes, true, classesDefault).add($$props.class).get());
  };

  $$props = exclude_internal_props($$props);
  return [asc, sortBy, editing, column, sortable, c, dispatch, headerColumnClass, classes, click_handler];
}

class Header extends SvelteComponentDev {
  constructor(options) {
    super(options);
    if (!document.getElementById("svelte-1qy4u3g-style")) add_css();
    init(this, options, instance, create_fragment, safe_not_equal, {
      classes: 8,
      column: 3,
      asc: 0,
      sortBy: 1,
      sortable: 4,
      editing: 2
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Header",
      options,
      id: create_fragment.name
    });
  }

  get classes() {
    throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set classes(value) {
    throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get column() {
    throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set column(value) {
    throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get asc() {
    throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set asc(value) {
    throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get sortBy() {
    throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set sortBy(value) {
    throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get sortable() {
    throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set sortable(value) {
    throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get editing() {
    throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set editing(value) {
    throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

/* src/components/DataTable/Editable.svelte generated by Svelte v3.24.0 */
const file$1 = "src/components/DataTable/Editable.svelte"; // (28:8)      

function fallback_block(ctx) {
  let textfield;
  let current;
  textfield = new TextField({
    props: {
      value:
      /*item*/
      ctx[1][
      /*column*/
      ctx[2].field],
      textarea:
      /*column*/
      ctx[2].textarea,
      remove: "bg-gray-100 bg-gray-300"
    },
    $$inline: true
  });
  textfield.$on("change",
  /*change_handler*/
  ctx[8]);
  textfield.$on("blur",
  /*blur_handler*/
  ctx[9]);
  const block = {
    c: function create() {
      create_component(textfield.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(textfield.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(textfield, target, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      const textfield_changes = {};
      if (dirty &
      /*item, column*/
      6) textfield_changes.value =
      /*item*/
      ctx[1][
      /*column*/
      ctx[2].field];
      if (dirty &
      /*column*/
      4) textfield_changes.textarea =
      /*column*/
      ctx[2].textarea;
      textfield.$set(textfield_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(textfield.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(textfield.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(textfield, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block.name,
    type: "fallback",
    source: "(28:8)      ",
    ctx
  });
  return block;
}

function create_fragment$1(ctx) {
  let div;
  let current;
  const default_slot_template =
  /*$$slots*/
  ctx[7].default;
  const default_slot = create_slot(default_slot_template, ctx,
  /*$$scope*/
  ctx[6], null);
  const default_slot_or_fallback = default_slot || fallback_block(ctx);
  const block = {
    c: function create() {
      div = element("div");
      if (default_slot_or_fallback) default_slot_or_fallback.c();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {
        class: true,
        style: true
      });
      var div_nodes = children(div);
      if (default_slot_or_fallback) default_slot_or_fallback.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class",
      /*c*/
      ctx[3]);
      set_style(div, "width", "300px");
      add_location(div, file$1, 26, 0, 629);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);

      if (default_slot_or_fallback) {
        default_slot_or_fallback.m(div, null);
      }

      current = true;
    },
    p: function update(ctx, [dirty]) {
      if (default_slot) {
        if (default_slot.p && dirty &
        /*$$scope*/
        64) {
          update_slot(default_slot, default_slot_template, ctx,
          /*$$scope*/
          ctx[6], dirty, null, null);
        }
      } else {
        if (default_slot_or_fallback && default_slot_or_fallback.p && dirty &
        /*item, column, editing*/
        7) {
          default_slot_or_fallback.p(ctx, dirty);
        }
      }

      if (!current || dirty &
      /*c*/
      8) {
        attr_dev(div, "class",
        /*c*/
        ctx[3]);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div);
      if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$1.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

const classesDefault$1 = "absolute left-0 top-0 z-10 bg-white dark:bg-dark-400 p-2 elevation-3 rounded";

function instance$1($$self, $$props, $$invalidate) {
  let {
    item = {}
  } = $$props;
  let {
    column = {}
  } = $$props;
  let {
    editing = false
  } = $$props;
  let {
    classes = classesDefault$1
  } = $$props;
  const dispatch = createEventDispatcher();
  const cb = new ClassBuilder(classes, classesDefault$1);
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Editable", $$slots, ['default']);

  function change_handler(event) {
    bubble($$self, event);
  }

  const blur_handler = ({
    target
  }) => {
    $$invalidate(0, editing = false);
    dispatch("update", {
      item,
      column,
      value: target.value
    });
  };

  $$self.$set = $$new_props => {
    $$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("item" in $$new_props) $$invalidate(1, item = $$new_props.item);
    if ("column" in $$new_props) $$invalidate(2, column = $$new_props.column);
    if ("editing" in $$new_props) $$invalidate(0, editing = $$new_props.editing);
    if ("classes" in $$new_props) $$invalidate(5, classes = $$new_props.classes);
    if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
  };

  $$self.$capture_state = () => ({
    ClassBuilder,
    createEventDispatcher,
    TextField,
    Icon,
    classesDefault: classesDefault$1,
    item,
    column,
    editing,
    classes,
    dispatch,
    cb,
    c
  });

  $$self.$inject_state = $$new_props => {
    $$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
    if ("item" in $$props) $$invalidate(1, item = $$new_props.item);
    if ("column" in $$props) $$invalidate(2, column = $$new_props.column);
    if ("editing" in $$props) $$invalidate(0, editing = $$new_props.editing);
    if ("classes" in $$props) $$invalidate(5, classes = $$new_props.classes);
    if ("c" in $$props) $$invalidate(3, c = $$new_props.c);
  };

  let c;

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$self.$$.update = () => {
     $$invalidate(3, c = cb.flush().add(classes, true, classesDefault$1).add($$props.class).get());
  };

  $$props = exclude_internal_props($$props);
  return [editing, item, column, c, dispatch, classes, $$scope, $$slots, change_handler, blur_handler];
}

class Editable extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$1, create_fragment$1, safe_not_equal, {
      item: 1,
      column: 2,
      editing: 0,
      classes: 5
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Editable",
      options,
      id: create_fragment$1.name
    });
  }

  get item() {
    throw new Error("<Editable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set item(value) {
    throw new Error("<Editable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get column() {
    throw new Error("<Editable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set column(value) {
    throw new Error("<Editable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get editing() {
    throw new Error("<Editable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set editing(value) {
    throw new Error("<Editable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get classes() {
    throw new Error("<Editable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set classes(value) {
    throw new Error("<Editable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

/* src/components/DataTable/Row.svelte generated by Svelte v3.24.0 */
const file$2 = "src/components/DataTable/Row.svelte";

const get_edit_dialog_slot_changes = dirty => ({});

const get_edit_dialog_slot_context = ctx => ({});

function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[18] = list[i];
  child_ctx[20] = i;
  return child_ctx;
} // (59:6) {#if editable && column.editable !== false && editing[index] === i}


function create_if_block_1$1(ctx) {
  let current;
  const edit_dialog_slot_template =
  /*$$slots*/
  ctx[10]["edit-dialog"];
  const edit_dialog_slot = create_slot(edit_dialog_slot_template, ctx,
  /*$$scope*/
  ctx[9], get_edit_dialog_slot_context);
  const edit_dialog_slot_or_fallback = edit_dialog_slot || fallback_block$1(ctx);
  const block = {
    c: function create() {
      if (edit_dialog_slot_or_fallback) edit_dialog_slot_or_fallback.c();
    },
    l: function claim(nodes) {
      if (edit_dialog_slot_or_fallback) edit_dialog_slot_or_fallback.l(nodes);
    },
    m: function mount(target, anchor) {
      if (edit_dialog_slot_or_fallback) {
        edit_dialog_slot_or_fallback.m(target, anchor);
      }

      current = true;
    },
    p: function update(ctx, dirty) {
      if (edit_dialog_slot) {
        if (edit_dialog_slot.p && dirty &
        /*$$scope*/
        512) {
          update_slot(edit_dialog_slot, edit_dialog_slot_template, ctx,
          /*$$scope*/
          ctx[9], dirty, get_edit_dialog_slot_changes, get_edit_dialog_slot_context);
        }
      } else {
        if (edit_dialog_slot_or_fallback && edit_dialog_slot_or_fallback.p && dirty &
        /*editableClasses, columns, editing, item*/
        39) {
          edit_dialog_slot_or_fallback.p(ctx, dirty);
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(edit_dialog_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(edit_dialog_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (edit_dialog_slot_or_fallback) edit_dialog_slot_or_fallback.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1$1.name,
    type: "if",
    source: "(59:6) {#if editable && column.editable !== false && editing[index] === i}",
    ctx
  });
  return block;
} // (60:33)            


function fallback_block$1(ctx) {
  let editable_1;
  let updating_editing;
  let updating_item;
  let current;

  function editable_1_editing_binding(value) {
    /*editable_1_editing_binding*/
    ctx[11].call(null, value);
  }

  function editable_1_item_binding(value) {
    /*editable_1_item_binding*/
    ctx[12].call(null, value);
  }

  let editable_1_props = {
    class:
    /*editableClasses*/
    ctx[5],
    column:
    /*column*/
    ctx[18]
  };

  if (
  /*editing*/
  ctx[1] !== void 0) {
    editable_1_props.editing =
    /*editing*/
    ctx[1];
  }

  if (
  /*item*/
  ctx[0] !== void 0) {
    editable_1_props.item =
    /*item*/
    ctx[0];
  }

  editable_1 = new Editable({
    props: editable_1_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(editable_1, "editing", editable_1_editing_binding));
  binding_callbacks.push(() => bind(editable_1, "item", editable_1_item_binding));
  editable_1.$on("update",
  /*update_handler*/
  ctx[13]);
  const block = {
    c: function create() {
      create_component(editable_1.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(editable_1.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(editable_1, target, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      const editable_1_changes = {};
      if (dirty &
      /*editableClasses*/
      32) editable_1_changes.class =
      /*editableClasses*/
      ctx[5];
      if (dirty &
      /*columns*/
      4) editable_1_changes.column =
      /*column*/
      ctx[18];

      if (!updating_editing && dirty &
      /*editing*/
      2) {
        updating_editing = true;
        editable_1_changes.editing =
        /*editing*/
        ctx[1];
        add_flush_callback(() => updating_editing = false);
      }

      if (!updating_item && dirty &
      /*item*/
      1) {
        updating_item = true;
        editable_1_changes.item =
        /*item*/
        ctx[0];
        add_flush_callback(() => updating_item = false);
      }

      editable_1.$set(editable_1_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(editable_1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(editable_1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(editable_1, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block$1.name,
    type: "fallback",
    source: "(60:33)            ",
    ctx
  });
  return block;
} // (72:6) {:else}


function create_else_block(ctx) {
  let html_tag;
  let raw_value =
  /*item*/
  ctx[0][
  /*column*/
  ctx[18].field] + "";
  let html_anchor;
  const block = {
    c: function create() {
      html_anchor = empty();
      this.h();
    },
    l: function claim(nodes) {
      html_anchor = empty();
      this.h();
    },
    h: function hydrate() {
      html_tag = new HtmlTag(html_anchor);
    },
    m: function mount(target, anchor) {
      html_tag.m(raw_value, target, anchor);
      insert_dev(target, html_anchor, anchor);
    },
    p: function update(ctx, dirty) {
      if (dirty &
      /*item, columns*/
      5 && raw_value !== (raw_value =
      /*item*/
      ctx[0][
      /*column*/
      ctx[18].field] + "")) html_tag.p(raw_value);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(html_anchor);
      if (detaching) html_tag.d();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(72:6) {:else}",
    ctx
  });
  return block;
} // (70:6) {#if column.value}


function create_if_block$1(ctx) {
  let html_tag;
  let raw_value =
  /*column*/
  ctx[18].value(
  /*item*/
  ctx[0]) + "";
  let html_anchor;
  const block = {
    c: function create() {
      html_anchor = empty();
      this.h();
    },
    l: function claim(nodes) {
      html_anchor = empty();
      this.h();
    },
    h: function hydrate() {
      html_tag = new HtmlTag(html_anchor);
    },
    m: function mount(target, anchor) {
      html_tag.m(raw_value, target, anchor);
      insert_dev(target, html_anchor, anchor);
    },
    p: function update(ctx, dirty) {
      if (dirty &
      /*columns, item*/
      5 && raw_value !== (raw_value =
      /*column*/
      ctx[18].value(
      /*item*/
      ctx[0]) + "")) html_tag.p(raw_value);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(html_anchor);
      if (detaching) html_tag.d();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block$1.name,
    type: "if",
    source: "(70:6) {#if column.value}",
    ctx
  });
  return block;
} // (54:2) {#each columns as column, i}


function create_each_block(ctx) {
  let td;
  let t0;
  let t1;
  let td_class_value;
  let current;
  let if_block0 =
  /*editable*/
  ctx[3] &&
  /*column*/
  ctx[18].editable !== false &&
  /*editing*/
  ctx[1][
  /*index*/
  ctx[4]] ===
  /*i*/
  ctx[20] && create_if_block_1$1(ctx);

  function select_block_type(ctx, dirty) {
    if (
    /*column*/
    ctx[18].value) return create_if_block$1;
    return create_else_block;
  }

  let current_block_type = select_block_type(ctx);
  let if_block1 = current_block_type(ctx);
  const block = {
    c: function create() {
      td = element("td");
      if (if_block0) if_block0.c();
      t0 = space();
      if_block1.c();
      t1 = space();
      this.h();
    },
    l: function claim(nodes) {
      td = claim_element(nodes, "TD", {
        class: true
      });
      var td_nodes = children(td);
      if (if_block0) if_block0.l(td_nodes);
      t0 = claim_space(td_nodes);
      if_block1.l(td_nodes);
      t1 = claim_space(td_nodes);
      td_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(td, "class", td_class_value =
      /*columnClass*/
      ctx[7](
      /*column*/
      ctx[18]));
      toggle_class(td, "cursor-pointer",
      /*editable*/
      ctx[3] &&
      /*column*/
      ctx[18].editable !== false);
      add_location(td, file$2, 54, 4, 1355);
    },
    m: function mount(target, anchor) {
      insert_dev(target, td, anchor);
      if (if_block0) if_block0.m(td, null);
      append_dev(td, t0);
      if_block1.m(td, null);
      append_dev(td, t1);
      current = true;
    },
    p: function update(ctx, dirty) {
      if (
      /*editable*/
      ctx[3] &&
      /*column*/
      ctx[18].editable !== false &&
      /*editing*/
      ctx[1][
      /*index*/
      ctx[4]] ===
      /*i*/
      ctx[20]) {
        if (if_block0) {
          if_block0.p(ctx, dirty);

          if (dirty &
          /*editable, columns, editing, index*/
          30) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_1$1(ctx);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(td, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }

      if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
        if_block1.p(ctx, dirty);
      } else {
        if_block1.d(1);
        if_block1 = current_block_type(ctx);

        if (if_block1) {
          if_block1.c();
          if_block1.m(td, t1);
        }
      }

      if (!current || dirty &
      /*columns*/
      4 && td_class_value !== (td_class_value =
      /*columnClass*/
      ctx[7](
      /*column*/
      ctx[18]))) {
        attr_dev(td, "class", td_class_value);
      }

      if (dirty &
      /*columns, editable, columns*/
      12) {
        toggle_class(td, "cursor-pointer",
        /*editable*/
        ctx[3] &&
        /*column*/
        ctx[18].editable !== false);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block0);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block0);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(td);
      if (if_block0) if_block0.d();
      if_block1.d();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block.name,
    type: "each",
    source: "(54:2) {#each columns as column, i}",
    ctx
  });
  return block;
}

function create_fragment$2(ctx) {
  let tr;
  let current;
  let mounted;
  let dispose;
  let each_value =
  /*columns*/
  ctx[2];
  validate_each_argument(each_value);
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }

  const out = i => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });

  const block = {
    c: function create() {
      tr = element("tr");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      this.h();
    },
    l: function claim(nodes) {
      tr = claim_element(nodes, "TR", {
        class: true
      });
      var tr_nodes = children(tr);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(tr_nodes);
      }

      tr_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(tr, "class",
      /*c*/
      ctx[6]);
      toggle_class(tr, "selected",
      /*editing*/
      ctx[1][
      /*index*/
      ctx[4]]);
      add_location(tr, file$2, 45, 0, 1133);
    },
    m: function mount(target, anchor) {
      insert_dev(target, tr, anchor);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(tr, null);
      }

      current = true;

      if (!mounted) {
        dispose = listen_dev(tr, "click",
        /*click_handler*/
        ctx[14], false, false, false);
        mounted = true;
      }
    },
    p: function update(ctx, [dirty]) {
      if (dirty &
      /*columnClass, columns, editable, item, editableClasses, editing, $$scope, index*/
      703) {
        each_value =
        /*columns*/
        ctx[2];
        validate_each_argument(each_value);
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(tr, null);
          }
        }

        group_outros();

        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }

        check_outros();
      }

      if (!current || dirty &
      /*c*/
      64) {
        attr_dev(tr, "class",
        /*c*/
        ctx[6]);
      }

      if (dirty &
      /*c, editing, index*/
      82) {
        toggle_class(tr, "selected",
        /*editing*/
        ctx[1][
        /*index*/
        ctx[4]]);
      }
    },
    i: function intro(local) {
      if (current) return;

      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }

      current = true;
    },
    o: function outro(local) {
      each_blocks = each_blocks.filter(Boolean);

      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }

      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(tr);
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

const classesDefault$2 = "hover:bg-gray-50 dark-hover:bg-dark-400 border-gray-200 dark:border-gray-400 border-t border-b px-3";

function instance$2($$self, $$props, $$invalidate) {
  let {
    classes = classesDefault$2
  } = $$props;
  let {
    item = {}
  } = $$props;
  let {
    columns = []
  } = $$props;
  let {
    editing = false
  } = $$props;
  let {
    editable = false
  } = $$props;
  let {
    index = 0
  } = $$props;
  let {
    editableClasses = i => i
  } = $$props;
  const dispatch = createEventDispatcher();
  const cb = new ClassBuilder(classes, classesDefault$2);

  function columnClass(column) {
    const cb = new ClassBuilder("relative p-3 font-normal text-right");

    if (column.replace) {
      cb.replace(column.replace);
    }

    if (column.add || column.class) {
      cb.add(column.add || column.class);
    }

    if (column.remove) {
      cb.remove(column.remove);
    }

    return cb.get();
  }

  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Row", $$slots, ['edit-dialog']);

  function editable_1_editing_binding(value) {
    editing = value;
    $$invalidate(1, editing);
  }

  function editable_1_item_binding(value) {
    item = value;
    $$invalidate(0, item);
  }

  function update_handler(event) {
    bubble($$self, event);
  }

  const click_handler = e => {
    if (!editable) return;
    $$invalidate(1, editing = {
      [index]: (e.path.find(a => a.localName === "td") || {}).cellIndex
    });
  };

  $$self.$set = $$new_props => {
    $$invalidate(17, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("classes" in $$new_props) $$invalidate(8, classes = $$new_props.classes);
    if ("item" in $$new_props) $$invalidate(0, item = $$new_props.item);
    if ("columns" in $$new_props) $$invalidate(2, columns = $$new_props.columns);
    if ("editing" in $$new_props) $$invalidate(1, editing = $$new_props.editing);
    if ("editable" in $$new_props) $$invalidate(3, editable = $$new_props.editable);
    if ("index" in $$new_props) $$invalidate(4, index = $$new_props.index);
    if ("editableClasses" in $$new_props) $$invalidate(5, editableClasses = $$new_props.editableClasses);
    if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
  };

  $$self.$capture_state = () => ({
    ClassBuilder,
    createEventDispatcher,
    Editable,
    Spacer,
    Icon,
    classesDefault: classesDefault$2,
    classes,
    item,
    columns,
    editing,
    editable,
    index,
    editableClasses,
    dispatch,
    cb,
    columnClass,
    c
  });

  $$self.$inject_state = $$new_props => {
    $$invalidate(17, $$props = assign(assign({}, $$props), $$new_props));
    if ("classes" in $$props) $$invalidate(8, classes = $$new_props.classes);
    if ("item" in $$props) $$invalidate(0, item = $$new_props.item);
    if ("columns" in $$props) $$invalidate(2, columns = $$new_props.columns);
    if ("editing" in $$props) $$invalidate(1, editing = $$new_props.editing);
    if ("editable" in $$props) $$invalidate(3, editable = $$new_props.editable);
    if ("index" in $$props) $$invalidate(4, index = $$new_props.index);
    if ("editableClasses" in $$props) $$invalidate(5, editableClasses = $$new_props.editableClasses);
    if ("c" in $$props) $$invalidate(6, c = $$new_props.c);
  };

  let c;

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$self.$$.update = () => {
     $$invalidate(6, c = cb.flush().add(classes, true, classesDefault$2).add($$props.class).get());
  };

  $$props = exclude_internal_props($$props);
  return [item, editing, columns, editable, index, editableClasses, c, columnClass, classes, $$scope, $$slots, editable_1_editing_binding, editable_1_item_binding, update_handler, click_handler];
}

class Row extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$2, create_fragment$2, safe_not_equal, {
      classes: 8,
      item: 0,
      columns: 2,
      editing: 1,
      editable: 3,
      index: 4,
      editableClasses: 5
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Row",
      options,
      id: create_fragment$2.name
    });
  }

  get classes() {
    throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set classes(value) {
    throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get item() {
    throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set item(value) {
    throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get columns() {
    throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set columns(value) {
    throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get editing() {
    throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set editing(value) {
    throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get editable() {
    throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set editable(value) {
    throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get index() {
    throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set index(value) {
    throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get editableClasses() {
    throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set editableClasses(value) {
    throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

/* src/components/DataTable/Pagination.svelte generated by Svelte v3.24.0 */
const file$3 = "src/components/DataTable/Pagination.svelte";

function create_fragment$3(ctx) {
  let tfoot;
  let tr;
  let td;
  let div2;
  let spacer0;
  let t0;
  let div0;
  let t1;
  let t2;
  let select;
  let updating_value;
  let t3;
  let spacer1;
  let t4;
  let div1;
  let t5;
  let t6;
  let t7_value = (
  /*offset*/
  ctx[2] +
  /*perPage*/
  ctx[0] >
  /*total*/
  ctx[7] ?
  /*total*/
  ctx[7] :
  /*offset*/
  ctx[2] +
  /*perPage*/
  ctx[0]) + "";
  let t7;
  let t8;
  let t9;
  let t10;
  let button0;
  let t11;
  let button1;
  let current;
  spacer0 = new Spacer({
    $$inline: true
  });

  function select_value_binding(value) {
    /*select_value_binding*/
    ctx[12].call(null, value);
  }

  let select_props = {
    class: "w-16 h-8 mb-5",
    remove: "select",
    replace: {
      "pt-6": "pt-4"
    },
    inputWrapperClasses: func,
    appendClasses: func_1,
    noUnderline: true,
    dense: true,
    items:
    /*perPageOptions*/
    ctx[4]
  };

  if (
  /*perPage*/
  ctx[0] !== void 0) {
    select_props.value =
    /*perPage*/
    ctx[0];
  }

  select = new Select({
    props: select_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(select, "value", select_value_binding));
  spacer1 = new Spacer({
    $$inline: true
  });
  const button0_spread_levels = [{
    disabled:
    /*page*/
    ctx[1] - 1 < 1
  }, {
    icon: "keyboard_arrow_left"
  },
  /*paginatorProps*/
  ctx[8] ||
  /*paginatorPropsDefault*/
  ctx[10]];
  let button0_props = {};

  for (let i = 0; i < button0_spread_levels.length; i += 1) {
    button0_props = assign(button0_props, button0_spread_levels[i]);
  }

  button0 = new Button({
    props: button0_props,
    $$inline: true
  });
  button0.$on("click",
  /*click_handler*/
  ctx[13]);
  const button1_spread_levels = [{
    disabled:
    /*page*/
    ctx[1] ===
    /*pagesCount*/
    ctx[3]
  }, {
    icon: "keyboard_arrow_right"
  },
  /*paginatorProps*/
  ctx[8] ||
  /*paginatorPropsDefault*/
  ctx[10]];
  let button1_props = {};

  for (let i = 0; i < button1_spread_levels.length; i += 1) {
    button1_props = assign(button1_props, button1_spread_levels[i]);
  }

  button1 = new Button({
    props: button1_props,
    $$inline: true
  });
  button1.$on("click",
  /*click_handler_1*/
  ctx[14]);
  const block = {
    c: function create() {
      tfoot = element("tfoot");
      tr = element("tr");
      td = element("td");
      div2 = element("div");
      create_component(spacer0.$$.fragment);
      t0 = space();
      div0 = element("div");
      t1 = text("Rows per page:");
      t2 = space();
      create_component(select.$$.fragment);
      t3 = space();
      create_component(spacer1.$$.fragment);
      t4 = space();
      div1 = element("div");
      t5 = text(
      /*offset*/
      ctx[2]);
      t6 = text("-");
      t7 = text(t7_value);
      t8 = text(" of ");
      t9 = text(
      /*total*/
      ctx[7]);
      t10 = space();
      create_component(button0.$$.fragment);
      t11 = space();
      create_component(button1.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      tfoot = claim_element(nodes, "TFOOT", {});
      var tfoot_nodes = children(tfoot);
      tr = claim_element(tfoot_nodes, "TR", {});
      var tr_nodes = children(tr);
      td = claim_element(tr_nodes, "TD", {
        colspan: true,
        class: true
      });
      var td_nodes = children(td);
      div2 = claim_element(td_nodes, "DIV", {
        class: true
      });
      var div2_nodes = children(div2);
      claim_component(spacer0.$$.fragment, div2_nodes);
      t0 = claim_space(div2_nodes);
      div0 = claim_element(div2_nodes, "DIV", {
        class: true
      });
      var div0_nodes = children(div0);
      t1 = claim_text(div0_nodes, "Rows per page:");
      div0_nodes.forEach(detach_dev);
      t2 = claim_space(div2_nodes);
      claim_component(select.$$.fragment, div2_nodes);
      t3 = claim_space(div2_nodes);
      claim_component(spacer1.$$.fragment, div2_nodes);
      t4 = claim_space(div2_nodes);
      div1 = claim_element(div2_nodes, "DIV", {});
      var div1_nodes = children(div1);
      t5 = claim_text(div1_nodes,
      /*offset*/
      ctx[2]);
      t6 = claim_text(div1_nodes, "-");
      t7 = claim_text(div1_nodes, t7_value);
      t8 = claim_text(div1_nodes, " of ");
      t9 = claim_text(div1_nodes,
      /*total*/
      ctx[7]);
      div1_nodes.forEach(detach_dev);
      t10 = claim_space(div2_nodes);
      claim_component(button0.$$.fragment, div2_nodes);
      t11 = claim_space(div2_nodes);
      claim_component(button1.$$.fragment, div2_nodes);
      div2_nodes.forEach(detach_dev);
      td_nodes.forEach(detach_dev);
      tr_nodes.forEach(detach_dev);
      tfoot_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div0, "class", "mr-1 py-1");
      add_location(div0, file$3, 53, 8, 1310);
      add_location(div1, file$3, 68, 8, 1789);
      attr_dev(div2, "class",
      /*c*/
      ctx[9]);
      add_location(div2, file$3, 51, 6, 1267);
      attr_dev(td, "colspan", "100%");
      attr_dev(td, "class", "border-none");
      add_location(td, file$3, 50, 4, 1221);
      add_location(tr, file$3, 49, 2, 1212);
      add_location(tfoot, file$3, 48, 0, 1202);
    },
    m: function mount(target, anchor) {
      insert_dev(target, tfoot, anchor);
      append_dev(tfoot, tr);
      append_dev(tr, td);
      append_dev(td, div2);
      mount_component(spacer0, div2, null);
      append_dev(div2, t0);
      append_dev(div2, div0);
      append_dev(div0, t1);
      append_dev(div2, t2);
      mount_component(select, div2, null);
      append_dev(div2, t3);
      mount_component(spacer1, div2, null);
      append_dev(div2, t4);
      append_dev(div2, div1);
      append_dev(div1, t5);
      append_dev(div1, t6);
      append_dev(div1, t7);
      append_dev(div1, t8);
      append_dev(div1, t9);
      append_dev(div2, t10);
      mount_component(button0, div2, null);
      append_dev(div2, t11);
      mount_component(button1, div2, null);
      current = true;
    },
    p: function update(ctx, [dirty]) {
      const select_changes = {};
      if (dirty &
      /*perPageOptions*/
      16) select_changes.items =
      /*perPageOptions*/
      ctx[4];

      if (!updating_value && dirty &
      /*perPage*/
      1) {
        updating_value = true;
        select_changes.value =
        /*perPage*/
        ctx[0];
        add_flush_callback(() => updating_value = false);
      }

      select.$set(select_changes);
      if (!current || dirty &
      /*offset*/
      4) set_data_dev(t5,
      /*offset*/
      ctx[2]);
      if ((!current || dirty &
      /*offset, perPage, total*/
      133) && t7_value !== (t7_value = (
      /*offset*/
      ctx[2] +
      /*perPage*/
      ctx[0] >
      /*total*/
      ctx[7] ?
      /*total*/
      ctx[7] :
      /*offset*/
      ctx[2] +
      /*perPage*/
      ctx[0]) + "")) set_data_dev(t7, t7_value);
      if (!current || dirty &
      /*total*/
      128) set_data_dev(t9,
      /*total*/
      ctx[7]);
      const button0_changes = dirty &
      /*page, paginatorProps, paginatorPropsDefault*/
      1282 ? get_spread_update(button0_spread_levels, [dirty &
      /*page*/
      2 && {
        disabled:
        /*page*/
        ctx[1] - 1 < 1
      }, button0_spread_levels[1], dirty &
      /*paginatorProps, paginatorPropsDefault*/
      1280 && get_spread_object(
      /*paginatorProps*/
      ctx[8] ||
      /*paginatorPropsDefault*/
      ctx[10])]) : {};
      button0.$set(button0_changes);
      const button1_changes = dirty &
      /*page, pagesCount, paginatorProps, paginatorPropsDefault*/
      1290 ? get_spread_update(button1_spread_levels, [dirty &
      /*page, pagesCount*/
      10 && {
        disabled:
        /*page*/
        ctx[1] ===
        /*pagesCount*/
        ctx[3]
      }, button1_spread_levels[1], dirty &
      /*paginatorProps, paginatorPropsDefault*/
      1280 && get_spread_object(
      /*paginatorProps*/
      ctx[8] ||
      /*paginatorPropsDefault*/
      ctx[10])]) : {};
      button1.$set(button1_changes);

      if (!current || dirty &
      /*c*/
      512) {
        attr_dev(div2, "class",
        /*c*/
        ctx[9]);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(spacer0.$$.fragment, local);
      transition_in(select.$$.fragment, local);
      transition_in(spacer1.$$.fragment, local);
      transition_in(button0.$$.fragment, local);
      transition_in(button1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(spacer0.$$.fragment, local);
      transition_out(select.$$.fragment, local);
      transition_out(spacer1.$$.fragment, local);
      transition_out(button0.$$.fragment, local);
      transition_out(button1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(tfoot);
      destroy_component(spacer0);
      destroy_component(select);
      destroy_component(spacer1);
      destroy_component(button0);
      destroy_component(button1);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

const classesDefault$3 = "flex justify-between items-center text-gray-700 text-sm w-full h-16";

const func = c => c.replace("mt-2", "").replace("pb-6", "");

const func_1 = c => c.replace("pt-4", "pt-3").replace("pr-4", "pr-2");

function instance$3($$self, $$props, $$invalidate) {
  const paginatorPropsDefault = {
    color: "gray",
    text: true,
    flat: true,
    dark: true,
    remove: "px-4 px-3",
    iconClasses: c => c.replace("p-4", ""),
    disabledClasses: c => c.replace("text-white", "text-gray-200").replace("bg-gray-300", "bg-transparent").replace("text-gray-700", "")
  };
  let {
    classes = classesDefault$3
  } = $$props;
  let {
    perPage = 0
  } = $$props;
  let {
    page = 0
  } = $$props;
  let {
    offset = 0
  } = $$props;
  let {
    pagesCount = 0
  } = $$props;
  let {
    perPageOptions = 0
  } = $$props;
  let {
    scrollToTop = false
  } = $$props;
  let {
    table = null
  } = $$props;
  let {
    total = 0
  } = $$props;
  let {
    paginatorProps = false
  } = $$props;
  const dispatch = createEventDispatcher();
  const cb = new ClassBuilder(classes, classesDefault$3);
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Pagination", $$slots, []);

  function select_value_binding(value) {
    perPage = value;
    $$invalidate(0, perPage);
  }

  const click_handler = () => {
    $$invalidate(1, page -= 1);
    if (scrollToTop) table.scrollIntoView({
      behavior: "smooth"
    });
  };

  const click_handler_1 = () => {
    $$invalidate(1, page += 1);
    if (scrollToTop) table.scrollIntoView({
      behavior: "smooth"
    });
  };

  $$self.$set = $$new_props => {
    $$invalidate(17, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("classes" in $$new_props) $$invalidate(11, classes = $$new_props.classes);
    if ("perPage" in $$new_props) $$invalidate(0, perPage = $$new_props.perPage);
    if ("page" in $$new_props) $$invalidate(1, page = $$new_props.page);
    if ("offset" in $$new_props) $$invalidate(2, offset = $$new_props.offset);
    if ("pagesCount" in $$new_props) $$invalidate(3, pagesCount = $$new_props.pagesCount);
    if ("perPageOptions" in $$new_props) $$invalidate(4, perPageOptions = $$new_props.perPageOptions);
    if ("scrollToTop" in $$new_props) $$invalidate(5, scrollToTop = $$new_props.scrollToTop);
    if ("table" in $$new_props) $$invalidate(6, table = $$new_props.table);
    if ("total" in $$new_props) $$invalidate(7, total = $$new_props.total);
    if ("paginatorProps" in $$new_props) $$invalidate(8, paginatorProps = $$new_props.paginatorProps);
  };

  $$self.$capture_state = () => ({
    ClassBuilder,
    createEventDispatcher,
    Select,
    Button,
    Spacer,
    Icon,
    classesDefault: classesDefault$3,
    paginatorPropsDefault,
    classes,
    perPage,
    page,
    offset,
    pagesCount,
    perPageOptions,
    scrollToTop,
    table,
    total,
    paginatorProps,
    dispatch,
    cb,
    c
  });

  $$self.$inject_state = $$new_props => {
    $$invalidate(17, $$props = assign(assign({}, $$props), $$new_props));
    if ("classes" in $$props) $$invalidate(11, classes = $$new_props.classes);
    if ("perPage" in $$props) $$invalidate(0, perPage = $$new_props.perPage);
    if ("page" in $$props) $$invalidate(1, page = $$new_props.page);
    if ("offset" in $$props) $$invalidate(2, offset = $$new_props.offset);
    if ("pagesCount" in $$props) $$invalidate(3, pagesCount = $$new_props.pagesCount);
    if ("perPageOptions" in $$props) $$invalidate(4, perPageOptions = $$new_props.perPageOptions);
    if ("scrollToTop" in $$props) $$invalidate(5, scrollToTop = $$new_props.scrollToTop);
    if ("table" in $$props) $$invalidate(6, table = $$new_props.table);
    if ("total" in $$props) $$invalidate(7, total = $$new_props.total);
    if ("paginatorProps" in $$props) $$invalidate(8, paginatorProps = $$new_props.paginatorProps);
    if ("c" in $$props) $$invalidate(9, c = $$new_props.c);
  };

  let c;

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$self.$$.update = () => {
     $$invalidate(9, c = cb.flush().add(classes, true, classesDefault$3).add($$props.class).get());
  };

  $$props = exclude_internal_props($$props);
  return [perPage, page, offset, pagesCount, perPageOptions, scrollToTop, table, total, paginatorProps, c, paginatorPropsDefault, classes, select_value_binding, click_handler, click_handler_1];
}

class Pagination extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$3, create_fragment$3, safe_not_equal, {
      classes: 11,
      perPage: 0,
      page: 1,
      offset: 2,
      pagesCount: 3,
      perPageOptions: 4,
      scrollToTop: 5,
      table: 6,
      total: 7,
      paginatorProps: 8
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Pagination",
      options,
      id: create_fragment$3.name
    });
  }

  get classes() {
    throw new Error("<Pagination>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set classes(value) {
    throw new Error("<Pagination>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get perPage() {
    throw new Error("<Pagination>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set perPage(value) {
    throw new Error("<Pagination>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get page() {
    throw new Error("<Pagination>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set page(value) {
    throw new Error("<Pagination>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get offset() {
    throw new Error("<Pagination>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set offset(value) {
    throw new Error("<Pagination>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get pagesCount() {
    throw new Error("<Pagination>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set pagesCount(value) {
    throw new Error("<Pagination>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get perPageOptions() {
    throw new Error("<Pagination>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set perPageOptions(value) {
    throw new Error("<Pagination>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get scrollToTop() {
    throw new Error("<Pagination>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set scrollToTop(value) {
    throw new Error("<Pagination>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get table() {
    throw new Error("<Pagination>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set table(value) {
    throw new Error("<Pagination>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get total() {
    throw new Error("<Pagination>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set total(value) {
    throw new Error("<Pagination>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get paginatorProps() {
    throw new Error("<Pagination>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set paginatorProps(value) {
    throw new Error("<Pagination>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

function sort(data, col, asc) {
  if (!col) return data;
  if (col.sort) return col.sort(data);
  const sorted = data.sort((a, b) => {
    const valA = col.value ? col.value(a) : a[col.field];
    const valB = col.value ? col.value(b) : b[col.field];
    const first = asc ? valA : valB;
    const second = asc ? valB : valA;

    if (typeof valA === "number") {
      return first - second;
    }

    return ("" + first).localeCompare(second);
  });
  return sorted;
}

/* src/components/DataTable/DataTable.svelte generated by Svelte v3.24.0 */
const file$4 = "src/components/DataTable/DataTable.svelte";

const get_footer_slot_changes = dirty => ({});

const get_footer_slot_context = ctx => ({});

const get_pagination_slot_changes = dirty => ({});

const get_pagination_slot_context = ctx => ({});

const get_item_slot_changes = dirty => ({});

const get_item_slot_context = ctx => ({});

function get_each_context$1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[37] = list[i];
  child_ctx[39] = i;
  return child_ctx;
}

const get_header_slot_changes = dirty => ({});

const get_header_slot_context = ctx => ({});

function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[40] = list[i];
  child_ctx[42] = i;
  return child_ctx;
} // (67:26)          


function fallback_block_2(ctx) {
  let header;
  let updating_asc;
  let updating_sortBy;
  let t;
  let current;

  function header_asc_binding(value) {
    /*header_asc_binding*/
    ctx[27].call(null, value);
  }

  function header_sortBy_binding(value) {
    /*header_sortBy_binding*/
    ctx[28].call(null, value);
  }

  let header_props = {
    class:
    /*headerClasses*/
    ctx[12],
    column:
    /*column*/
    ctx[40],
    sortable:
    /*sortable*/
    ctx[9],
    editing:
    /*editing*/
    ctx[18]
  };

  if (
  /*asc*/
  ctx[2] !== void 0) {
    header_props.asc =
    /*asc*/
    ctx[2];
  }

  if (
  /*sortBy*/
  ctx[17] !== void 0) {
    header_props.sortBy =
    /*sortBy*/
    ctx[17];
  }

  header = new Header({
    props: header_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(header, "asc", header_asc_binding));
  binding_callbacks.push(() => bind(header, "sortBy", header_sortBy_binding));
  const block = {
    c: function create() {
      create_component(header.$$.fragment);
      t = space();
    },
    l: function claim(nodes) {
      claim_component(header.$$.fragment, nodes);
      t = claim_space(nodes);
    },
    m: function mount(target, anchor) {
      mount_component(header, target, anchor);
      insert_dev(target, t, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      const header_changes = {};
      if (dirty[0] &
      /*headerClasses*/
      4096) header_changes.class =
      /*headerClasses*/
      ctx[12];
      if (dirty[0] &
      /*columns*/
      16) header_changes.column =
      /*column*/
      ctx[40];
      if (dirty[0] &
      /*sortable*/
      512) header_changes.sortable =
      /*sortable*/
      ctx[9];
      if (dirty[0] &
      /*editing*/
      262144) header_changes.editing =
      /*editing*/
      ctx[18];

      if (!updating_asc && dirty[0] &
      /*asc*/
      4) {
        updating_asc = true;
        header_changes.asc =
        /*asc*/
        ctx[2];
        add_flush_callback(() => updating_asc = false);
      }

      if (!updating_sortBy && dirty[0] &
      /*sortBy*/
      131072) {
        updating_sortBy = true;
        header_changes.sortBy =
        /*sortBy*/
        ctx[17];
        add_flush_callback(() => updating_sortBy = false);
      }

      header.$set(header_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(header.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(header.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(header, detaching);
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block_2.name,
    type: "fallback",
    source: "(67:26)          ",
    ctx
  });
  return block;
} // (66:4) {#each columns as column, i}


function create_each_block_1(ctx) {
  let current;
  const header_slot_template =
  /*$$slots*/
  ctx[26].header;
  const header_slot = create_slot(header_slot_template, ctx,
  /*$$scope*/
  ctx[25], get_header_slot_context);
  const header_slot_or_fallback = header_slot || fallback_block_2(ctx);
  const block = {
    c: function create() {
      if (header_slot_or_fallback) header_slot_or_fallback.c();
    },
    l: function claim(nodes) {
      if (header_slot_or_fallback) header_slot_or_fallback.l(nodes);
    },
    m: function mount(target, anchor) {
      if (header_slot_or_fallback) {
        header_slot_or_fallback.m(target, anchor);
      }

      current = true;
    },
    p: function update(ctx, dirty) {
      if (header_slot) {
        if (header_slot.p && dirty[0] &
        /*$$scope*/
        33554432) {
          update_slot(header_slot, header_slot_template, ctx,
          /*$$scope*/
          ctx[25], dirty, get_header_slot_changes, get_header_slot_context);
        }
      } else {
        if (header_slot_or_fallback && header_slot_or_fallback.p && dirty[0] &
        /*headerClasses, columns, sortable, editing, asc, sortBy*/
        397844) {
          header_slot_or_fallback.p(ctx, dirty);
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(header_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(header_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (header_slot_or_fallback) header_slot_or_fallback.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block_1.name,
    type: "each",
    source: "(66:4) {#each columns as column, i}",
    ctx
  });
  return block;
} // (79:2) {#if loading && !hideProgress}


function create_if_block_1$2(ctx) {
  let div;
  let progresslinear;
  let div_transition;
  let current;
  progresslinear = new ProgressLinear({
    $$inline: true
  });
  const block = {
    c: function create() {
      div = element("div");
      create_component(progresslinear.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {
        class: true
      });
      var div_nodes = children(div);
      claim_component(progresslinear.$$.fragment, div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "absolute w-full");
      add_location(div, file$4, 79, 4, 2127);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      mount_component(progresslinear, div, null);
      current = true;
    },
    i: function intro(local) {
      if (current) return;
      transition_in(progresslinear.$$.fragment, local);
      add_render_callback(() => {
        if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
        div_transition.run(1);
      });
      current = true;
    },
    o: function outro(local) {
      transition_out(progresslinear.$$.fragment, local);
      if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
      div_transition.run(0);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div);
      destroy_component(progresslinear);
      if (detaching && div_transition) div_transition.end();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1$2.name,
    type: "if",
    source: "(79:2) {#if loading && !hideProgress}",
    ctx
  });
  return block;
} // (86:24)          


function fallback_block_1(ctx) {
  let row;
  let updating_editing;
  let t;
  let current;

  function row_editing_binding(value) {
    /*row_editing_binding*/
    ctx[29].call(null, value);
  }

  let row_props = {
    index:
    /*index*/
    ctx[39],
    item:
    /*item*/
    ctx[37],
    columns:
    /*columns*/
    ctx[4],
    editable:
    /*editable*/
    ctx[8],
    editableClasses:
    /*editableClasses*/
    ctx[14]
  };

  if (
  /*editing*/
  ctx[18] !== void 0) {
    row_props.editing =
    /*editing*/
    ctx[18];
  }

  row = new Row({
    props: row_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(row, "editing", row_editing_binding));
  row.$on("update",
  /*update_handler*/
  ctx[30]);
  const block = {
    c: function create() {
      create_component(row.$$.fragment);
      t = space();
    },
    l: function claim(nodes) {
      claim_component(row.$$.fragment, nodes);
      t = claim_space(nodes);
    },
    m: function mount(target, anchor) {
      mount_component(row, target, anchor);
      insert_dev(target, t, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      const row_changes = {};
      if (dirty[0] &
      /*sorted*/
      1048576) row_changes.item =
      /*item*/
      ctx[37];
      if (dirty[0] &
      /*columns*/
      16) row_changes.columns =
      /*columns*/
      ctx[4];
      if (dirty[0] &
      /*editable*/
      256) row_changes.editable =
      /*editable*/
      ctx[8];
      if (dirty[0] &
      /*editableClasses*/
      16384) row_changes.editableClasses =
      /*editableClasses*/
      ctx[14];

      if (!updating_editing && dirty[0] &
      /*editing*/
      262144) {
        updating_editing = true;
        row_changes.editing =
        /*editing*/
        ctx[18];
        add_flush_callback(() => updating_editing = false);
      }

      row.$set(row_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(row.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(row.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(row, detaching);
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block_1.name,
    type: "fallback",
    source: "(86:24)          ",
    ctx
  });
  return block;
} // (85:4) {#each sorted as item, index}


function create_each_block$1(ctx) {
  let current;
  const item_slot_template =
  /*$$slots*/
  ctx[26].item;
  const item_slot = create_slot(item_slot_template, ctx,
  /*$$scope*/
  ctx[25], get_item_slot_context);
  const item_slot_or_fallback = item_slot || fallback_block_1(ctx);
  const block = {
    c: function create() {
      if (item_slot_or_fallback) item_slot_or_fallback.c();
    },
    l: function claim(nodes) {
      if (item_slot_or_fallback) item_slot_or_fallback.l(nodes);
    },
    m: function mount(target, anchor) {
      if (item_slot_or_fallback) {
        item_slot_or_fallback.m(target, anchor);
      }

      current = true;
    },
    p: function update(ctx, dirty) {
      if (item_slot) {
        if (item_slot.p && dirty[0] &
        /*$$scope*/
        33554432) {
          update_slot(item_slot, item_slot_template, ctx,
          /*$$scope*/
          ctx[25], dirty, get_item_slot_changes, get_item_slot_context);
        }
      } else {
        if (item_slot_or_fallback && item_slot_or_fallback.p && dirty[0] &
        /*sorted, columns, editable, editableClasses, editing*/
        1327376) {
          item_slot_or_fallback.p(ctx, dirty);
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(item_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(item_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (item_slot_or_fallback) item_slot_or_fallback.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block$1.name,
    type: "each",
    source: "(85:4) {#each sorted as item, index}",
    ctx
  });
  return block;
} // (99:2) {#if pagination}


function create_if_block$2(ctx) {
  let current;
  const pagination_slot_template =
  /*$$slots*/
  ctx[26].pagination;
  const pagination_slot = create_slot(pagination_slot_template, ctx,
  /*$$scope*/
  ctx[25], get_pagination_slot_context);
  const pagination_slot_or_fallback = pagination_slot || fallback_block$2(ctx);
  const block = {
    c: function create() {
      if (pagination_slot_or_fallback) pagination_slot_or_fallback.c();
    },
    l: function claim(nodes) {
      if (pagination_slot_or_fallback) pagination_slot_or_fallback.l(nodes);
    },
    m: function mount(target, anchor) {
      if (pagination_slot_or_fallback) {
        pagination_slot_or_fallback.m(target, anchor);
      }

      current = true;
    },
    p: function update(ctx, dirty) {
      if (pagination_slot) {
        if (pagination_slot.p && dirty[0] &
        /*$$scope*/
        33554432) {
          update_slot(pagination_slot, pagination_slot_template, ctx,
          /*$$scope*/
          ctx[25], dirty, get_pagination_slot_changes, get_pagination_slot_context);
        }
      } else {
        if (pagination_slot_or_fallback && pagination_slot_or_fallback.p && dirty[0] &
        /*paginationClasses, perPageOptions, scrollToTop, paginatorProps, offset, pagesCount, table, data, page, perPage*/
        2730027) {
          pagination_slot_or_fallback.p(ctx, dirty);
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(pagination_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(pagination_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (pagination_slot_or_fallback) pagination_slot_or_fallback.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block$2.name,
    type: "if",
    source: "(99:2) {#if pagination}",
    ctx
  });
  return block;
} // (100:28)        


function fallback_block$2(ctx) {
  let pagination_1;
  let updating_page;
  let updating_perPage;
  let current;

  function pagination_1_page_binding(value) {
    /*pagination_1_page_binding*/
    ctx[31].call(null, value);
  }

  function pagination_1_perPage_binding(value) {
    /*pagination_1_perPage_binding*/
    ctx[32].call(null, value);
  }

  let pagination_1_props = {
    class:
    /*paginationClasses*/
    ctx[13],
    perPageOptions:
    /*perPageOptions*/
    ctx[5],
    scrollToTop:
    /*scrollToTop*/
    ctx[11],
    paginatorProps:
    /*paginatorProps*/
    ctx[15],
    offset:
    /*offset*/
    ctx[19],
    pagesCount:
    /*pagesCount*/
    ctx[21],
    table:
    /*table*/
    ctx[16],
    total:
    /*data*/
    ctx[3].length
  };

  if (
  /*page*/
  ctx[0] !== void 0) {
    pagination_1_props.page =
    /*page*/
    ctx[0];
  }

  if (
  /*perPage*/
  ctx[1] !== void 0) {
    pagination_1_props.perPage =
    /*perPage*/
    ctx[1];
  }

  pagination_1 = new Pagination({
    props: pagination_1_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(pagination_1, "page", pagination_1_page_binding));
  binding_callbacks.push(() => bind(pagination_1, "perPage", pagination_1_perPage_binding));
  const block = {
    c: function create() {
      create_component(pagination_1.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(pagination_1.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(pagination_1, target, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      const pagination_1_changes = {};
      if (dirty[0] &
      /*paginationClasses*/
      8192) pagination_1_changes.class =
      /*paginationClasses*/
      ctx[13];
      if (dirty[0] &
      /*perPageOptions*/
      32) pagination_1_changes.perPageOptions =
      /*perPageOptions*/
      ctx[5];
      if (dirty[0] &
      /*scrollToTop*/
      2048) pagination_1_changes.scrollToTop =
      /*scrollToTop*/
      ctx[11];
      if (dirty[0] &
      /*paginatorProps*/
      32768) pagination_1_changes.paginatorProps =
      /*paginatorProps*/
      ctx[15];
      if (dirty[0] &
      /*offset*/
      524288) pagination_1_changes.offset =
      /*offset*/
      ctx[19];
      if (dirty[0] &
      /*pagesCount*/
      2097152) pagination_1_changes.pagesCount =
      /*pagesCount*/
      ctx[21];
      if (dirty[0] &
      /*table*/
      65536) pagination_1_changes.table =
      /*table*/
      ctx[16];
      if (dirty[0] &
      /*data*/
      8) pagination_1_changes.total =
      /*data*/
      ctx[3].length;

      if (!updating_page && dirty[0] &
      /*page*/
      1) {
        updating_page = true;
        pagination_1_changes.page =
        /*page*/
        ctx[0];
        add_flush_callback(() => updating_page = false);
      }

      if (!updating_perPage && dirty[0] &
      /*perPage*/
      2) {
        updating_perPage = true;
        pagination_1_changes.perPage =
        /*perPage*/
        ctx[1];
        add_flush_callback(() => updating_perPage = false);
      }

      pagination_1.$set(pagination_1_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(pagination_1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(pagination_1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(pagination_1, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block$2.name,
    type: "fallback",
    source: "(100:28)        ",
    ctx
  });
  return block;
}

function create_fragment$4(ctx) {
  let table_1;
  let thead;
  let t0;
  let t1;
  let tbody;
  let t2;
  let t3;
  let current;
  let each_value_1 =
  /*columns*/
  ctx[4];
  validate_each_argument(each_value_1);
  let each_blocks_1 = [];

  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }

  const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
    each_blocks_1[i] = null;
  });

  let if_block0 =
  /*loading*/
  ctx[6] && !
  /*hideProgress*/
  ctx[7] && create_if_block_1$2(ctx);
  let each_value =
  /*sorted*/
  ctx[20];
  validate_each_argument(each_value);
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
  }

  const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });

  let if_block1 =
  /*pagination*/
  ctx[10] && create_if_block$2(ctx);
  const footer_slot_template =
  /*$$slots*/
  ctx[26].footer;
  const footer_slot = create_slot(footer_slot_template, ctx,
  /*$$scope*/
  ctx[25], get_footer_slot_context);
  const block = {
    c: function create() {
      table_1 = element("table");
      thead = element("thead");

      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }

      t0 = space();
      if (if_block0) if_block0.c();
      t1 = space();
      tbody = element("tbody");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      t2 = space();
      if (if_block1) if_block1.c();
      t3 = space();
      if (footer_slot) footer_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      table_1 = claim_element(nodes, "TABLE", {
        class: true
      });
      var table_1_nodes = children(table_1);
      thead = claim_element(table_1_nodes, "THEAD", {
        class: true
      });
      var thead_nodes = children(thead);

      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].l(thead_nodes);
      }

      thead_nodes.forEach(detach_dev);
      t0 = claim_space(table_1_nodes);
      if (if_block0) if_block0.l(table_1_nodes);
      t1 = claim_space(table_1_nodes);
      tbody = claim_element(table_1_nodes, "TBODY", {});
      var tbody_nodes = children(tbody);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(tbody_nodes);
      }

      tbody_nodes.forEach(detach_dev);
      t2 = claim_space(table_1_nodes);
      if (if_block1) if_block1.l(table_1_nodes);
      t3 = claim_space(table_1_nodes);
      if (footer_slot) footer_slot.l(table_1_nodes);
      table_1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(thead, "class", "items-center");
      add_location(thead, file$4, 64, 2, 1804);
      add_location(tbody, file$4, 83, 2, 2220);
      attr_dev(table_1, "class",
      /*c*/
      ctx[22]);
      add_location(table_1, file$4, 63, 0, 1766);
    },
    m: function mount(target, anchor) {
      insert_dev(target, table_1, anchor);
      append_dev(table_1, thead);

      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].m(thead, null);
      }

      append_dev(table_1, t0);
      if (if_block0) if_block0.m(table_1, null);
      append_dev(table_1, t1);
      append_dev(table_1, tbody);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(tbody, null);
      }

      append_dev(table_1, t2);
      if (if_block1) if_block1.m(table_1, null);
      append_dev(table_1, t3);

      if (footer_slot) {
        footer_slot.m(table_1, null);
      }
      /*table_1_binding*/


      ctx[33](table_1);
      current = true;
    },
    p: function update(ctx, dirty) {
      if (dirty[0] &
      /*headerClasses, columns, sortable, editing, asc, sortBy, $$scope*/
      33952276) {
        each_value_1 =
        /*columns*/
        ctx[4];
        validate_each_argument(each_value_1);
        let i;

        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx, each_value_1, i);

          if (each_blocks_1[i]) {
            each_blocks_1[i].p(child_ctx, dirty);
            transition_in(each_blocks_1[i], 1);
          } else {
            each_blocks_1[i] = create_each_block_1(child_ctx);
            each_blocks_1[i].c();
            transition_in(each_blocks_1[i], 1);
            each_blocks_1[i].m(thead, null);
          }
        }

        group_outros();

        for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
          out(i);
        }

        check_outros();
      }

      if (
      /*loading*/
      ctx[6] && !
      /*hideProgress*/
      ctx[7]) {
        if (if_block0) {
          if (dirty[0] &
          /*loading, hideProgress*/
          192) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_1$2(ctx);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(table_1, t1);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }

      if (dirty[0] &
      /*sorted, columns, editable, editableClasses, editing, $$scope*/
      34881808) {
        each_value =
        /*sorted*/
        ctx[20];
        validate_each_argument(each_value);
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$1(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block$1(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(tbody, null);
          }
        }

        group_outros();

        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out_1(i);
        }

        check_outros();
      }

      if (
      /*pagination*/
      ctx[10]) {
        if (if_block1) {
          if_block1.p(ctx, dirty);

          if (dirty[0] &
          /*pagination*/
          1024) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block$2(ctx);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(table_1, t3);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }

      if (footer_slot) {
        if (footer_slot.p && dirty[0] &
        /*$$scope*/
        33554432) {
          update_slot(footer_slot, footer_slot_template, ctx,
          /*$$scope*/
          ctx[25], dirty, get_footer_slot_changes, get_footer_slot_context);
        }
      }

      if (!current || dirty[0] &
      /*c*/
      4194304) {
        attr_dev(table_1, "class",
        /*c*/
        ctx[22]);
      }
    },
    i: function intro(local) {
      if (current) return;

      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks_1[i]);
      }

      transition_in(if_block0);

      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }

      transition_in(if_block1);
      transition_in(footer_slot, local);
      current = true;
    },
    o: function outro(local) {
      each_blocks_1 = each_blocks_1.filter(Boolean);

      for (let i = 0; i < each_blocks_1.length; i += 1) {
        transition_out(each_blocks_1[i]);
      }

      transition_out(if_block0);
      each_blocks = each_blocks.filter(Boolean);

      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }

      transition_out(if_block1);
      transition_out(footer_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(table_1);
      destroy_each(each_blocks_1, detaching);
      if (if_block0) if_block0.d();
      destroy_each(each_blocks, detaching);
      if (if_block1) if_block1.d();
      if (footer_slot) footer_slot.d(detaching);
      /*table_1_binding*/

      ctx[33](null);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$4.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

const classesDefault$4 = "elevation-3 relative text-sm overflow-x-auto dark:bg-dark-500";

function instance$4($$self, $$props, $$invalidate) {
  let {
    data = []
  } = $$props;
  let {
    columns = Object.keys(data[0] || {}).map(i => ({
      label: (i || "").replace("_", " "),
      field: i
    }))
  } = $$props;
  let {
    page = 1
  } = $$props;
  let {
    sort: sort$1 = sort
  } = $$props;
  let {
    perPage = 10
  } = $$props;
  let {
    perPageOptions = [10, 20, 50]
  } = $$props;
  let {
    asc = false
  } = $$props;
  let {
    loading = false
  } = $$props;
  let {
    hideProgress = false
  } = $$props;
  let {
    editable = true
  } = $$props;
  let {
    sortable = true
  } = $$props;
  let {
    pagination = true
  } = $$props;
  let {
    scrollToTop = false
  } = $$props;
  let {
    headerClasses = i => i
  } = $$props;
  let {
    paginationClasses = i => i
  } = $$props;
  let {
    editableClasses = i => i
  } = $$props;
  let {
    paginatorProps = null
  } = $$props;
  let {
    classes = classesDefault$4
  } = $$props;
  let table = "";
  let sortBy = null;
  const dispatch = createEventDispatcher();
  let editing = false;
  const cb = new ClassBuilder(classes, classesDefault$4);
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("DataTable", $$slots, ['header', 'item', 'pagination', 'footer']);

  function header_asc_binding(value) {
    asc = value;
    $$invalidate(2, asc);
  }

  function header_sortBy_binding(value) {
    sortBy = value;
    $$invalidate(17, sortBy);
  }

  function row_editing_binding(value) {
    editing = value;
    $$invalidate(18, editing);
  }

  function update_handler(event) {
    bubble($$self, event);
  }

  function pagination_1_page_binding(value) {
    page = value;
    $$invalidate(0, page);
  }

  function pagination_1_perPage_binding(value) {
    perPage = value;
    ($$invalidate(1, perPage), $$invalidate(10, pagination)), $$invalidate(3, data);
  }

  function table_1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      table = $$value;
      $$invalidate(16, table);
    });
  }

  $$self.$set = $$new_props => {
    $$invalidate(36, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("data" in $$new_props) $$invalidate(3, data = $$new_props.data);
    if ("columns" in $$new_props) $$invalidate(4, columns = $$new_props.columns);
    if ("page" in $$new_props) $$invalidate(0, page = $$new_props.page);
    if ("sort" in $$new_props) $$invalidate(23, sort$1 = $$new_props.sort);
    if ("perPage" in $$new_props) $$invalidate(1, perPage = $$new_props.perPage);
    if ("perPageOptions" in $$new_props) $$invalidate(5, perPageOptions = $$new_props.perPageOptions);
    if ("asc" in $$new_props) $$invalidate(2, asc = $$new_props.asc);
    if ("loading" in $$new_props) $$invalidate(6, loading = $$new_props.loading);
    if ("hideProgress" in $$new_props) $$invalidate(7, hideProgress = $$new_props.hideProgress);
    if ("editable" in $$new_props) $$invalidate(8, editable = $$new_props.editable);
    if ("sortable" in $$new_props) $$invalidate(9, sortable = $$new_props.sortable);
    if ("pagination" in $$new_props) $$invalidate(10, pagination = $$new_props.pagination);
    if ("scrollToTop" in $$new_props) $$invalidate(11, scrollToTop = $$new_props.scrollToTop);
    if ("headerClasses" in $$new_props) $$invalidate(12, headerClasses = $$new_props.headerClasses);
    if ("paginationClasses" in $$new_props) $$invalidate(13, paginationClasses = $$new_props.paginationClasses);
    if ("editableClasses" in $$new_props) $$invalidate(14, editableClasses = $$new_props.editableClasses);
    if ("paginatorProps" in $$new_props) $$invalidate(15, paginatorProps = $$new_props.paginatorProps);
    if ("classes" in $$new_props) $$invalidate(24, classes = $$new_props.classes);
    if ("$$scope" in $$new_props) $$invalidate(25, $$scope = $$new_props.$$scope);
  };

  $$self.$capture_state = () => ({
    createEventDispatcher,
    slide,
    ClassBuilder,
    Icon,
    Button,
    TextField,
    ProgressLinear,
    Header,
    Row,
    Pagination,
    defaultSort: sort,
    classesDefault: classesDefault$4,
    data,
    columns,
    page,
    sort: sort$1,
    perPage,
    perPageOptions,
    asc,
    loading,
    hideProgress,
    editable,
    sortable,
    pagination,
    scrollToTop,
    headerClasses,
    paginationClasses,
    editableClasses,
    paginatorProps,
    classes,
    table,
    sortBy,
    dispatch,
    editing,
    cb,
    offset,
    sorted,
    pagesCount,
    c
  });

  $$self.$inject_state = $$new_props => {
    $$invalidate(36, $$props = assign(assign({}, $$props), $$new_props));
    if ("data" in $$props) $$invalidate(3, data = $$new_props.data);
    if ("columns" in $$props) $$invalidate(4, columns = $$new_props.columns);
    if ("page" in $$props) $$invalidate(0, page = $$new_props.page);
    if ("sort" in $$props) $$invalidate(23, sort$1 = $$new_props.sort);
    if ("perPage" in $$props) $$invalidate(1, perPage = $$new_props.perPage);
    if ("perPageOptions" in $$props) $$invalidate(5, perPageOptions = $$new_props.perPageOptions);
    if ("asc" in $$props) $$invalidate(2, asc = $$new_props.asc);
    if ("loading" in $$props) $$invalidate(6, loading = $$new_props.loading);
    if ("hideProgress" in $$props) $$invalidate(7, hideProgress = $$new_props.hideProgress);
    if ("editable" in $$props) $$invalidate(8, editable = $$new_props.editable);
    if ("sortable" in $$props) $$invalidate(9, sortable = $$new_props.sortable);
    if ("pagination" in $$props) $$invalidate(10, pagination = $$new_props.pagination);
    if ("scrollToTop" in $$props) $$invalidate(11, scrollToTop = $$new_props.scrollToTop);
    if ("headerClasses" in $$props) $$invalidate(12, headerClasses = $$new_props.headerClasses);
    if ("paginationClasses" in $$props) $$invalidate(13, paginationClasses = $$new_props.paginationClasses);
    if ("editableClasses" in $$props) $$invalidate(14, editableClasses = $$new_props.editableClasses);
    if ("paginatorProps" in $$props) $$invalidate(15, paginatorProps = $$new_props.paginatorProps);
    if ("classes" in $$props) $$invalidate(24, classes = $$new_props.classes);
    if ("table" in $$props) $$invalidate(16, table = $$new_props.table);
    if ("sortBy" in $$props) $$invalidate(17, sortBy = $$new_props.sortBy);
    if ("editing" in $$props) $$invalidate(18, editing = $$new_props.editing);
    if ("offset" in $$props) $$invalidate(19, offset = $$new_props.offset);
    if ("sorted" in $$props) $$invalidate(20, sorted = $$new_props.sorted);
    if ("pagesCount" in $$props) $$invalidate(21, pagesCount = $$new_props.pagesCount);
    if ("c" in $$props) $$invalidate(22, c = $$new_props.c);
  };

  let offset;
  let sorted;
  let pagesCount;
  let c;

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] &
    /*pagination, perPage, data*/
    1034) {
       {
        $$invalidate(1, perPage = pagination ? perPage : data.length);
      }
    }

    if ($$self.$$.dirty[0] &
    /*page, perPage*/
    3) {
       $$invalidate(19, offset = page * perPage - perPage);
    }

    if ($$self.$$.dirty[0] &
    /*sort, data, sortBy, asc, offset, perPage*/
    9043982) {
       $$invalidate(20, sorted = sort$1(data, sortBy, asc).slice(offset, perPage + offset));
    }

    if ($$self.$$.dirty[0] &
    /*data, perPage*/
    10) {
       $$invalidate(21, pagesCount = Math.ceil(data.length / perPage));
    }

     $$invalidate(22, c = cb.flush().add(classes, true, classesDefault$4).add($$props.class).get());
  };

  $$props = exclude_internal_props($$props);
  return [page, perPage, asc, data, columns, perPageOptions, loading, hideProgress, editable, sortable, pagination, scrollToTop, headerClasses, paginationClasses, editableClasses, paginatorProps, table, sortBy, editing, offset, sorted, pagesCount, c, sort$1, classes, $$scope, $$slots, header_asc_binding, header_sortBy_binding, row_editing_binding, update_handler, pagination_1_page_binding, pagination_1_perPage_binding, table_1_binding];
}

class DataTable extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$4, create_fragment$4, safe_not_equal, {
      data: 3,
      columns: 4,
      page: 0,
      sort: 23,
      perPage: 1,
      perPageOptions: 5,
      asc: 2,
      loading: 6,
      hideProgress: 7,
      editable: 8,
      sortable: 9,
      pagination: 10,
      scrollToTop: 11,
      headerClasses: 12,
      paginationClasses: 13,
      editableClasses: 14,
      paginatorProps: 15,
      classes: 24
    }, [-1, -1]);
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "DataTable",
      options,
      id: create_fragment$4.name
    });
  }

  get data() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set data(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get columns() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set columns(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get page() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set page(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get sort() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set sort(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get perPage() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set perPage(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get perPageOptions() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set perPageOptions(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get asc() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set asc(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get loading() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set loading(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get hideProgress() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set hideProgress(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get editable() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set editable(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get sortable() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set sortable(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get pagination() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set pagination(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get scrollToTop() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set scrollToTop(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get headerClasses() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set headerClasses(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get paginationClasses() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set paginationClasses(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get editableClasses() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set editableClasses(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get paginatorProps() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set paginatorProps(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get classes() {
    throw new Error("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set classes(value) {
    throw new Error("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

export { DataTable as D };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

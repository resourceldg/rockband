import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, e as element, a as append_dev, v as validate_slots, H as text, g as claim_element, h as children, J as claim_text, j as detach_dev, l as attr_dev, m as add_location, n as insert_dev, N as set_data_dev, D as noop, f as space, k as claim_space, M as set_style, b as createEventDispatcher, p as listen_dev, r as run_all, O as set_input_value, P as bubble, Q as to_number, w as validate_each_argument, R as toggle_class, x as destroy_each, B as binding_callbacks, T as bind, F as globals, G as create_component, I as claim_component, K as mount_component, U as add_flush_callback, t as transition_in, q as transition_out, L as destroy_component } from './client.2f2d6bfb.js';

const audioData = [{
  name: "Siempre libre siempre vivo - Paso a paso",
  url: "PASO A PASO.mp3"
}, {
  name: "Siempre libre siempre vivo - Skarnaval",
  url: "SKARNAVAL.mp3"
}, {
  name: "Siempre libre siempre vivo - El lobo espera",
  url: "EL LOBO ESPERA.mp3"
}, {
  name: "Siempre libre siempre vivo - Canta pajarito",
  url: "CANTA PAJARITO.mp3"
}, {
  name: "Siempre libre siempre vivo - Ahora no nos frena el tiempo",
  url: "AHORA NO NOS FRENA EL TIEMPO.mp3"
}, {
  name: "Sentir musiquero - Derribar",
  url: "DERRIBAR.mp3"
}, {
  name: "Sentir musiquero - Salis",
  url: "SALIS.mp3"
}, {
  name: "Sentir musiquero - El tiempo en libertad",
  url: "EL TIEMPO EN LIBERTAD.mp3"
}, {
  name: "Sentir musiquero - Canción de la caldela",
  url: "CANCIÓN DE LA CALDELA.mp3"
}, {
  name: "Sentir musiquero - Grito, aire de chacarera",
  url: "GRITO AIRE DE CHACARERA.mp3"
}, {
  name: "Sentir musiquero - MonoSka",
  url: "MONOSKA.mp3"
}, {
  name: "Sentir musiquero - Esté quien esté",
  url: "ESTE QUIEN ESTE.mp3"
}];

/* src/components/Audio/TrackHeading.svelte generated by Svelte v3.24.0 */
const file = "src/components/Audio/TrackHeading.svelte";

function add_css() {
  var style = element("style");
  style.id = "svelte-w287fc-style";
  style.textContent = "div.svelte-w287fc{text-align:center}h3.svelte-w287fc{font-size:18px;margin:5px 0 10px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJhY2tIZWFkaW5nLnN2ZWx0ZSIsInNvdXJjZXMiOlsiVHJhY2tIZWFkaW5nLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIGV4cG9ydCBsZXQgdHJhY2tUaXRsZTtcbiAgPC9zY3JpcHQ+XG4gIFxuICA8ZGl2PlxuICAgICAgPGgzPnt0cmFja1RpdGxlfTwvaDM+XG4gIDwvZGl2PlxuICBcbiAgPHN0eWxlPlxuICAgICAgZGl2IHtcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGgzIHtcbiAgICAgICAgICBmb250LXNpemU6IDE4cHg7XG4gICAgICAgICAgbWFyZ2luOiA1cHggMCAxMHB4O1xuICAgICAgfVxuICA8L3N0eWxlPiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFTTSxHQUFHLGNBQUMsQ0FBQyxBQUNELFVBQVUsQ0FBRSxNQUFNLEFBQ3RCLENBQUMsQUFFRCxFQUFFLGNBQUMsQ0FBQyxBQUNBLFNBQVMsQ0FBRSxJQUFJLENBQ2YsTUFBTSxDQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxBQUN0QixDQUFDIn0= */";
  append_dev(document.head, style);
}

function create_fragment(ctx) {
  let div;
  let h3;
  let t;
  const block = {
    c: function create() {
      div = element("div");
      h3 = element("h3");
      t = text(
      /*trackTitle*/
      ctx[0]);
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {
        class: true
      });
      var div_nodes = children(div);
      h3 = claim_element(div_nodes, "H3", {
        class: true
      });
      var h3_nodes = children(h3);
      t = claim_text(h3_nodes,
      /*trackTitle*/
      ctx[0]);
      h3_nodes.forEach(detach_dev);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(h3, "class", "svelte-w287fc");
      add_location(h3, file, 5, 6, 65);
      attr_dev(div, "class", "svelte-w287fc");
      add_location(div, file, 4, 2, 53);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      append_dev(div, h3);
      append_dev(h3, t);
    },
    p: function update(ctx, [dirty]) {
      if (dirty &
      /*trackTitle*/
      1) set_data_dev(t,
      /*trackTitle*/
      ctx[0]);
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance($$self, $$props, $$invalidate) {
  let {
    trackTitle
  } = $$props;
  const writable_props = ["trackTitle"];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TrackHeading> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("TrackHeading", $$slots, []);

  $$self.$set = $$props => {
    if ("trackTitle" in $$props) $$invalidate(0, trackTitle = $$props.trackTitle);
  };

  $$self.$capture_state = () => ({
    trackTitle
  });

  $$self.$inject_state = $$props => {
    if ("trackTitle" in $$props) $$invalidate(0, trackTitle = $$props.trackTitle);
  };

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  return [trackTitle];
}

class TrackHeading extends SvelteComponentDev {
  constructor(options) {
    super(options);
    if (!document.getElementById("svelte-w287fc-style")) add_css();
    init(this, options, instance, create_fragment, safe_not_equal, {
      trackTitle: 0
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "TrackHeading",
      options,
      id: create_fragment.name
    });
    const {
      ctx
    } = this.$$;
    const props = options.props || {};

    if (
    /*trackTitle*/
    ctx[0] === undefined && !("trackTitle" in props)) {
      console.warn("<TrackHeading> was created without expected prop 'trackTitle'");
    }
  }

  get trackTitle() {
    throw new Error("<TrackHeading>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set trackTitle(value) {
    throw new Error("<TrackHeading>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

/* src/components/Audio/ProgressBarTime.svelte generated by Svelte v3.24.0 */
const file$1 = "src/components/Audio/ProgressBarTime.svelte";

function add_css$1() {
  var style = element("style");
  style.id = "svelte-1qp5q1c-style";
  style.textContent = "#time.svelte-1qp5q1c{width:100%;display:flex;justify-content:space-between}#progress-bar-cont.svelte-1qp5q1c{width:100%;height:10px;margin:.5rem 0 .5rem;display:flex;align-items:center;border:1px solid #888;cursor:pointer}#bar.svelte-1qp5q1c{width:0%;height:10px;background-color:goldenrod}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvZ3Jlc3NCYXJUaW1lLnN2ZWx0ZSIsInNvdXJjZXMiOlsiUHJvZ3Jlc3NCYXJUaW1lLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuXHRleHBvcnQgbGV0IGN1cnJUaW1lRGlzcGxheTtcblx0ZXhwb3J0IGxldCB0b3RhbFRpbWVEaXNwbGF5O1xuXHRleHBvcnQgbGV0IHByb2dyZXNzO1xuPC9zY3JpcHQ+XG5cblxuPGRpdiBpZD1cInRpbWVcIj5cblx0PHNwYW4gaWQ9XCJwcm9ncmVzcy10aW1lXCI+e2N1cnJUaW1lRGlzcGxheX08L3NwYW4+XG5cdDxzcGFuIGlkPVwidHJhY2stZHVyYXRpb25cIj57dG90YWxUaW1lRGlzcGxheX08L3NwYW4+XG48L2Rpdj5cblxuPGRpdiBpZD1cInByb2dyZXNzLWJhci1jb250XCI+XG5cdDxzcGFuIGlkPVwiYmFyXCIgc3R5bGU9XCJ3aWR0aDoge3Byb2dyZXNzfSVcIj48L3NwYW4+XG48L2Rpdj5cblxuXG48c3R5bGU+XG5cdCN0aW1lIHtcblx0XHR3aWR0aDogMTAwJTtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcblx0fVxuXG5cdCNwcm9ncmVzcy1iYXItY29udCB7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0aGVpZ2h0OiAxMHB4O1xuXHRcdG1hcmdpbjogLjVyZW0gMCAuNXJlbTtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0Ym9yZGVyOiAxcHggc29saWQgIzg4ODtcblx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdH1cblxuXHQjYmFyIHtcblx0XHR3aWR0aDogMCU7XG5cdFx0aGVpZ2h0OiAxMHB4O1xuXHRcdGJhY2tncm91bmQtY29sb3I6IGdvbGRlbnJvZDtcblx0fVxuPC9zdHlsZT4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0JDLEtBQUssZUFBQyxDQUFDLEFBQ04sS0FBSyxDQUFFLElBQUksQ0FDWCxPQUFPLENBQUUsSUFBSSxDQUNiLGVBQWUsQ0FBRSxhQUFhLEFBQy9CLENBQUMsQUFFRCxrQkFBa0IsZUFBQyxDQUFDLEFBQ25CLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixNQUFNLENBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQ3JCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsV0FBVyxDQUFFLE1BQU0sQ0FDbkIsTUFBTSxDQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUN0QixNQUFNLENBQUUsT0FBTyxBQUNoQixDQUFDLEFBRUQsSUFBSSxlQUFDLENBQUMsQUFDTCxLQUFLLENBQUUsRUFBRSxDQUNULE1BQU0sQ0FBRSxJQUFJLENBQ1osZ0JBQWdCLENBQUUsU0FBUyxBQUM1QixDQUFDIn0= */";
  append_dev(document.head, style);
}

function create_fragment$1(ctx) {
  let div0;
  let span0;
  let t0;
  let t1;
  let span1;
  let t2;
  let t3;
  let div1;
  let span2;
  const block = {
    c: function create() {
      div0 = element("div");
      span0 = element("span");
      t0 = text(
      /*currTimeDisplay*/
      ctx[0]);
      t1 = space();
      span1 = element("span");
      t2 = text(
      /*totalTimeDisplay*/
      ctx[1]);
      t3 = space();
      div1 = element("div");
      span2 = element("span");
      this.h();
    },
    l: function claim(nodes) {
      div0 = claim_element(nodes, "DIV", {
        id: true,
        class: true
      });
      var div0_nodes = children(div0);
      span0 = claim_element(div0_nodes, "SPAN", {
        id: true
      });
      var span0_nodes = children(span0);
      t0 = claim_text(span0_nodes,
      /*currTimeDisplay*/
      ctx[0]);
      span0_nodes.forEach(detach_dev);
      t1 = claim_space(div0_nodes);
      span1 = claim_element(div0_nodes, "SPAN", {
        id: true
      });
      var span1_nodes = children(span1);
      t2 = claim_text(span1_nodes,
      /*totalTimeDisplay*/
      ctx[1]);
      span1_nodes.forEach(detach_dev);
      div0_nodes.forEach(detach_dev);
      t3 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", {
        id: true,
        class: true
      });
      var div1_nodes = children(div1);
      span2 = claim_element(div1_nodes, "SPAN", {
        id: true,
        style: true,
        class: true
      });
      children(span2).forEach(detach_dev);
      div1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(span0, "id", "progress-time");
      add_location(span0, file$1, 8, 1, 119);
      attr_dev(span1, "id", "track-duration");
      add_location(span1, file$1, 9, 1, 170);
      attr_dev(div0, "id", "time");
      attr_dev(div0, "class", "svelte-1qp5q1c");
      add_location(div0, file$1, 7, 0, 102);
      attr_dev(span2, "id", "bar");
      set_style(span2, "width",
      /*progress*/
      ctx[2] + "%");
      attr_dev(span2, "class", "svelte-1qp5q1c");
      add_location(span2, file$1, 13, 1, 260);
      attr_dev(div1, "id", "progress-bar-cont");
      attr_dev(div1, "class", "svelte-1qp5q1c");
      add_location(div1, file$1, 12, 0, 230);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div0, anchor);
      append_dev(div0, span0);
      append_dev(span0, t0);
      append_dev(div0, t1);
      append_dev(div0, span1);
      append_dev(span1, t2);
      insert_dev(target, t3, anchor);
      insert_dev(target, div1, anchor);
      append_dev(div1, span2);
    },
    p: function update(ctx, [dirty]) {
      if (dirty &
      /*currTimeDisplay*/
      1) set_data_dev(t0,
      /*currTimeDisplay*/
      ctx[0]);
      if (dirty &
      /*totalTimeDisplay*/
      2) set_data_dev(t2,
      /*totalTimeDisplay*/
      ctx[1]);

      if (dirty &
      /*progress*/
      4) {
        set_style(span2, "width",
        /*progress*/
        ctx[2] + "%");
      }
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(div0);
      if (detaching) detach_dev(t3);
      if (detaching) detach_dev(div1);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$1.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance$1($$self, $$props, $$invalidate) {
  let {
    currTimeDisplay
  } = $$props;
  let {
    totalTimeDisplay
  } = $$props;
  let {
    progress
  } = $$props;
  const writable_props = ["currTimeDisplay", "totalTimeDisplay", "progress"];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ProgressBarTime> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("ProgressBarTime", $$slots, []);

  $$self.$set = $$props => {
    if ("currTimeDisplay" in $$props) $$invalidate(0, currTimeDisplay = $$props.currTimeDisplay);
    if ("totalTimeDisplay" in $$props) $$invalidate(1, totalTimeDisplay = $$props.totalTimeDisplay);
    if ("progress" in $$props) $$invalidate(2, progress = $$props.progress);
  };

  $$self.$capture_state = () => ({
    currTimeDisplay,
    totalTimeDisplay,
    progress
  });

  $$self.$inject_state = $$props => {
    if ("currTimeDisplay" in $$props) $$invalidate(0, currTimeDisplay = $$props.currTimeDisplay);
    if ("totalTimeDisplay" in $$props) $$invalidate(1, totalTimeDisplay = $$props.totalTimeDisplay);
    if ("progress" in $$props) $$invalidate(2, progress = $$props.progress);
  };

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  return [currTimeDisplay, totalTimeDisplay, progress];
}

class ProgressBarTime extends SvelteComponentDev {
  constructor(options) {
    super(options);
    if (!document.getElementById("svelte-1qp5q1c-style")) add_css$1();
    init(this, options, instance$1, create_fragment$1, safe_not_equal, {
      currTimeDisplay: 0,
      totalTimeDisplay: 1,
      progress: 2
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "ProgressBarTime",
      options,
      id: create_fragment$1.name
    });
    const {
      ctx
    } = this.$$;
    const props = options.props || {};

    if (
    /*currTimeDisplay*/
    ctx[0] === undefined && !("currTimeDisplay" in props)) {
      console.warn("<ProgressBarTime> was created without expected prop 'currTimeDisplay'");
    }

    if (
    /*totalTimeDisplay*/
    ctx[1] === undefined && !("totalTimeDisplay" in props)) {
      console.warn("<ProgressBarTime> was created without expected prop 'totalTimeDisplay'");
    }

    if (
    /*progress*/
    ctx[2] === undefined && !("progress" in props)) {
      console.warn("<ProgressBarTime> was created without expected prop 'progress'");
    }
  }

  get currTimeDisplay() {
    throw new Error("<ProgressBarTime>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set currTimeDisplay(value) {
    throw new Error("<ProgressBarTime>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get totalTimeDisplay() {
    throw new Error("<ProgressBarTime>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set totalTimeDisplay(value) {
    throw new Error("<ProgressBarTime>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get progress() {
    throw new Error("<ProgressBarTime>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set progress(value) {
    throw new Error("<ProgressBarTime>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

/* src/components/Audio/Controls.svelte generated by Svelte v3.24.0 */
const file$2 = "src/components/Audio/Controls.svelte";

function add_css$2() {
  var style = element("style");
  style.id = "svelte-170cp9s-style";
  style.textContent = "#btn-cont.svelte-170cp9s.svelte-170cp9s{display:flex;justify-content:space-between}button.svelte-170cp9s.svelte-170cp9s{width:37px;border:none;font-size:2.3rem;padding:0;cursor:pointer;margin:0;background-color:transparent}button.svelte-170cp9s.svelte-170cp9s:active{font-size:2.2rem;background-color:transparent}button.svelte-170cp9s img.svelte-170cp9s{width:100%}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJvbHMuc3ZlbHRlIiwic291cmNlcyI6WyJDb250cm9scy5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cblx0aW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcblx0XG5cdGxldCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXHRcblx0Y29uc3QgaWNvbnMgPSB7XG5cdFx0cGxheTogXCJwbGF5LnN2Z1wiLFxuXHRcdHBhdXNlOiBcInBhdXNlLnN2Z1wiLFxuXHRcdHJld2luZDogXCJpenF1aWVyZGEuc3ZnXCIsXG5cdFx0ZndkOiBcImRlcmVjaGEuc3ZnXCJcblx0fVxuXHRcbiAgZXhwb3J0IGxldCBpc1BsYXlpbmc7XG5cdFxuPC9zY3JpcHQ+XG5cblxuPGRpdiBpZD1cImJ0bi1jb250XCI+XG5cdDxidXR0b24gaWQ9XCJyZXdpbmRcIiBvbjpjbGljaz17KCkgPT4gZGlzcGF0Y2goJ3Jld2luZCcpfT5cblx0XHQ8aW1nIHNyYz17aWNvbnMucmV3aW5kfSBhbHQ9XCJyZXdpbmRcIi8+XG5cdDwvYnV0dG9uPlxuXHQ8YnV0dG9uIGlkPVwicGxheVwiIG9uOmNsaWNrPXsoKSA9PiBkaXNwYXRjaCgncGxheVBhdXNlJyl9PlxuXHRcdDxpbWcgc3JjPXtpc1BsYXlpbmcgPyBpY29ucy5wYXVzZSA6IGljb25zLnBsYXl9IFxuXHRcdFx0XHQgYWx0PVwicGxheVwiLz5cblx0PC9idXR0b24+XG5cdDxidXR0b24gaWQ9XCJmb3J3YXJkXCIgb246Y2xpY2s9eygpID0+IGRpc3BhdGNoKCdmb3J3YXJkJyl9PlxuXHRcdDxpbWcgc3JjPXtpY29ucy5md2R9IGFsdD1cImZvcndhcmRcIi8+XG5cdDwvYnV0dG9uPlxuPC9kaXY+XG5cbjxzdHlsZT5cblx0I2J0bi1jb250IHtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcblx0fVxuXHRcblx0YnV0dG9uIHtcblx0XHR3aWR0aDogMzdweDtcblx0XHRib3JkZXI6IG5vbmU7XG5cdFx0Zm9udC1zaXplOiAyLjNyZW07XG5cdFx0cGFkZGluZzogMDtcblx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0bWFyZ2luOiAwO1xuXHRcdGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuXHR9XG5cdFxuXHRidXR0b246YWN0aXZlIHtcblx0XHRmb250LXNpemU6IDIuMnJlbTtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcblx0fVxuXHRcblx0YnV0dG9uIGltZyB7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdH1cbjwvc3R5bGU+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStCQyxTQUFTLDhCQUFDLENBQUMsQUFDVixPQUFPLENBQUUsSUFBSSxDQUNiLGVBQWUsQ0FBRSxhQUFhLEFBQy9CLENBQUMsQUFFRCxNQUFNLDhCQUFDLENBQUMsQUFDUCxLQUFLLENBQUUsSUFBSSxDQUNYLE1BQU0sQ0FBRSxJQUFJLENBQ1osU0FBUyxDQUFFLE1BQU0sQ0FDakIsT0FBTyxDQUFFLENBQUMsQ0FDVixNQUFNLENBQUUsT0FBTyxDQUNmLE1BQU0sQ0FBRSxDQUFDLENBQ1QsZ0JBQWdCLENBQUUsV0FBVyxBQUM5QixDQUFDLEFBRUQsb0NBQU0sT0FBTyxBQUFDLENBQUMsQUFDZCxTQUFTLENBQUUsTUFBTSxDQUNqQixnQkFBZ0IsQ0FBRSxXQUFXLEFBQzlCLENBQUMsQUFFRCxxQkFBTSxDQUFDLEdBQUcsZUFBQyxDQUFDLEFBQ1gsS0FBSyxDQUFFLElBQUksQUFDWixDQUFDIn0= */";
  append_dev(document.head, style);
}

function create_fragment$2(ctx) {
  let div;
  let button0;
  let img0;
  let img0_src_value;
  let t0;
  let button1;
  let img1;
  let img1_src_value;
  let t1;
  let button2;
  let img2;
  let img2_src_value;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      div = element("div");
      button0 = element("button");
      img0 = element("img");
      t0 = space();
      button1 = element("button");
      img1 = element("img");
      t1 = space();
      button2 = element("button");
      img2 = element("img");
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {
        id: true,
        class: true
      });
      var div_nodes = children(div);
      button0 = claim_element(div_nodes, "BUTTON", {
        id: true,
        class: true
      });
      var button0_nodes = children(button0);
      img0 = claim_element(button0_nodes, "IMG", {
        src: true,
        alt: true,
        class: true
      });
      button0_nodes.forEach(detach_dev);
      t0 = claim_space(div_nodes);
      button1 = claim_element(div_nodes, "BUTTON", {
        id: true,
        class: true
      });
      var button1_nodes = children(button1);
      img1 = claim_element(button1_nodes, "IMG", {
        src: true,
        alt: true,
        class: true
      });
      button1_nodes.forEach(detach_dev);
      t1 = claim_space(div_nodes);
      button2 = claim_element(div_nodes, "BUTTON", {
        id: true,
        class: true
      });
      var button2_nodes = children(button2);
      img2 = claim_element(button2_nodes, "IMG", {
        src: true,
        alt: true,
        class: true
      });
      button2_nodes.forEach(detach_dev);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      if (img0.src !== (img0_src_value =
      /*icons*/
      ctx[2].rewind)) attr_dev(img0, "src", img0_src_value);
      attr_dev(img0, "alt", "rewind");
      attr_dev(img0, "class", "svelte-170cp9s");
      add_location(img0, file$2, 19, 2, 333);
      attr_dev(button0, "id", "rewind");
      attr_dev(button0, "class", "svelte-170cp9s");
      add_location(button0, file$2, 18, 1, 274);
      if (img1.src !== (img1_src_value =
      /*isPlaying*/
      ctx[0] ?
      /*icons*/
      ctx[2].pause :
      /*icons*/
      ctx[2].play)) attr_dev(img1, "src", img1_src_value);
      attr_dev(img1, "alt", "play");
      attr_dev(img1, "class", "svelte-170cp9s");
      add_location(img1, file$2, 22, 2, 444);
      attr_dev(button1, "id", "play");
      attr_dev(button1, "class", "svelte-170cp9s");
      add_location(button1, file$2, 21, 1, 384);
      if (img2.src !== (img2_src_value =
      /*icons*/
      ctx[2].fwd)) attr_dev(img2, "src", img2_src_value);
      attr_dev(img2, "alt", "forward");
      attr_dev(img2, "class", "svelte-170cp9s");
      add_location(img2, file$2, 26, 2, 584);
      attr_dev(button2, "id", "forward");
      attr_dev(button2, "class", "svelte-170cp9s");
      add_location(button2, file$2, 25, 1, 523);
      attr_dev(div, "id", "btn-cont");
      attr_dev(div, "class", "svelte-170cp9s");
      add_location(div, file$2, 17, 0, 253);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      append_dev(div, button0);
      append_dev(button0, img0);
      append_dev(div, t0);
      append_dev(div, button1);
      append_dev(button1, img1);
      append_dev(div, t1);
      append_dev(div, button2);
      append_dev(button2, img2);

      if (!mounted) {
        dispose = [listen_dev(button0, "click",
        /*click_handler*/
        ctx[3], false, false, false), listen_dev(button1, "click",
        /*click_handler_1*/
        ctx[4], false, false, false), listen_dev(button2, "click",
        /*click_handler_2*/
        ctx[5], false, false, false)];
        mounted = true;
      }
    },
    p: function update(ctx, [dirty]) {
      if (dirty &
      /*isPlaying*/
      1 && img1.src !== (img1_src_value =
      /*isPlaying*/
      ctx[0] ?
      /*icons*/
      ctx[2].pause :
      /*icons*/
      ctx[2].play)) {
        attr_dev(img1, "src", img1_src_value);
      }
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(div);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance$2($$self, $$props, $$invalidate) {
  let dispatch = createEventDispatcher();
  const icons = {
    play: "play.svg",
    pause: "pause.svg",
    rewind: "izquierda.svg",
    fwd: "derecha.svg"
  };
  let {
    isPlaying
  } = $$props;
  const writable_props = ["isPlaying"];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Controls> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Controls", $$slots, []);

  const click_handler = () => dispatch("rewind");

  const click_handler_1 = () => dispatch("playPause");

  const click_handler_2 = () => dispatch("forward");

  $$self.$set = $$props => {
    if ("isPlaying" in $$props) $$invalidate(0, isPlaying = $$props.isPlaying);
  };

  $$self.$capture_state = () => ({
    createEventDispatcher,
    dispatch,
    icons,
    isPlaying
  });

  $$self.$inject_state = $$props => {
    if ("dispatch" in $$props) $$invalidate(1, dispatch = $$props.dispatch);
    if ("isPlaying" in $$props) $$invalidate(0, isPlaying = $$props.isPlaying);
  };

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  return [isPlaying, dispatch, icons, click_handler, click_handler_1, click_handler_2];
}

class Controls extends SvelteComponentDev {
  constructor(options) {
    super(options);
    if (!document.getElementById("svelte-170cp9s-style")) add_css$2();
    init(this, options, instance$2, create_fragment$2, safe_not_equal, {
      isPlaying: 0
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Controls",
      options,
      id: create_fragment$2.name
    });
    const {
      ctx
    } = this.$$;
    const props = options.props || {};

    if (
    /*isPlaying*/
    ctx[0] === undefined && !("isPlaying" in props)) {
      console.warn("<Controls> was created without expected prop 'isPlaying'");
    }
  }

  get isPlaying() {
    throw new Error("<Controls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set isPlaying(value) {
    throw new Error("<Controls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

/* src/components/Audio/VolumeSlider.svelte generated by Svelte v3.24.0 */
const file$3 = "src/components/Audio/VolumeSlider.svelte";

function add_css$3() {
  var style = element("style");
  style.id = "svelte-11yhj9l-style";
  style.textContent = ".slidecontainer.svelte-11yhj9l.svelte-11yhj9l{width:100%;margin-top:30px;display:flex;justify-content:center;align-items:center}.slidecontainer.svelte-11yhj9l label.svelte-11yhj9l{width:20px;text-align:center\n\t}.slider.svelte-11yhj9l.svelte-11yhj9l{-webkit-appearance:none;appearance:none;width:200px;height:3px;margin:0 10px;padding:0;background:#d3d3d3;outline:none;opacity:0.7;-webkit-transition:.2s;transition:opacity .2s}.slider.svelte-11yhj9l.svelte-11yhj9l:hover{opacity:1}.slider.svelte-11yhj9l.svelte-11yhj9l::-webkit-slider-thumb{-webkit-appearance:none;appearance:none;width:15px;height:15px;border-radius:50%;background:#888;cursor:pointer;transition:background .2s}.slider.svelte-11yhj9l.svelte-11yhj9l::-moz-range-thumb{width:15px;height:15px;background:#4CAF50;cursor:pointer}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVm9sdW1lU2xpZGVyLnN2ZWx0ZSIsInNvdXJjZXMiOlsiVm9sdW1lU2xpZGVyLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBleHBvcnQgbGV0IHZvbDtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwic2xpZGVjb250YWluZXJcIj5cblx0PGxhYmVsIGZvcj1cInZvbHVtZS1zbGlkZXJcIj4wPC9sYWJlbD5cblxuXHQ8aW5wdXQgaWQ9XCJteVJhbmdlXCIgXG5cdFx0XHRcdCBjbGFzcz1cInNsaWRlclwiXG5cdFx0XHRcdCB0eXBlPVwicmFuZ2VcIiBcblx0XHRcdFx0IG1pbj1cIjBcIiBcblx0XHRcdFx0IG1heD1cIjEwMFwiIFxuXHRcdFx0XHQgc3RlcD1cIjFcIiBcblx0XHRcdFx0IG5hbWU9XCJ2b2x1bWVcIlxuXHRcdFx0XHQgYmluZDp2YWx1ZT17dm9sfVxuXHRcdFx0XHQgb246aW5wdXRcblx0XHRcdFx0ID5cblxuXHQ8bGFiZWwgZm9yPVwidm9sdW1lLXNsaWRlclwiPnt2b2x9PC9sYWJlbD5cbjwvZGl2PlxuXG48c3R5bGU+XG5cdC5zbGlkZWNvbnRhaW5lciB7XG5cdFx0d2lkdGg6IDEwMCU7IC8qIFdpZHRoIG9mIHRoZSBvdXRzaWRlIGNvbnRhaW5lciAqL1xuXHRcdG1hcmdpbi10b3A6IDMwcHg7XG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHR9XG5cdFxuXHQuc2xpZGVjb250YWluZXIgbGFiZWwge1xuXHRcdHdpZHRoOiAyMHB4O1xuXHRcdHRleHQtYWxpZ246IGNlbnRlclxuXHR9XG5cblx0LyogVGhlIHNsaWRlciBpdHNlbGYgKi9cblx0LnNsaWRlciB7XG5cdFx0LXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyAgLyogT3ZlcnJpZGUgZGVmYXVsdCBDU1Mgc3R5bGVzICovXG5cdFx0YXBwZWFyYW5jZTogbm9uZTtcblx0XHR3aWR0aDogMjAwcHg7IC8qIEZ1bGwtd2lkdGggKi9cblx0XHRoZWlnaHQ6IDNweDsgLyogU3BlY2lmaWVkIGhlaWdodCAqL1xuXHRcdG1hcmdpbjogMCAxMHB4O1xuXHRcdHBhZGRpbmc6IDA7XG5cdFx0YmFja2dyb3VuZDogI2QzZDNkMzsgLyogR3JleSBiYWNrZ3JvdW5kICovXG5cdFx0b3V0bGluZTogbm9uZTsgLyogUmVtb3ZlIG91dGxpbmUgKi9cblx0XHRvcGFjaXR5OiAwLjc7IC8qIFNldCB0cmFuc3BhcmVuY3kgKGZvciBtb3VzZS1vdmVyIGVmZmVjdHMgb24gaG92ZXIpICovXG5cdFx0LXdlYmtpdC10cmFuc2l0aW9uOiAuMnM7IC8qIDAuMiBzZWNvbmRzIHRyYW5zaXRpb24gb24gaG92ZXIgKi9cblx0XHR0cmFuc2l0aW9uOiBvcGFjaXR5IC4ycztcblx0fVxuXG5cdC8qIE1vdXNlLW92ZXIgZWZmZWN0cyAqL1xuXHQuc2xpZGVyOmhvdmVyIHtcblx0XHRvcGFjaXR5OiAxOyAvKiBGdWxseSBzaG93biBvbiBtb3VzZS1vdmVyICovXG5cdH1cblxuXHQvKiBUaGUgdGh1bWIgc2xpZGVyIGhhbmRsZSAqL1xuXHQuc2xpZGVyOjotd2Via2l0LXNsaWRlci10aHVtYiB7XG5cdFx0LXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyAvKiBPdmVycmlkZSBkZWZhdWx0IGxvb2sgKi9cblx0XHRhcHBlYXJhbmNlOiBub25lO1xuXHRcdHdpZHRoOiAxNXB4OyAvKiBTZXQgYSBzcGVjaWZpYyBzbGlkZXIgaGFuZGxlIHdpZHRoICovXG5cdFx0aGVpZ2h0OiAxNXB4OyAvKiBTbGlkZXIgaGFuZGxlIGhlaWdodCAqL1xuXHRcdGJvcmRlci1yYWRpdXM6IDUwJTtcblx0XHRiYWNrZ3JvdW5kOiAjODg4OyAvKiBHcmVlbiBiYWNrZ3JvdW5kICovXG5cdFx0Y3Vyc29yOiBwb2ludGVyOyAvKiBDdXJzb3Igb24gaG92ZXIgKi9cblx0XHR0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIC4ycztcblx0fVxuXG5cdC5zbGlkZXI6Oi1tb3otcmFuZ2UtdGh1bWIge1xuXHRcdHdpZHRoOiAxNXB4OyAvKiBTZXQgYSBzcGVjaWZpYyBzbGlkZXIgaGFuZGxlIHdpZHRoICovXG5cdFx0aGVpZ2h0OiAxNXB4OyAvKiBTbGlkZXIgaGFuZGxlIGhlaWdodCAqL1xuXHRcdGJhY2tncm91bmQ6ICM0Q0FGNTA7IC8qIEdyZWVuIGJhY2tncm91bmQgKi9cblx0XHRjdXJzb3I6IHBvaW50ZXI7IC8qIEN1cnNvciBvbiBob3ZlciAqL1xuXHR9XG48L3N0eWxlPiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQkMsZUFBZSw4QkFBQyxDQUFDLEFBQ2hCLEtBQUssQ0FBRSxJQUFJLENBQ1gsVUFBVSxDQUFFLElBQUksQ0FDaEIsT0FBTyxDQUFFLElBQUksQ0FDYixlQUFlLENBQUUsTUFBTSxDQUN2QixXQUFXLENBQUUsTUFBTSxBQUNwQixDQUFDLEFBRUQsOEJBQWUsQ0FBQyxLQUFLLGVBQUMsQ0FBQyxBQUN0QixLQUFLLENBQUUsSUFBSSxDQUNYLFVBQVUsQ0FBRSxNQUFNO0NBQ25CLENBQUMsQUFHRCxPQUFPLDhCQUFDLENBQUMsQUFDUixrQkFBa0IsQ0FBRSxJQUFJLENBQ3hCLFVBQVUsQ0FBRSxJQUFJLENBQ2hCLEtBQUssQ0FBRSxLQUFLLENBQ1osTUFBTSxDQUFFLEdBQUcsQ0FDWCxNQUFNLENBQUUsQ0FBQyxDQUFDLElBQUksQ0FDZCxPQUFPLENBQUUsQ0FBQyxDQUNWLFVBQVUsQ0FBRSxPQUFPLENBQ25CLE9BQU8sQ0FBRSxJQUFJLENBQ2IsT0FBTyxDQUFFLEdBQUcsQ0FDWixrQkFBa0IsQ0FBRSxHQUFHLENBQ3ZCLFVBQVUsQ0FBRSxPQUFPLENBQUMsR0FBRyxBQUN4QixDQUFDLEFBR0QscUNBQU8sTUFBTSxBQUFDLENBQUMsQUFDZCxPQUFPLENBQUUsQ0FBQyxBQUNYLENBQUMsQUFHRCxxQ0FBTyxzQkFBc0IsQUFBQyxDQUFDLEFBQzlCLGtCQUFrQixDQUFFLElBQUksQ0FDeEIsVUFBVSxDQUFFLElBQUksQ0FDaEIsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxDQUNaLGFBQWEsQ0FBRSxHQUFHLENBQ2xCLFVBQVUsQ0FBRSxJQUFJLENBQ2hCLE1BQU0sQ0FBRSxPQUFPLENBQ2YsVUFBVSxDQUFFLFVBQVUsQ0FBQyxHQUFHLEFBQzNCLENBQUMsQUFFRCxxQ0FBTyxrQkFBa0IsQUFBQyxDQUFDLEFBQzFCLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixVQUFVLENBQUUsT0FBTyxDQUNuQixNQUFNLENBQUUsT0FBTyxBQUNoQixDQUFDIn0= */";
  append_dev(document.head, style);
}

function create_fragment$3(ctx) {
  let div;
  let label0;
  let t0;
  let t1;
  let input;
  let t2;
  let label1;
  let t3;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      div = element("div");
      label0 = element("label");
      t0 = text("0");
      t1 = space();
      input = element("input");
      t2 = space();
      label1 = element("label");
      t3 = text(
      /*vol*/
      ctx[0]);
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {
        class: true
      });
      var div_nodes = children(div);
      label0 = claim_element(div_nodes, "LABEL", {
        for: true,
        class: true
      });
      var label0_nodes = children(label0);
      t0 = claim_text(label0_nodes, "0");
      label0_nodes.forEach(detach_dev);
      t1 = claim_space(div_nodes);
      input = claim_element(div_nodes, "INPUT", {
        id: true,
        class: true,
        type: true,
        min: true,
        max: true,
        step: true,
        name: true
      });
      t2 = claim_space(div_nodes);
      label1 = claim_element(div_nodes, "LABEL", {
        for: true,
        class: true
      });
      var label1_nodes = children(label1);
      t3 = claim_text(label1_nodes,
      /*vol*/
      ctx[0]);
      label1_nodes.forEach(detach_dev);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(label0, "for", "volume-slider");
      attr_dev(label0, "class", "svelte-11yhj9l");
      add_location(label0, file$3, 5, 1, 68);
      attr_dev(input, "id", "myRange");
      attr_dev(input, "class", "slider svelte-11yhj9l");
      attr_dev(input, "type", "range");
      attr_dev(input, "min", "0");
      attr_dev(input, "max", "100");
      attr_dev(input, "step", "1");
      attr_dev(input, "name", "volume");
      add_location(input, file$3, 7, 1, 107);
      attr_dev(label1, "for", "volume-slider");
      attr_dev(label1, "class", "svelte-11yhj9l");
      add_location(label1, file$3, 18, 1, 276);
      attr_dev(div, "class", "slidecontainer svelte-11yhj9l");
      add_location(div, file$3, 4, 0, 38);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      append_dev(div, label0);
      append_dev(label0, t0);
      append_dev(div, t1);
      append_dev(div, input);
      set_input_value(input,
      /*vol*/
      ctx[0]);
      append_dev(div, t2);
      append_dev(div, label1);
      append_dev(label1, t3);

      if (!mounted) {
        dispose = [listen_dev(input, "change",
        /*input_change_input_handler*/
        ctx[2]), listen_dev(input, "input",
        /*input_change_input_handler*/
        ctx[2]), listen_dev(input, "input",
        /*input_handler*/
        ctx[1], false, false, false)];
        mounted = true;
      }
    },
    p: function update(ctx, [dirty]) {
      if (dirty &
      /*vol*/
      1) {
        set_input_value(input,
        /*vol*/
        ctx[0]);
      }

      if (dirty &
      /*vol*/
      1) set_data_dev(t3,
      /*vol*/
      ctx[0]);
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(div);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance$3($$self, $$props, $$invalidate) {
  let {
    vol
  } = $$props;
  const writable_props = ["vol"];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<VolumeSlider> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("VolumeSlider", $$slots, []);

  function input_handler(event) {
    bubble($$self, event);
  }

  function input_change_input_handler() {
    vol = to_number(this.value);
    $$invalidate(0, vol);
  }

  $$self.$set = $$props => {
    if ("vol" in $$props) $$invalidate(0, vol = $$props.vol);
  };

  $$self.$capture_state = () => ({
    vol
  });

  $$self.$inject_state = $$props => {
    if ("vol" in $$props) $$invalidate(0, vol = $$props.vol);
  };

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  return [vol, input_handler, input_change_input_handler];
}

class VolumeSlider extends SvelteComponentDev {
  constructor(options) {
    super(options);
    if (!document.getElementById("svelte-11yhj9l-style")) add_css$3();
    init(this, options, instance$3, create_fragment$3, safe_not_equal, {
      vol: 0
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "VolumeSlider",
      options,
      id: create_fragment$3.name
    });
    const {
      ctx
    } = this.$$;
    const props = options.props || {};

    if (
    /*vol*/
    ctx[0] === undefined && !("vol" in props)) {
      console.warn("<VolumeSlider> was created without expected prop 'vol'");
    }
  }

  get vol() {
    throw new Error("<VolumeSlider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set vol(value) {
    throw new Error("<VolumeSlider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

/* src/components/Audio/PlayList.svelte generated by Svelte v3.24.0 */
const file$4 = "src/components/Audio/PlayList.svelte";

function add_css$4() {
  var style = element("style");
  style.id = "svelte-1wrg3xn-style";
  style.textContent = "section#playlist-cont.svelte-1wrg3xn{width:298px;box-shadow:0 0 5px #222;border-radius:0 0 5px 5px;background:#333}button.accordion.svelte-1wrg3xn{background:#222;color:#bbb;margin:0;padding:5px 15px;width:100%;border:none;outline:none;cursor:pointer;transition:0.4s}button.active.svelte-1wrg3xn{background-color:#888;color:black}ul.svelte-1wrg3xn{list-style-type:none;background:#222;color:#ddd;margin:0;padding:0;border-radius:0 0 5px 5px;height:0;overflow:auto;transition:height .3s}li.svelte-1wrg3xn{line-height:150%;padding:5px 5px 5px 20px;border-bottom:1px solid #ddd;cursor:pointer}li.svelte-1wrg3xn:active,li.svelte-1wrg3xn:hover{background-color:#444}.show-list.svelte-1wrg3xn{height:150px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGxheUxpc3Quc3ZlbHRlIiwic291cmNlcyI6WyJQbGF5TGlzdC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cblx0aW1wb3J0IHsgYXVkaW9EYXRhIH0gZnJvbSAnLi9hdWRpb0RhdGEuanMnO1xuXHRcblx0bGV0IGxpc3RJc1Nob3dpbmcgPSBmYWxzZTtcblx0XG5cdGNvbnN0IHNob3dQbGF5TGlzdCA9ICgpID0+IGxpc3RJc1Nob3dpbmcgPSAhbGlzdElzU2hvd2luZ1xuPC9zY3JpcHQ+XG5cblxuPHNlY3Rpb24gY2xhc3M9IFwibS0xMFwiIGlkPVwicGxheWxpc3QtY29udFwiPlxuXHQ8YnV0dG9uIGNsYXNzPVwiYWNjb3JkaW9uXCJcblx0XHRcdFx0XHRjbGFzczphY3RpdmU9e2xpc3RJc1Nob3dpbmd9XG5cdFx0XHRcdFx0b246Y2xpY2s9e3Nob3dQbGF5TGlzdH0+JiM5Nzc2OyBQbGF5bGlzdDwvYnV0dG9uPlxuXG5cdDx1bCBjbGFzczpzaG93LWxpc3Q9e2xpc3RJc1Nob3dpbmd9PlxuXHRcdHsjZWFjaCBhdWRpb0RhdGEgYXMge25hbWUsIHVybH0sIGl9XG5cdFx0PGxpIGRhdGEtdHJhY2staWQ9e2l9XG5cdFx0XHRcdG9uOmNsaWNrPlxuXHRcdFx0e25hbWV9PC9saT5cblx0XHR7L2VhY2h9XG5cdDwvdWw+XG48L3NlY3Rpb24+XG5cblxuPHN0eWxlPlxuXHRzZWN0aW9uI3BsYXlsaXN0LWNvbnQge1xuXHRcdHdpZHRoOiAyOThweDtcdFxuXHRcdGJveC1zaGFkb3c6IDAgMCA1cHggIzIyMjtcblx0XHRib3JkZXItcmFkaXVzOiAwIDAgNXB4IDVweDtcblx0XHRiYWNrZ3JvdW5kOiAjMzMzO1xuXHR9XG5cdFxuXHQvKiBTdHlsZSB0aGUgYnV0dG9ucyB0aGF0IGFyZSB1c2VkIHRvIG9wZW4gYW5kIGNsb3NlIHRoZSBhY2NvcmRpb24gcGFuZWwgKi9cblx0YnV0dG9uLmFjY29yZGlvbiB7XHRcdFxuXHRcdGJhY2tncm91bmQ6ICMyMjI7XG5cdFx0Y29sb3I6ICNiYmI7XG5cdFx0bWFyZ2luOiAwO1xuXHRcdHBhZGRpbmc6IDVweCAxNXB4O1xuXHRcdHdpZHRoOiAxMDAlO1xuLyogXHRcdHRleHQtYWxpZ246IGxlZnQ7ICovXG5cdFx0Ym9yZGVyOiBub25lO1xuXHRcdG91dGxpbmU6IG5vbmU7XG5cdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdHRyYW5zaXRpb246IDAuNHM7XG5cdH1cblxuXHQvKiBBZGQgYSBiYWNrZ3JvdW5kIGNvbG9yIHRvIHRoZSBidXR0b24gaWYgaXQgaXMgY2xpY2tlZCBvbiAoYWRkIHRoZSAuYWN0aXZlIGNsYXNzIHdpdGggSlMpLCBhbmQgd2hlbiB5b3UgbW92ZSB0aGUgbW91c2Ugb3ZlciBpdCAoaG92ZXIpICovXG5cdGJ1dHRvbi5hY3RpdmUge1xuXHRcdGJhY2tncm91bmQtY29sb3I6ICM4ODg7XG5cdFx0Y29sb3I6IGJsYWNrO1xuXHR9XG5cdFxuXHR1bCB7XG5cdFx0bGlzdC1zdHlsZS10eXBlOiBub25lO1xuXHRcdGJhY2tncm91bmQ6ICMyMjI7XG5cdFx0Y29sb3I6ICNkZGQ7XG5cdFx0bWFyZ2luOiAwO1xuXHRcdHBhZGRpbmc6IDA7XG5cdFx0Ym9yZGVyLXJhZGl1czogMCAwIDVweCA1cHg7XG5cdFx0aGVpZ2h0OiAwO1xuXHRcdG92ZXJmbG93OiBhdXRvO1xuXHRcdHRyYW5zaXRpb246IGhlaWdodCAuM3M7XG5cdH1cblx0XG5cdGxpIHtcblx0XHRsaW5lLWhlaWdodDogMTUwJTtcblx0XHRwYWRkaW5nOiA1cHggNXB4IDVweCAyMHB4O1xuXHRcdGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGRkO1xuXHRcdGN1cnNvcjogcG9pbnRlcjtcblx0fVxuXHRcblx0bGk6YWN0aXZlLCBsaTpob3ZlciB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogIzQ0NDtcblx0fVxuXHRcblx0LnNob3ctbGlzdCB7XG5cdFx0aGVpZ2h0OiAxNTBweDtcblx0fVxuPC9zdHlsZT4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUJDLE9BQU8sY0FBYyxlQUFDLENBQUMsQUFDdEIsS0FBSyxDQUFFLEtBQUssQ0FDWixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUN4QixhQUFhLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUMxQixVQUFVLENBQUUsSUFBSSxBQUNqQixDQUFDLEFBR0QsTUFBTSxVQUFVLGVBQUMsQ0FBQyxBQUNqQixVQUFVLENBQUUsSUFBSSxDQUNoQixLQUFLLENBQUUsSUFBSSxDQUNYLE1BQU0sQ0FBRSxDQUFDLENBQ1QsT0FBTyxDQUFFLEdBQUcsQ0FBQyxJQUFJLENBQ2pCLEtBQUssQ0FBRSxJQUFJLENBRVgsTUFBTSxDQUFFLElBQUksQ0FDWixPQUFPLENBQUUsSUFBSSxDQUNiLE1BQU0sQ0FBRSxPQUFPLENBQ2YsVUFBVSxDQUFFLElBQUksQUFDakIsQ0FBQyxBQUdELE1BQU0sT0FBTyxlQUFDLENBQUMsQUFDZCxnQkFBZ0IsQ0FBRSxJQUFJLENBQ3RCLEtBQUssQ0FBRSxLQUFLLEFBQ2IsQ0FBQyxBQUVELEVBQUUsZUFBQyxDQUFDLEFBQ0gsZUFBZSxDQUFFLElBQUksQ0FDckIsVUFBVSxDQUFFLElBQUksQ0FDaEIsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsQ0FBQyxDQUNULE9BQU8sQ0FBRSxDQUFDLENBQ1YsYUFBYSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FDMUIsTUFBTSxDQUFFLENBQUMsQ0FDVCxRQUFRLENBQUUsSUFBSSxDQUNkLFVBQVUsQ0FBRSxNQUFNLENBQUMsR0FBRyxBQUN2QixDQUFDLEFBRUQsRUFBRSxlQUFDLENBQUMsQUFDSCxXQUFXLENBQUUsSUFBSSxDQUNqQixPQUFPLENBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUN6QixhQUFhLENBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQzdCLE1BQU0sQ0FBRSxPQUFPLEFBQ2hCLENBQUMsQUFFRCxpQkFBRSxPQUFPLENBQUUsaUJBQUUsTUFBTSxBQUFDLENBQUMsQUFDcEIsZ0JBQWdCLENBQUUsSUFBSSxBQUN2QixDQUFDLEFBRUQsVUFBVSxlQUFDLENBQUMsQUFDWCxNQUFNLENBQUUsS0FBSyxBQUNkLENBQUMifQ== */";
  append_dev(document.head, style);
}

function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[3] = list[i].name;
  child_ctx[4] = list[i].url;
  child_ctx[6] = i;
  return child_ctx;
} // (16:2) {#each audioData as {name, url}


function create_each_block(ctx) {
  let li;
  let t_value =
  /*name*/
  ctx[3] + "";
  let t;
  let li_data_track_id_value;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      li = element("li");
      t = text(t_value);
      this.h();
    },
    l: function claim(nodes) {
      li = claim_element(nodes, "LI", {
        "data-track-id": true,
        class: true
      });
      var li_nodes = children(li);
      t = claim_text(li_nodes, t_value);
      li_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(li, "data-track-id", li_data_track_id_value =
      /*i*/
      ctx[6]);
      attr_dev(li, "class", "svelte-1wrg3xn");
      add_location(li, file$4, 16, 2, 395);
    },
    m: function mount(target, anchor) {
      insert_dev(target, li, anchor);
      append_dev(li, t);

      if (!mounted) {
        dispose = listen_dev(li, "click",
        /*click_handler*/
        ctx[2], false, false, false);
        mounted = true;
      }
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(li);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block.name,
    type: "each",
    source: "(16:2) {#each audioData as {name, url}",
    ctx
  });
  return block;
}

function create_fragment$4(ctx) {
  let section;
  let button;
  let t0;
  let t1;
  let ul;
  let mounted;
  let dispose;
  let each_value = audioData;
  validate_each_argument(each_value);
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }

  const block = {
    c: function create() {
      section = element("section");
      button = element("button");
      t0 = text("☰ Playlist");
      t1 = space();
      ul = element("ul");

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      this.h();
    },
    l: function claim(nodes) {
      section = claim_element(nodes, "SECTION", {
        class: true,
        id: true
      });
      var section_nodes = children(section);
      button = claim_element(section_nodes, "BUTTON", {
        class: true
      });
      var button_nodes = children(button);
      t0 = claim_text(button_nodes, "☰ Playlist");
      button_nodes.forEach(detach_dev);
      t1 = claim_space(section_nodes);
      ul = claim_element(section_nodes, "UL", {
        class: true
      });
      var ul_nodes = children(ul);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(ul_nodes);
      }

      ul_nodes.forEach(detach_dev);
      section_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(button, "class", "accordion svelte-1wrg3xn");
      toggle_class(button, "active",
      /*listIsShowing*/
      ctx[0]);
      add_location(button, file$4, 10, 1, 201);
      attr_dev(ul, "class", "svelte-1wrg3xn");
      toggle_class(ul, "show-list",
      /*listIsShowing*/
      ctx[0]);
      add_location(ul, file$4, 14, 1, 318);
      attr_dev(section, "class", "m-10 svelte-1wrg3xn");
      attr_dev(section, "id", "playlist-cont");
      add_location(section, file$4, 9, 0, 157);
    },
    m: function mount(target, anchor) {
      insert_dev(target, section, anchor);
      append_dev(section, button);
      append_dev(button, t0);
      append_dev(section, t1);
      append_dev(section, ul);

      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(ul, null);
      }

      if (!mounted) {
        dispose = listen_dev(button, "click",
        /*showPlayList*/
        ctx[1], false, false, false);
        mounted = true;
      }
    },
    p: function update(ctx, [dirty]) {
      if (dirty &
      /*listIsShowing*/
      1) {
        toggle_class(button, "active",
        /*listIsShowing*/
        ctx[0]);
      }

      if (dirty &
      /*audioData*/
      0) {
        each_value = audioData;
        validate_each_argument(each_value);
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(ul, null);
          }
        }

        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }

        each_blocks.length = each_value.length;
      }

      if (dirty &
      /*listIsShowing*/
      1) {
        toggle_class(ul, "show-list",
        /*listIsShowing*/
        ctx[0]);
      }
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(section);
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$4.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance$4($$self, $$props, $$invalidate) {
  let listIsShowing = false;

  const showPlayList = () => $$invalidate(0, listIsShowing = !listIsShowing);

  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PlayList> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("PlayList", $$slots, []);

  function click_handler(event) {
    bubble($$self, event);
  }

  $$self.$capture_state = () => ({
    audioData,
    listIsShowing,
    showPlayList
  });

  $$self.$inject_state = $$props => {
    if ("listIsShowing" in $$props) $$invalidate(0, listIsShowing = $$props.listIsShowing);
  };

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  return [listIsShowing, showPlayList, click_handler];
}

class PlayList extends SvelteComponentDev {
  constructor(options) {
    super(options);
    if (!document.getElementById("svelte-1wrg3xn-style")) add_css$4();
    init(this, options, instance$4, create_fragment$4, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "PlayList",
      options,
      id: create_fragment$4.name
    });
  }

}

/* src/components/Audio/Audio.svelte generated by Svelte v3.24.0 */
const {
  console: console_1
} = globals;
const file$5 = "src/components/Audio/Audio.svelte";

function add_css$5() {
  var style = element("style");
  style.id = "svelte-fm0i8u-style";
  style.textContent = "main.svelte-fm0i8u{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:20px 0 0 0;margin-bottom:10px}#player-cont.svelte-fm0i8u{width:250px;height:205px;padding:.7rem 1.5rem 0;box-shadow:0 0 5px black;background:#222;color:#bbb;border-radius:5px 5px 0 0;margin-bottom:20px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXVkaW8uc3ZlbHRlIiwic291cmNlcyI6WyJBdWRpby5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cblx0aW1wb3J0IHsgYXVkaW9EYXRhIH0gZnJvbSAnLi9hdWRpb0RhdGEuanMnO1xuXHRcblx0aW1wb3J0IFRyYWNrSGVhZGluZyBmcm9tICcuL1RyYWNrSGVhZGluZy5zdmVsdGUnO1xuXHRpbXBvcnQgUHJvZ3Jlc3NCYXJUaW1lIGZyb20gJy4vUHJvZ3Jlc3NCYXJUaW1lLnN2ZWx0ZSc7XG5cdGltcG9ydCBDb250cm9scyBmcm9tICcuL0NvbnRyb2xzLnN2ZWx0ZSc7XG5cdGltcG9ydCBWb2x1bWVTbGlkZXIgZnJvbSAnLi9Wb2x1bWVTbGlkZXIuc3ZlbHRlJztcblx0aW1wb3J0IFBsYXlMaXN0IGZyb20gJy4vUGxheUxpc3Quc3ZlbHRlJztcblx0XG5cdC8vIEdldCBBdWRpbyB0cmFja1xuXHRsZXQgdHJhY2tJbmRleCA9IDA7XG5cdC8vICQ6IGNvbnNvbGUubG9nKHRyYWNrSW5kZXgpXG5cdGxldCBhdWRpb0ZpbGUgPSBuZXcgQXVkaW8oYXVkaW9EYXRhW3RyYWNrSW5kZXhdLnVybCk7XG5cdGxldCB0cmFja1RpdGxlID0gYXVkaW9EYXRhW3RyYWNrSW5kZXhdLm5hbWU7XG5cdFxuXHRjb25zdCBsb2FkVHJhY2sgPSAoKSA9PiB7XG5cdFx0YXVkaW9GaWxlID0gbmV3IEF1ZGlvKGF1ZGlvRGF0YVt0cmFja0luZGV4XS51cmwpO1xuXHRcdGF1ZGlvRmlsZS5vbmxvYWRlZG1ldGFkYXRhID0gKCkgPT4ge1xuXHRcdFx0dG90YWxUcmFja1RpbWUgPSBhdWRpb0ZpbGUuZHVyYXRpb247XG5cdFx0XHR1cGRhdGVUaW1lKCk7XG5cdFx0fVxuXHRcdHRyYWNrVGl0bGUgPSBhdWRpb0RhdGFbdHJhY2tJbmRleF0ubmFtZTtcblx0fVxuXHRcblx0Y29uc3QgYXV0b1BsYXlOZXh0VHJhY2sgPSAoKSA9PiB7XG5cdFx0aWYgKHRyYWNrSW5kZXggPD0gYXVkaW9EYXRhLmxlbmd0aC0xKSB7XG5cdFx0XHR0cmFja0luZGV4ICs9IDE7XG5cdFx0XHRsb2FkVHJhY2soKTtcblx0XHRcdGF1ZGlvRmlsZS5wbGF5KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRyYWNrSW5kZXggPSAwO1xuXHRcdFx0bG9hZFRyYWNrKCk7XG5cdFx0XHRhdWRpb0ZpbGUucGxheSgpO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8vIFRyYWNrIER1cmF0aW9uIGFuZCBQcm9ncmVzcyBCYXJcblx0bGV0IHRvdGFsVHJhY2tUaW1lO1xuXHQkOiBjb25zb2xlLmxvZyh0b3RhbFRyYWNrVGltZSlcblx0YXVkaW9GaWxlLm9ubG9hZGVkbWV0YWRhdGEgPSAoKSA9PiB7XG5cdFx0dG90YWxUcmFja1RpbWUgPSBhdWRpb0ZpbGUuZHVyYXRpb247XG5cdFx0dXBkYXRlVGltZSgpO1xuXHR9XG5cdFxuXHRsZXQgdG90YWxUaW1lRGlzcGxheSA9IFwibG9hZGluZy4uLlwiO1xuXHRsZXQgY3VyclRpbWVEaXNwbGF5ID0gXCIwOjAwOjAwXCI7XG5cdGxldCBwcm9ncmVzcyA9IDA7XG5cdGxldCB0cmFja1RpbWVyO1xuXHRcblx0ZnVuY3Rpb24gdXBkYXRlVGltZSgpIHtcblx0XHRwcm9ncmVzcyA9IGF1ZGlvRmlsZS5jdXJyZW50VGltZSAqICgxMDAgLyB0b3RhbFRyYWNrVGltZSk7XG5cdFx0XG5cdFx0bGV0IGN1cnJIcnMgPSBNYXRoLmZsb29yKChhdWRpb0ZpbGUuY3VycmVudFRpbWUgLyA2MCkgLyA2MCk7XG5cdFx0bGV0IGN1cnJNaW5zID0gTWF0aC5mbG9vcihhdWRpb0ZpbGUuY3VycmVudFRpbWUgLyA2MCk7XG5cdFx0bGV0IGN1cnJTZWNzID0gTWF0aC5mbG9vcihhdWRpb0ZpbGUuY3VycmVudFRpbWUgLSBjdXJyTWlucyAqIDYwKTtcblx0XHRcblx0XHRsZXQgZHVySHJzID0gTWF0aC5mbG9vciggKHRvdGFsVHJhY2tUaW1lIC8gNjApIC8gNjAgKTtcblx0XHRsZXQgZHVyTWlucyA9IE1hdGguZmxvb3IoICh0b3RhbFRyYWNrVGltZSAvIDYwKSAlIDYwICk7XG5cdFx0bGV0IGR1clNlY3MgPSAgTWF0aC5mbG9vcih0b3RhbFRyYWNrVGltZSAtIChkdXJIcnMqNjAqNjApIC0gKGR1ck1pbnMgKiA2MCkpO1xuXHRcdFxuXHRcdGlmKGN1cnJTZWNzIDwgMTApIGN1cnJTZWNzID0gYDAke2N1cnJTZWNzfWA7XG5cdFx0aWYoZHVyU2VjcyA8IDEwKSBkdXJTZWNzID0gYDAke2R1clNlY3N9YDtcblx0XHRpZihjdXJyTWlucyA8IDEwKSBjdXJyTWlucyA9IGAwJHtjdXJyTWluc31gO1xuXHRcdGlmKGR1ck1pbnMgPCAxMCkgZHVyTWlucyA9IGAwJHtkdXJNaW5zfWA7XG5cdFx0XG5cdFx0Y3VyclRpbWVEaXNwbGF5ID0gYCR7Y3Vyckhyc306JHtjdXJyTWluc306JHtjdXJyU2Vjc31gO1xuXHRcdHRvdGFsVGltZURpc3BsYXkgPSBgJHtkdXJIcnN9OiR7ZHVyTWluc306JHtkdXJTZWNzfWA7XG5cdFx0XG5cdFx0aWYgKGF1ZGlvRmlsZS5lbmRlZCkge1xuXHRcdFx0dG9nZ2xlVGltZVJ1bm5pbmcoKTtcblx0XHR9XG5cdH1cblx0XG5cdGNvbnN0IHRvZ2dsZVRpbWVSdW5uaW5nID0gKCkgPT4ge1xuXHRcdGlmIChhdWRpb0ZpbGUuZW5kZWQpIHtcblx0XHRcdGlzUGxheWluZyA9IGZhbHNlO1xuXHRcdFx0Y2xlYXJJbnRlcnZhbCh0cmFja1RpbWVyKTtcblx0XHRcdGNvbnNvbGUubG9nKGBFbmRlZCA9ICR7YXVkaW9GaWxlLmVuZGVkfWApO1x0XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRyYWNrVGltZXIgPSBzZXRJbnRlcnZhbCh1cGRhdGVUaW1lLCAxMDApO1xuXHRcdH1cblx0fVxuXHRcblxuXHQvLyBDb250cm9sc1xuXHRsZXQgaXNQbGF5aW5nID0gZmFsc2U7XG5cdCQ6IGNvbnNvbGUubG9nKGBpc1BsYXlpbmcgPSAke2lzUGxheWluZ31gKVxuXHRcblx0Y29uc3QgcGxheVBhdXNlQXVkaW8gPSAoKSA9PiB7XG5cdFx0aWYgKGF1ZGlvRmlsZS5wYXVzZWQpIHtcblx0XHRcdHRvZ2dsZVRpbWVSdW5uaW5nKClcblx0XHRcdGF1ZGlvRmlsZS5wbGF5KCk7XG5cdFx0XHRpc1BsYXlpbmcgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0b2dnbGVUaW1lUnVubmluZygpXG5cdFx0XHRhdWRpb0ZpbGUucGF1c2UoKTtcblx0XHRcdGlzUGxheWluZyA9IGZhbHNlO1xuXHRcdH1cdCBcdFxuXHR9XG5cdFxuXHRjb25zdCByZXdpbmRBdWRpbyA9ICgpID0+IGF1ZGlvRmlsZS5jdXJyZW50VGltZSAtPSAxMDtcblx0Y29uc3QgZm9yd2FyZEF1ZGlvID0gKCkgPT4gYXVkaW9GaWxlLmN1cnJlbnRUaW1lICs9IDEwO1xuXHRcblx0Ly8gVm9sdW1lIFNsaWRlclxuXHRsZXQgdm9sID0gNTA7XG5cdGNvbnN0IGFkanVzdFZvbCA9ICgpID0+IGF1ZGlvRmlsZS52b2x1bWUgPSB2b2wgLyAxMDA7IFxuXHRcblx0XG5cdC8vIFBsYXlsaXN0XG5cdGNvbnN0IGhhbmRsZVRyYWNrID0gKGUpID0+IHtcblx0XHRpZiAoIWlzUGxheWluZykge1xuXHRcdFx0dHJhY2tJbmRleCA9IE51bWJlcihlLnRhcmdldC5kYXRhc2V0LnRyYWNrSWQpO1xuXHRcdFx0bG9hZFRyYWNrKCk7XG5cdFx0XHRwbGF5UGF1c2VBdWRpbygpOyAvLyBhdXRvIHBsYXlcblx0XHR9IGVsc2Uge1xuXHRcdFx0aXNQbGF5aW5nID0gZmFsc2U7XG5cdFx0XHRhdWRpb0ZpbGUucGF1c2UoKTtcblx0XHRcdHRyYWNrSW5kZXggPSBOdW1iZXIoZS50YXJnZXQuZGF0YXNldC50cmFja0lkKTtcblx0XHRcdGxvYWRUcmFjaygpO1xuXHRcdFx0cGxheVBhdXNlQXVkaW8oKTsgLy8gYXV0byBwbGF5XG5cdFx0fVxuXHR9XG48L3NjcmlwdD5cblxuXG48bWFpbj5cblx0PHNlY3Rpb24gaWQ9XCJwbGF5ZXItY29udFwiPlxuXHRcdFxuXHRcdDxUcmFja0hlYWRpbmcge3RyYWNrVGl0bGV9IC8+XG5cblx0XHRcblx0XHQ8UHJvZ3Jlc3NCYXJUaW1lIHtjdXJyVGltZURpc3BsYXl9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCB7dG90YWxUaW1lRGlzcGxheX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0IHtwcm9ncmVzc30gLz5cblx0XHRcblx0XHQ8Q29udHJvbHMge2lzUGxheWluZ30gXG5cdFx0XHRcdFx0XHRcdG9uOnJld2luZD17cmV3aW5kQXVkaW99XG5cdFx0XHRcdFx0XHRcdG9uOnBsYXlQYXVzZT17cGxheVBhdXNlQXVkaW99XG5cdFx0XHRcdFx0XHRcdG9uOmZvcndhcmQ9e2ZvcndhcmRBdWRpb30gLz5cblx0XHRcblx0XHQ8Vm9sdW1lU2xpZGVyIGJpbmQ6dm9sXG5cdFx0XHRcdFx0XHRcdFx0XHRvbjppbnB1dD17YWRqdXN0Vm9sfSAvPlx0XG5cdDwvc2VjdGlvbj5cblx0XG5cdFx0PFBsYXlMaXN0IG9uOmNsaWNrPXtoYW5kbGVUcmFja30gLz5cbjwvbWFpbj5cblxuXG48c3R5bGU+XG5cdG1haW4ge1xuXHRcdFxuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgcGFkZGluZzogMjBweCAwIDAgMDtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgXG5cdFx0XG5cdH1cblxuXHQjcGxheWVyLWNvbnQge1xuXHRcdHdpZHRoOiAyNTBweDtcblx0XHRoZWlnaHQ6IDIwNXB4O1xuXHRcdHBhZGRpbmc6IC43cmVtIDEuNXJlbSAwO1xuXHRcdGJveC1zaGFkb3c6IDAgMCA1cHggYmxhY2s7XG5cdFx0YmFja2dyb3VuZDogIzIyMjtcblx0XHRjb2xvcjogI2JiYjtcblx0XHRib3JkZXItcmFkaXVzOiA1cHggNXB4IDAgMDtcblx0XHRtYXJnaW4tYm90dG9tOiAyMHB4O1xuXHR9XHRcdFxuPC9zdHlsZT4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0pDLElBQUksY0FBQyxDQUFDLEFBRUwsT0FBTyxDQUFFLElBQUksQ0FDYixjQUFjLENBQUUsTUFBTSxDQUN0QixXQUFXLENBQUUsTUFBTSxDQUNiLGVBQWUsQ0FBRSxNQUFNLENBQ3ZCLE9BQU8sQ0FBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ25CLGFBQWEsQ0FBRSxJQUFJLEFBRzFCLENBQUMsQUFFRCxZQUFZLGNBQUMsQ0FBQyxBQUNiLEtBQUssQ0FBRSxLQUFLLENBQ1osTUFBTSxDQUFFLEtBQUssQ0FDYixPQUFPLENBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQ3ZCLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQ3pCLFVBQVUsQ0FBRSxJQUFJLENBQ2hCLEtBQUssQ0FBRSxJQUFJLENBQ1gsYUFBYSxDQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDMUIsYUFBYSxDQUFFLElBQUksQUFDcEIsQ0FBQyJ9 */";
  append_dev(document.head, style);
}

function create_fragment$5(ctx) {
  let main;
  let section;
  let trackheading;
  let t0;
  let progressbartime;
  let t1;
  let controls;
  let t2;
  let volumeslider;
  let updating_vol;
  let t3;
  let playlist;
  let current;
  trackheading = new TrackHeading({
    props: {
      trackTitle:
      /*trackTitle*/
      ctx[0]
    },
    $$inline: true
  });
  progressbartime = new ProgressBarTime({
    props: {
      currTimeDisplay:
      /*currTimeDisplay*/
      ctx[2],
      totalTimeDisplay:
      /*totalTimeDisplay*/
      ctx[1],
      progress:
      /*progress*/
      ctx[3]
    },
    $$inline: true
  });
  controls = new Controls({
    props: {
      isPlaying:
      /*isPlaying*/
      ctx[4]
    },
    $$inline: true
  });
  controls.$on("rewind",
  /*rewindAudio*/
  ctx[7]);
  controls.$on("playPause",
  /*playPauseAudio*/
  ctx[6]);
  controls.$on("forward",
  /*forwardAudio*/
  ctx[8]);

  function volumeslider_vol_binding(value) {
    /*volumeslider_vol_binding*/
    ctx[11].call(null, value);
  }

  let volumeslider_props = {};

  if (
  /*vol*/
  ctx[5] !== void 0) {
    volumeslider_props.vol =
    /*vol*/
    ctx[5];
  }

  volumeslider = new VolumeSlider({
    props: volumeslider_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(volumeslider, "vol", volumeslider_vol_binding));
  volumeslider.$on("input",
  /*adjustVol*/
  ctx[9]);
  playlist = new PlayList({
    $$inline: true
  });
  playlist.$on("click",
  /*handleTrack*/
  ctx[10]);
  const block = {
    c: function create() {
      main = element("main");
      section = element("section");
      create_component(trackheading.$$.fragment);
      t0 = space();
      create_component(progressbartime.$$.fragment);
      t1 = space();
      create_component(controls.$$.fragment);
      t2 = space();
      create_component(volumeslider.$$.fragment);
      t3 = space();
      create_component(playlist.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      main = claim_element(nodes, "MAIN", {
        class: true
      });
      var main_nodes = children(main);
      section = claim_element(main_nodes, "SECTION", {
        id: true,
        class: true
      });
      var section_nodes = children(section);
      claim_component(trackheading.$$.fragment, section_nodes);
      t0 = claim_space(section_nodes);
      claim_component(progressbartime.$$.fragment, section_nodes);
      t1 = claim_space(section_nodes);
      claim_component(controls.$$.fragment, section_nodes);
      t2 = claim_space(section_nodes);
      claim_component(volumeslider.$$.fragment, section_nodes);
      section_nodes.forEach(detach_dev);
      t3 = claim_space(main_nodes);
      claim_component(playlist.$$.fragment, main_nodes);
      main_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(section, "id", "player-cont");
      attr_dev(section, "class", "svelte-fm0i8u");
      add_location(section, file$5, 127, 1, 3126);
      attr_dev(main, "class", "svelte-fm0i8u");
      add_location(main, file$5, 126, 0, 3118);
    },
    m: function mount(target, anchor) {
      insert_dev(target, main, anchor);
      append_dev(main, section);
      mount_component(trackheading, section, null);
      append_dev(section, t0);
      mount_component(progressbartime, section, null);
      append_dev(section, t1);
      mount_component(controls, section, null);
      append_dev(section, t2);
      mount_component(volumeslider, section, null);
      append_dev(main, t3);
      mount_component(playlist, main, null);
      current = true;
    },
    p: function update(ctx, [dirty]) {
      const trackheading_changes = {};
      if (dirty &
      /*trackTitle*/
      1) trackheading_changes.trackTitle =
      /*trackTitle*/
      ctx[0];
      trackheading.$set(trackheading_changes);
      const progressbartime_changes = {};
      if (dirty &
      /*currTimeDisplay*/
      4) progressbartime_changes.currTimeDisplay =
      /*currTimeDisplay*/
      ctx[2];
      if (dirty &
      /*totalTimeDisplay*/
      2) progressbartime_changes.totalTimeDisplay =
      /*totalTimeDisplay*/
      ctx[1];
      if (dirty &
      /*progress*/
      8) progressbartime_changes.progress =
      /*progress*/
      ctx[3];
      progressbartime.$set(progressbartime_changes);
      const controls_changes = {};
      if (dirty &
      /*isPlaying*/
      16) controls_changes.isPlaying =
      /*isPlaying*/
      ctx[4];
      controls.$set(controls_changes);
      const volumeslider_changes = {};

      if (!updating_vol && dirty &
      /*vol*/
      32) {
        updating_vol = true;
        volumeslider_changes.vol =
        /*vol*/
        ctx[5];
        add_flush_callback(() => updating_vol = false);
      }

      volumeslider.$set(volumeslider_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(trackheading.$$.fragment, local);
      transition_in(progressbartime.$$.fragment, local);
      transition_in(controls.$$.fragment, local);
      transition_in(volumeslider.$$.fragment, local);
      transition_in(playlist.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(trackheading.$$.fragment, local);
      transition_out(progressbartime.$$.fragment, local);
      transition_out(controls.$$.fragment, local);
      transition_out(volumeslider.$$.fragment, local);
      transition_out(playlist.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(main);
      destroy_component(trackheading);
      destroy_component(progressbartime);
      destroy_component(controls);
      destroy_component(volumeslider);
      destroy_component(playlist);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$5.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance$5($$self, $$props, $$invalidate) {
  let trackIndex = 0; // $: console.log(trackIndex)

  let audioFile = new Audio(audioData[trackIndex].url);
  let trackTitle = audioData[trackIndex].name;

  const loadTrack = () => {
    audioFile = new Audio(audioData[trackIndex].url);

    audioFile.onloadedmetadata = () => {
      $$invalidate(14, totalTrackTime = audioFile.duration);
      updateTime();
    };

    $$invalidate(0, trackTitle = audioData[trackIndex].name);
  };

  const autoPlayNextTrack = () => {
    if (trackIndex <= audioData.length - 1) {
      trackIndex += 1;
      loadTrack();
      audioFile.play();
    } else {
      trackIndex = 0;
      loadTrack();
      audioFile.play();
    }
  }; // Track Duration and Progress Bar


  let totalTrackTime;

  audioFile.onloadedmetadata = () => {
    $$invalidate(14, totalTrackTime = audioFile.duration);
    updateTime();
  };

  let totalTimeDisplay = "loading...";
  let currTimeDisplay = "0:00:00";
  let progress = 0;
  let trackTimer;

  function updateTime() {
    $$invalidate(3, progress = audioFile.currentTime * (100 / totalTrackTime));
    let currHrs = Math.floor(audioFile.currentTime / 60 / 60);
    let currMins = Math.floor(audioFile.currentTime / 60);
    let currSecs = Math.floor(audioFile.currentTime - currMins * 60);
    let durHrs = Math.floor(totalTrackTime / 60 / 60);
    let durMins = Math.floor(totalTrackTime / 60 % 60);
    let durSecs = Math.floor(totalTrackTime - durHrs * 60 * 60 - durMins * 60);
    if (currSecs < 10) currSecs = `0${currSecs}`;
    if (durSecs < 10) durSecs = `0${durSecs}`;
    if (currMins < 10) currMins = `0${currMins}`;
    if (durMins < 10) durMins = `0${durMins}`;
    $$invalidate(2, currTimeDisplay = `${currHrs}:${currMins}:${currSecs}`);
    $$invalidate(1, totalTimeDisplay = `${durHrs}:${durMins}:${durSecs}`);

    if (audioFile.ended) {
      toggleTimeRunning();
    }
  }

  const toggleTimeRunning = () => {
    if (audioFile.ended) {
      $$invalidate(4, isPlaying = false);
      clearInterval(trackTimer);
      console.log(`Ended = ${audioFile.ended}`);
    } else {
      trackTimer = setInterval(updateTime, 100);
    }
  }; // Controls


  let isPlaying = false;

  const playPauseAudio = () => {
    if (audioFile.paused) {
      toggleTimeRunning();
      audioFile.play();
      $$invalidate(4, isPlaying = true);
    } else {
      toggleTimeRunning();
      audioFile.pause();
      $$invalidate(4, isPlaying = false);
    }
  };

  const rewindAudio = () => audioFile.currentTime -= 10;

  const forwardAudio = () => audioFile.currentTime += 10; // Volume Slider


  let vol = 50;

  const adjustVol = () => audioFile.volume = vol / 100; // Playlist


  const handleTrack = e => {
    if (!isPlaying) {
      trackIndex = Number(e.target.dataset.trackId);
      loadTrack();
      playPauseAudio(); // auto play
    } else {
      $$invalidate(4, isPlaying = false);
      audioFile.pause();
      trackIndex = Number(e.target.dataset.trackId);
      loadTrack();
      playPauseAudio(); // auto play
    }
  };

  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Audio> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Audio", $$slots, []);

  function volumeslider_vol_binding(value) {
    vol = value;
    $$invalidate(5, vol);
  }

  $$self.$capture_state = () => ({
    audioData,
    TrackHeading,
    ProgressBarTime,
    Controls,
    VolumeSlider,
    PlayList,
    trackIndex,
    audioFile,
    trackTitle,
    loadTrack,
    autoPlayNextTrack,
    totalTrackTime,
    totalTimeDisplay,
    currTimeDisplay,
    progress,
    trackTimer,
    updateTime,
    toggleTimeRunning,
    isPlaying,
    playPauseAudio,
    rewindAudio,
    forwardAudio,
    vol,
    adjustVol,
    handleTrack
  });

  $$self.$inject_state = $$props => {
    if ("trackIndex" in $$props) trackIndex = $$props.trackIndex;
    if ("audioFile" in $$props) audioFile = $$props.audioFile;
    if ("trackTitle" in $$props) $$invalidate(0, trackTitle = $$props.trackTitle);
    if ("totalTrackTime" in $$props) $$invalidate(14, totalTrackTime = $$props.totalTrackTime);
    if ("totalTimeDisplay" in $$props) $$invalidate(1, totalTimeDisplay = $$props.totalTimeDisplay);
    if ("currTimeDisplay" in $$props) $$invalidate(2, currTimeDisplay = $$props.currTimeDisplay);
    if ("progress" in $$props) $$invalidate(3, progress = $$props.progress);
    if ("trackTimer" in $$props) trackTimer = $$props.trackTimer;
    if ("isPlaying" in $$props) $$invalidate(4, isPlaying = $$props.isPlaying);
    if ("vol" in $$props) $$invalidate(5, vol = $$props.vol);
  };

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*totalTrackTime*/
    16384) {
       console.log(totalTrackTime);
    }

    if ($$self.$$.dirty &
    /*isPlaying*/
    16) {
       console.log(`isPlaying = ${isPlaying}`);
    }
  };

  return [trackTitle, totalTimeDisplay, currTimeDisplay, progress, isPlaying, vol, playPauseAudio, rewindAudio, forwardAudio, adjustVol, handleTrack, volumeslider_vol_binding];
}

class Audio_1 extends SvelteComponentDev {
  constructor(options) {
    super(options);
    if (!document.getElementById("svelte-fm0i8u-style")) add_css$5();
    init(this, options, instance$5, create_fragment$5, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Audio_1",
      options,
      id: create_fragment$5.name
    });
  }

}

/* src/routes/playroom.svelte generated by Svelte v3.24.0 */
const file$6 = "src/routes/playroom.svelte";

function create_fragment$6(ctx) {
  let h3;
  let t0;
  let t1;
  let div4;
  let div0;
  let audio;
  let t2;
  let div3;
  let div1;
  let p;
  let t3;
  let t4;
  let div2;
  let button;
  let a;
  let img;
  let img_src_value;
  let current;
  audio = new Audio_1({
    $$inline: true
  });
  const block = {
    c: function create() {
      h3 = element("h3");
      t0 = text("Llevate nuestra música a donde quieras...");
      t1 = space();
      div4 = element("div");
      div0 = element("div");
      create_component(audio.$$.fragment);
      t2 = space();
      div3 = element("div");
      div1 = element("div");
      p = element("p");
      t3 = text("Siempre libre siempre vivo - Paso a paso");
      t4 = space();
      div2 = element("div");
      button = element("button");
      a = element("a");
      img = element("img");
      this.h();
    },
    l: function claim(nodes) {
      h3 = claim_element(nodes, "H3", {
        class: true
      });
      var h3_nodes = children(h3);
      t0 = claim_text(h3_nodes, "Llevate nuestra música a donde quieras...");
      h3_nodes.forEach(detach_dev);
      t1 = claim_space(nodes);
      div4 = claim_element(nodes, "DIV", {
        class: true
      });
      var div4_nodes = children(div4);
      div0 = claim_element(div4_nodes, "DIV", {
        class: true
      });
      var div0_nodes = children(div0);
      claim_component(audio.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach_dev);
      t2 = claim_space(div4_nodes);
      div3 = claim_element(div4_nodes, "DIV", {
        class: true
      });
      var div3_nodes = children(div3);
      div1 = claim_element(div3_nodes, "DIV", {
        class: true
      });
      var div1_nodes = children(div1);
      p = claim_element(div1_nodes, "P", {});
      var p_nodes = children(p);
      t3 = claim_text(p_nodes, "Siempre libre siempre vivo - Paso a paso");
      p_nodes.forEach(detach_dev);
      div1_nodes.forEach(detach_dev);
      t4 = claim_space(div3_nodes);
      div2 = claim_element(div3_nodes, "DIV", {});
      var div2_nodes = children(div2);
      button = claim_element(div2_nodes, "BUTTON", {
        class: true
      });
      var button_nodes = children(button);
      a = claim_element(button_nodes, "A", {
        href: true,
        download: true
      });
      var a_nodes = children(a);
      img = claim_element(a_nodes, "IMG", {
        src: true,
        alt: true,
        class: true
      });
      a_nodes.forEach(detach_dev);
      button_nodes.forEach(detach_dev);
      div2_nodes.forEach(detach_dev);
      div3_nodes.forEach(detach_dev);
      div4_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(h3, "class", "text-xl");
      add_location(h3, file$6, 4, 0, 78);
      attr_dev(div0, "class", "m-30");
      add_location(div0, file$6, 6, 2, 178);
      add_location(p, file$6, 13, 6, 396);
      attr_dev(div1, "class", "grid col-span-2 justify-self-center");
      add_location(div1, file$6, 12, 4, 340);
      if (img.src !== (img_src_value = "desc.svg ")) attr_dev(img, "src", img_src_value);
      attr_dev(img, "alt", "disc");
      attr_dev(img, "class", "md:w-20 w-5");
      add_location(img, file$6, 21, 10, 676);
      attr_dev(a, "href", "PASO A PASO.mp3");
      attr_dev(a, "download", "PASO A PASO.mp3");
      add_location(a, file$6, 20, 10, 611);
      attr_dev(button, "class", "bg-blue-gray-700 hover:bg-gray-900  text-gray-500  font-bold py-2 px-4\n          rounded-full ");
      add_location(button, file$6, 17, 8, 479);
      add_location(div2, file$6, 15, 4, 459);
      attr_dev(div3, "class", "grid grid-cols-3 grid-rows-1 gap-4 rounded-bl place-items-center shadow-lg p-4  mt-30 mb-10");
      add_location(div3, file$6, 9, 2, 222);
      attr_dev(div4, "class", "grid grid-cols-1");
      add_location(div4, file$6, 5, 0, 145);
    },
    m: function mount(target, anchor) {
      insert_dev(target, h3, anchor);
      append_dev(h3, t0);
      insert_dev(target, t1, anchor);
      insert_dev(target, div4, anchor);
      append_dev(div4, div0);
      mount_component(audio, div0, null);
      append_dev(div4, t2);
      append_dev(div4, div3);
      append_dev(div3, div1);
      append_dev(div1, p);
      append_dev(p, t3);
      append_dev(div3, t4);
      append_dev(div3, div2);
      append_dev(div2, button);
      append_dev(button, a);
      append_dev(a, img);
      current = true;
    },
    p: noop,
    i: function intro(local) {
      if (current) return;
      transition_in(audio.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(audio.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(h3);
      if (detaching) detach_dev(t1);
      if (detaching) detach_dev(div4);
      destroy_component(audio);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$6.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance$6($$self, $$props, $$invalidate) {
  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Playroom> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Playroom", $$slots, []);

  $$self.$capture_state = () => ({
    Audio: Audio_1
  });

  return [];
}

class Playroom extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$6, create_fragment$6, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Playroom",
      options,
      id: create_fragment$6.name
    });
  }

}

export default Playroom;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

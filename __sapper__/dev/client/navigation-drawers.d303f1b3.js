import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, X as validate_store, Y as component_subscribe, v as validate_slots, Z as right, _ as elevation, $ as persistent, y as showNav, a0 as binding_callbacks, a1 as bind, o as create_component, k as space, p as claim_component, m as claim_space, q as mount_component, h as insert_dev, a2 as add_flush_callback, r as transition_in, u as transition_out, w as destroy_component, b as detach_dev } from './client.7a6793f2.js';
import { C as Code } from './Code.129a7a7f.js';
import { C as Checkbox } from './index.dce6159c.js';
import './index.4a4ba355.js';

var drawers = "<script>\n  // This is top src/routes/_layout.svelte.\n\n  import {\n    List,\n    ListItem,\n    NavigationDrawer\n  } from \"smelte\";\n  import { right, elevation, persistent, showNav } from 'stores.js';\n  const menu = [\n      { to: \"components/text-fields\", text: 'Text fields' },\n      { to: \"components/buttons\", text: 'Buttons' },\n      { to: \"components/selection-controls\", text: 'Selection controls' },\n      { to: \"components/lists\", text: 'Lists' },\n      { to: \"components/navigation-drawers\", text: 'Navigation Drawers' },\n      { to: \"..\", text: 'Go back' },\n    ];\n  \n  let path = \"components/navigation-drawers\";\n\n</script>\n\n<NavigationDrawer\n  bind:showDesktop={$showNav}\n  right={$right}\n  persistent={$persistent}\n  elevation={$elevation}\n>\n  <h6\n    class=\"p-6 ml-1 pb-2 text-xs text-gray-900\"\n  >Components</h6>\n  <List items={menu}>\n    <span slot=\"item\" let:item={item} class=\"cursor-pointer\">\n      {#if item.to === '/typography'}\n        <hr>\n        <h6 class=\"p-6 ml-1 py-2 text-xs text-gray-900\">Utilities</h6>\n      {/if}\n\n      <a href={item.to}>\n        <ListItem\n          selected={path.includes(item.to)}\n          {...item}\n          dense\n          navigation\n        />\n      </a>\n    </span>\n  </List>\n  <hr>\n</NavigationDrawer>";

/* src/routes/components/navigation-drawers.svelte generated by Svelte v3.24.0 */

function create_fragment(ctx) {
  let checkbox0;
  let updating_checked;
  let t0;
  let checkbox1;
  let updating_checked_1;
  let t1;
  let checkbox2;
  let updating_checked_2;
  let t2;
  let checkbox3;
  let updating_checked_3;
  let t3;
  let code;
  let current;

  function checkbox0_checked_binding(value) {
    /*checkbox0_checked_binding*/
    ctx[4].call(null, value);
  }

  let checkbox0_props = {
    label: "Show drawer"
  };

  if (
  /*$showNav*/
  ctx[0] !== void 0) {
    checkbox0_props.checked =
    /*$showNav*/
    ctx[0];
  }

  checkbox0 = new Checkbox({
    props: checkbox0_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(checkbox0, "checked", checkbox0_checked_binding));

  function checkbox1_checked_binding(value) {
    /*checkbox1_checked_binding*/
    ctx[5].call(null, value);
  }

  let checkbox1_props = {
    label: "With elevation"
  };

  if (
  /*$elevation*/
  ctx[1] !== void 0) {
    checkbox1_props.checked =
    /*$elevation*/
    ctx[1];
  }

  checkbox1 = new Checkbox({
    props: checkbox1_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(checkbox1, "checked", checkbox1_checked_binding));

  function checkbox2_checked_binding(value) {
    /*checkbox2_checked_binding*/
    ctx[6].call(null, value);
  }

  let checkbox2_props = {
    label: "Placed on the right"
  };

  if (
  /*$right*/
  ctx[2] !== void 0) {
    checkbox2_props.checked =
    /*$right*/
    ctx[2];
  }

  checkbox2 = new Checkbox({
    props: checkbox2_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(checkbox2, "checked", checkbox2_checked_binding));

  function checkbox3_checked_binding(value) {
    /*checkbox3_checked_binding*/
    ctx[7].call(null, value);
  }

  let checkbox3_props = {
    label: "Persistent"
  };

  if (
  /*$persistent*/
  ctx[3] !== void 0) {
    checkbox3_props.checked =
    /*$persistent*/
    ctx[3];
  }

  checkbox3 = new Checkbox({
    props: checkbox3_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(checkbox3, "checked", checkbox3_checked_binding));
  code = new Code({
    props: {
      code: drawers
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(checkbox0.$$.fragment);
      t0 = space();
      create_component(checkbox1.$$.fragment);
      t1 = space();
      create_component(checkbox2.$$.fragment);
      t2 = space();
      create_component(checkbox3.$$.fragment);
      t3 = space();
      create_component(code.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(checkbox0.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(checkbox1.$$.fragment, nodes);
      t1 = claim_space(nodes);
      claim_component(checkbox2.$$.fragment, nodes);
      t2 = claim_space(nodes);
      claim_component(checkbox3.$$.fragment, nodes);
      t3 = claim_space(nodes);
      claim_component(code.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(checkbox0, target, anchor);
      insert_dev(target, t0, anchor);
      mount_component(checkbox1, target, anchor);
      insert_dev(target, t1, anchor);
      mount_component(checkbox2, target, anchor);
      insert_dev(target, t2, anchor);
      mount_component(checkbox3, target, anchor);
      insert_dev(target, t3, anchor);
      mount_component(code, target, anchor);
      current = true;
    },
    p: function update(ctx, [dirty]) {
      const checkbox0_changes = {};

      if (!updating_checked && dirty &
      /*$showNav*/
      1) {
        updating_checked = true;
        checkbox0_changes.checked =
        /*$showNav*/
        ctx[0];
        add_flush_callback(() => updating_checked = false);
      }

      checkbox0.$set(checkbox0_changes);
      const checkbox1_changes = {};

      if (!updating_checked_1 && dirty &
      /*$elevation*/
      2) {
        updating_checked_1 = true;
        checkbox1_changes.checked =
        /*$elevation*/
        ctx[1];
        add_flush_callback(() => updating_checked_1 = false);
      }

      checkbox1.$set(checkbox1_changes);
      const checkbox2_changes = {};

      if (!updating_checked_2 && dirty &
      /*$right*/
      4) {
        updating_checked_2 = true;
        checkbox2_changes.checked =
        /*$right*/
        ctx[2];
        add_flush_callback(() => updating_checked_2 = false);
      }

      checkbox2.$set(checkbox2_changes);
      const checkbox3_changes = {};

      if (!updating_checked_3 && dirty &
      /*$persistent*/
      8) {
        updating_checked_3 = true;
        checkbox3_changes.checked =
        /*$persistent*/
        ctx[3];
        add_flush_callback(() => updating_checked_3 = false);
      }

      checkbox3.$set(checkbox3_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(checkbox0.$$.fragment, local);
      transition_in(checkbox1.$$.fragment, local);
      transition_in(checkbox2.$$.fragment, local);
      transition_in(checkbox3.$$.fragment, local);
      transition_in(code.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(checkbox0.$$.fragment, local);
      transition_out(checkbox1.$$.fragment, local);
      transition_out(checkbox2.$$.fragment, local);
      transition_out(checkbox3.$$.fragment, local);
      transition_out(code.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(checkbox0, detaching);
      if (detaching) detach_dev(t0);
      destroy_component(checkbox1, detaching);
      if (detaching) detach_dev(t1);
      destroy_component(checkbox2, detaching);
      if (detaching) detach_dev(t2);
      destroy_component(checkbox3, detaching);
      if (detaching) detach_dev(t3);
      destroy_component(code, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance($$self, $$props, $$invalidate) {
  let $showNav;
  let $elevation;
  let $right;
  let $persistent;
  validate_store(showNav, "showNav");
  component_subscribe($$self, showNav, $$value => $$invalidate(0, $showNav = $$value));
  validate_store(elevation, "elevation");
  component_subscribe($$self, elevation, $$value => $$invalidate(1, $elevation = $$value));
  validate_store(right, "right");
  component_subscribe($$self, right, $$value => $$invalidate(2, $right = $$value));
  validate_store(persistent, "persistent");
  component_subscribe($$self, persistent, $$value => $$invalidate(3, $persistent = $$value));
  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Navigation_drawers> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Navigation_drawers", $$slots, []);

  function checkbox0_checked_binding(value) {
    $showNav = value;
    showNav.set($showNav);
  }

  function checkbox1_checked_binding(value) {
    $elevation = value;
    elevation.set($elevation);
  }

  function checkbox2_checked_binding(value) {
    $right = value;
    right.set($right);
  }

  function checkbox3_checked_binding(value) {
    $persistent = value;
    persistent.set($persistent);
  }

  $$self.$capture_state = () => ({
    Checkbox,
    Code,
    right,
    elevation,
    persistent,
    showNav,
    drawers,
    $showNav,
    $elevation,
    $right,
    $persistent
  });

  return [$showNav, $elevation, $right, $persistent, checkbox0_checked_binding, checkbox1_checked_binding, checkbox2_checked_binding, checkbox3_checked_binding];
}

class Navigation_drawers extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Navigation_drawers",
      options,
      id: create_fragment.name
    });
  }

}

export default Navigation_drawers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbi1kcmF3ZXJzLmQzMDNmMWIzLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL2NvbXBvbmVudHMvbmF2aWdhdGlvbi1kcmF3ZXJzLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBpbXBvcnQgQ2hlY2tib3ggZnJvbSBcImNvbXBvbmVudHMvQ2hlY2tib3hcIjtcbiAgaW1wb3J0IENvZGUgZnJvbSBcImRvY3MvQ29kZS5zdmVsdGVcIjtcblxuICBpbXBvcnQgeyByaWdodCwgZWxldmF0aW9uLCBwZXJzaXN0ZW50LCBzaG93TmF2IH0gZnJvbSBcInN0b3Jlcy5qc1wiO1xuXG4gIGltcG9ydCBkcmF3ZXJzIGZyb20gXCJleGFtcGxlcy9uYXZpZ2F0aW9uLWRyYXdlcnMudHh0XCI7XG48L3NjcmlwdD5cblxuPENoZWNrYm94XG4gIGJpbmQ6Y2hlY2tlZD17JHNob3dOYXZ9XG4gIGxhYmVsPVwiU2hvdyBkcmF3ZXJcIlxuIC8+XG48Q2hlY2tib3hcbiAgYmluZDpjaGVja2VkPXskZWxldmF0aW9ufVxuICBsYWJlbD1cIldpdGggZWxldmF0aW9uXCJcbiAvPlxuPENoZWNrYm94XG4gIGJpbmQ6Y2hlY2tlZD17JHJpZ2h0fVxuICBsYWJlbD1cIlBsYWNlZCBvbiB0aGUgcmlnaHRcIlxuIC8+XG48Q2hlY2tib3hcbiAgYmluZDpjaGVja2VkPXskcGVyc2lzdGVudH1cbiAgbGFiZWw9XCJQZXJzaXN0ZW50XCJcbiAvPlxuXG48Q29kZSBjb2RlPXtkcmF3ZXJzfSAvPlxuIl0sIm5hbWVzIjpbImN0eCIsImRyYXdlcnMiLCIkc2hvd05hdiIsIiRlbGV2YXRpb24iLCIkcmlnaHQiLCIkcGVyc2lzdGVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBVWdCQSxFQUFBQSxHQUFRLEVBQUEsQ0FBUjs7O0FBQUFBLElBQUFBLEdBQVEsRUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJUkEsRUFBQUEsR0FBVSxFQUFBLENBQVY7OztBQUFBQSxJQUFBQSxHQUFVLEVBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSVZBLEVBQUFBLEdBQU0sRUFBQSxDQUFOOzs7QUFBQUEsSUFBQUEsR0FBTSxFQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUlOQSxFQUFBQSxHQUFXLEVBQUEsQ0FBWDs7O0FBQUFBLElBQUFBLEdBQVcsRUFBQTs7Ozs7Ozs7OztZQUlmQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaEJJRCxRQUFBQSxHQUFRLEVBQUE7Ozs7Ozs7Ozs7Ozs7QUFJUkEsUUFBQUEsR0FBVSxFQUFBOzs7Ozs7Ozs7Ozs7O0FBSVZBLFFBQUFBLEdBQU0sRUFBQTs7Ozs7Ozs7Ozs7OztBQUlOQSxRQUFBQSxHQUFXLEVBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVpYRSxJQUFBQSxRQUFRLFFBQVI7Ozs7O0FBSUFDLElBQUFBLFVBQVUsUUFBVjs7Ozs7QUFJQUMsSUFBQUEsTUFBTSxRQUFOOzs7OztBQUlBQyxJQUFBQSxXQUFXLFFBQVg7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=

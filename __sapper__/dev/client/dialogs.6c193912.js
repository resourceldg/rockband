import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, G as ClassBuilder, v as validate_slots, F as assign, H as exclude_internal_props, ar as scale, ai as onMount, aj as quadIn, av as Scrim, x as create_slot, e as element, o as create_component, k as space, c as claim_element, a as children, p as claim_component, m as claim_space, b as detach_dev, g as attr_dev, f as add_location, h as insert_dev, q as mount_component, j as append_dev, B as update_slot, r as transition_in, ac as add_render_callback, ao as create_in_transition, u as transition_out, w as destroy_component, R as empty, T as group_outros, U as check_outros, C as Button, a0 as binding_callbacks, a1 as bind, a2 as add_flush_callback, t as text, l as claim_text, n as noop } from './client.798c10e3.js';
import { C as Code } from './Code.91923bdf.js';

/* src/components/Dialog/Dialog.svelte generated by Svelte v3.24.0 */
const file = "src/components/Dialog/Dialog.svelte";

const get_actions_slot_changes = dirty => ({});

const get_actions_slot_context = ctx => ({});

const get_title_slot_changes = dirty => ({});

const get_title_slot_context = ctx => ({}); // (45:0) {#if value}


function create_if_block(ctx) {
  let div4;
  let scrim;
  let t0;
  let div3;
  let div2;
  let div0;
  let t1;
  let t2;
  let div1;
  let div2_intro;
  let current;
  scrim = new Scrim({
    props: {
      opacity:
      /*opacity*/
      ctx[1]
    },
    $$inline: true
  });
  scrim.$on("click",
  /*click_handler*/
  ctx[12]);
  const title_slot_template =
  /*$$slots*/
  ctx[11].title;
  const title_slot = create_slot(title_slot_template, ctx,
  /*$$scope*/
  ctx[10], get_title_slot_context);
  const default_slot_template =
  /*$$slots*/
  ctx[11].default;
  const default_slot = create_slot(default_slot_template, ctx,
  /*$$scope*/
  ctx[10], null);
  const actions_slot_template =
  /*$$slots*/
  ctx[11].actions;
  const actions_slot = create_slot(actions_slot_template, ctx,
  /*$$scope*/
  ctx[10], get_actions_slot_context);
  const block = {
    c: function create() {
      div4 = element("div");
      create_component(scrim.$$.fragment);
      t0 = space();
      div3 = element("div");
      div2 = element("div");
      div0 = element("div");
      if (title_slot) title_slot.c();
      t1 = space();
      if (default_slot) default_slot.c();
      t2 = space();
      div1 = element("div");
      if (actions_slot) actions_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      div4 = claim_element(nodes, "DIV", {
        class: true
      });
      var div4_nodes = children(div4);
      claim_component(scrim.$$.fragment, div4_nodes);
      t0 = claim_space(div4_nodes);
      div3 = claim_element(div4_nodes, "DIV", {
        class: true
      });
      var div3_nodes = children(div3);
      div2 = claim_element(div3_nodes, "DIV", {
        class: true
      });
      var div2_nodes = children(div2);
      div0 = claim_element(div2_nodes, "DIV", {
        class: true
      });
      var div0_nodes = children(div0);
      if (title_slot) title_slot.l(div0_nodes);
      div0_nodes.forEach(detach_dev);
      t1 = claim_space(div2_nodes);
      if (default_slot) default_slot.l(div2_nodes);
      t2 = claim_space(div2_nodes);
      div1 = claim_element(div2_nodes, "DIV", {
        class: true
      });
      var div1_nodes = children(div1);
      if (actions_slot) actions_slot.l(div1_nodes);
      div1_nodes.forEach(detach_dev);
      div2_nodes.forEach(detach_dev);
      div3_nodes.forEach(detach_dev);
      div4_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div0, "class",
      /*t*/
      ctx[5]);
      add_location(div0, file, 51, 8, 1523);
      attr_dev(div1, "class",
      /*a*/
      ctx[6]);
      add_location(div1, file, 55, 8, 1611);
      attr_dev(div2, "class",
      /*c*/
      ctx[4]);
      add_location(div2, file, 48, 6, 1456);
      attr_dev(div3, "class", "h-full w-full absolute flex items-center justify-center");
      add_location(div3, file, 47, 4, 1380);
      attr_dev(div4, "class", "fixed w-full h-full top-0 left-0 z-30");
      add_location(div4, file, 45, 2, 1252);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div4, anchor);
      mount_component(scrim, div4, null);
      append_dev(div4, t0);
      append_dev(div4, div3);
      append_dev(div3, div2);
      append_dev(div2, div0);

      if (title_slot) {
        title_slot.m(div0, null);
      }

      append_dev(div2, t1);

      if (default_slot) {
        default_slot.m(div2, null);
      }

      append_dev(div2, t2);
      append_dev(div2, div1);

      if (actions_slot) {
        actions_slot.m(div1, null);
      }

      current = true;
    },
    p: function update(ctx, dirty) {
      const scrim_changes = {};
      if (dirty &
      /*opacity*/
      2) scrim_changes.opacity =
      /*opacity*/
      ctx[1];
      scrim.$set(scrim_changes);

      if (title_slot) {
        if (title_slot.p && dirty &
        /*$$scope*/
        1024) {
          update_slot(title_slot, title_slot_template, ctx,
          /*$$scope*/
          ctx[10], dirty, get_title_slot_changes, get_title_slot_context);
        }
      }

      if (!current || dirty &
      /*t*/
      32) {
        attr_dev(div0, "class",
        /*t*/
        ctx[5]);
      }

      if (default_slot) {
        if (default_slot.p && dirty &
        /*$$scope*/
        1024) {
          update_slot(default_slot, default_slot_template, ctx,
          /*$$scope*/
          ctx[10], dirty, null, null);
        }
      }

      if (actions_slot) {
        if (actions_slot.p && dirty &
        /*$$scope*/
        1024) {
          update_slot(actions_slot, actions_slot_template, ctx,
          /*$$scope*/
          ctx[10], dirty, get_actions_slot_changes, get_actions_slot_context);
        }
      }

      if (!current || dirty &
      /*a*/
      64) {
        attr_dev(div1, "class",
        /*a*/
        ctx[6]);
      }

      if (!current || dirty &
      /*c*/
      16) {
        attr_dev(div2, "class",
        /*c*/
        ctx[4]);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(scrim.$$.fragment, local);
      transition_in(title_slot, local);
      transition_in(default_slot, local);
      transition_in(actions_slot, local);

      if (!div2_intro) {
        add_render_callback(() => {
          div2_intro = create_in_transition(div2, scale,
          /*transitionProps*/
          ctx[3]);
          div2_intro.start();
        });
      }

      current = true;
    },
    o: function outro(local) {
      transition_out(scrim.$$.fragment, local);
      transition_out(title_slot, local);
      transition_out(default_slot, local);
      transition_out(actions_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div4);
      destroy_component(scrim);
      if (title_slot) title_slot.d(detaching);
      if (default_slot) default_slot.d(detaching);
      if (actions_slot) actions_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(45:0) {#if value}",
    ctx
  });
  return block;
}

function create_fragment(ctx) {
  let if_block_anchor;
  let current;
  let if_block =
  /*value*/
  ctx[0] && create_if_block(ctx);
  const block = {
    c: function create() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block) if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx, [dirty]) {
      if (
      /*value*/
      ctx[0]) {
        if (if_block) {
          if_block.p(ctx, dirty);

          if (dirty &
          /*value*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (if_block) if_block.d(detaching);
      if (detaching) detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

const classesDefault = "items-center z-50 rounded bg-white dark:bg-dark-400 p-4 elevation-4";
const titleClassesDefault = "text-lg font-bold pb-4";
const actionsClassesDefault = "flex w-full justify-end pt-4";

function instance($$self, $$props, $$invalidate) {
  let {
    value
  } = $$props;
  let {
    classes = classesDefault
  } = $$props;
  let {
    titleClasses = titleClassesDefault
  } = $$props;
  let {
    actionsClasses = actionsClassesDefault
  } = $$props;
  let {
    opacity = 0.5
  } = $$props;
  let {
    persistent = false
  } = $$props;
  let {
    transitionProps = {
      duration: 150,
      easing: quadIn,
      delay: 150
    }
  } = $$props;
  const cb = new ClassBuilder(classes, classesDefault);
  const tcb = new ClassBuilder(titleClasses, titleClassesDefault);
  const acb = new ClassBuilder(actionsClasses, actionsClassesDefault);
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Dialog", $$slots, ['title', 'default', 'actions']);

  const click_handler = () => !persistent && $$invalidate(0, value = false);

  $$self.$set = $$new_props => {
    $$invalidate(16, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
    if ("classes" in $$new_props) $$invalidate(7, classes = $$new_props.classes);
    if ("titleClasses" in $$new_props) $$invalidate(8, titleClasses = $$new_props.titleClasses);
    if ("actionsClasses" in $$new_props) $$invalidate(9, actionsClasses = $$new_props.actionsClasses);
    if ("opacity" in $$new_props) $$invalidate(1, opacity = $$new_props.opacity);
    if ("persistent" in $$new_props) $$invalidate(2, persistent = $$new_props.persistent);
    if ("transitionProps" in $$new_props) $$invalidate(3, transitionProps = $$new_props.transitionProps);
    if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
  };

  $$self.$capture_state = () => ({
    scale,
    onMount,
    quadIn,
    Scrim,
    ClassBuilder,
    classesDefault,
    titleClassesDefault,
    actionsClassesDefault,
    value,
    classes,
    titleClasses,
    actionsClasses,
    opacity,
    persistent,
    transitionProps,
    cb,
    tcb,
    acb,
    c,
    t,
    a
  });

  $$self.$inject_state = $$new_props => {
    $$invalidate(16, $$props = assign(assign({}, $$props), $$new_props));
    if ("value" in $$props) $$invalidate(0, value = $$new_props.value);
    if ("classes" in $$props) $$invalidate(7, classes = $$new_props.classes);
    if ("titleClasses" in $$props) $$invalidate(8, titleClasses = $$new_props.titleClasses);
    if ("actionsClasses" in $$props) $$invalidate(9, actionsClasses = $$new_props.actionsClasses);
    if ("opacity" in $$props) $$invalidate(1, opacity = $$new_props.opacity);
    if ("persistent" in $$props) $$invalidate(2, persistent = $$new_props.persistent);
    if ("transitionProps" in $$props) $$invalidate(3, transitionProps = $$new_props.transitionProps);
    if ("c" in $$props) $$invalidate(4, c = $$new_props.c);
    if ("t" in $$props) $$invalidate(5, t = $$new_props.t);
    if ("a" in $$props) $$invalidate(6, a = $$new_props.a);
  };

  let c;
  let t;
  let a;

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$self.$$.update = () => {
     $$invalidate(4, c = cb.flush().add(classes, true, classesDefault).add($$props.class).get());

    if ($$self.$$.dirty &
    /*titleClasses*/
    256) {
       $$invalidate(5, t = tcb.flush().add(titleClasses, true, actionsClassesDefault).get());
    }

    if ($$self.$$.dirty &
    /*actionsClasses*/
    512) {
       $$invalidate(6, a = acb.flush().add(actionsClasses, true, actionsClassesDefault).get());
    }
  };

  $$props = exclude_internal_props($$props);
  return [value, opacity, persistent, transitionProps, c, t, a, classes, titleClasses, actionsClasses, $$scope, $$slots, click_handler];
}

class Dialog extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      value: 0,
      classes: 7,
      titleClasses: 8,
      actionsClasses: 9,
      opacity: 1,
      persistent: 2,
      transitionProps: 3
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Dialog",
      options,
      id: create_fragment.name
    });
    const {
      ctx
    } = this.$$;
    const props = options.props || {};

    if (
    /*value*/
    ctx[0] === undefined && !("value" in props)) {
      console.warn("<Dialog> was created without expected prop 'value'");
    }
  }

  get value() {
    throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set value(value) {
    throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get classes() {
    throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set classes(value) {
    throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get titleClasses() {
    throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set titleClasses(value) {
    throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get actionsClasses() {
    throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set actionsClasses(value) {
    throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get opacity() {
    throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set opacity(value) {
    throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get persistent() {
    throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set persistent(value) {
    throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get transitionProps() {
    throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set transitionProps(value) {
    throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

var dialog = "<script>\n  import {\n    Dialog,\n    Button\n  } from \"smelte\";\n  \n  let showDialog = false;\n</script>\n\n<Dialog bind:value={showDialog}>\n  <h5 slot=\"title\">What do you think?</h5>\n  <div class=\"text-gray-700\">I'm not sure about today's weather.</div>\n  <div slot=\"actions\">\n    <Button text on:click={() => showDialog = false}>Disagree</Button>\n    <Button text on:click={() => showDialog = false}>Agree</Button>\n  </div>\n</Dialog>\n\n<div class=\"py-2\">\n  <Button on:click={() => showDialog = true}>Show dialog</Button>\n</div>";

/* src/routes/components/dialogs.svelte generated by Svelte v3.24.0 */
const file$1 = "src/routes/components/dialogs.svelte"; // (12:2) <h5 slot="title">

function create_title_slot_1(ctx) {
  let h5;
  let t;
  const block = {
    c: function create() {
      h5 = element("h5");
      t = text("What do you think?");
      this.h();
    },
    l: function claim(nodes) {
      h5 = claim_element(nodes, "H5", {
        slot: true
      });
      var h5_nodes = children(h5);
      t = claim_text(h5_nodes, "What do you think?");
      h5_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(h5, "slot", "title");
      add_location(h5, file$1, 11, 2, 276);
    },
    m: function mount(target, anchor) {
      insert_dev(target, h5, anchor);
      append_dev(h5, t);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(h5);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_title_slot_1.name,
    type: "slot",
    source: "(12:2) <h5 slot=\\\"title\\\">",
    ctx
  });
  return block;
} // (15:4) <Button text on:click={() => (showDialog = false)}>


function create_default_slot_7(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("Disagree");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "Disagree");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_7.name,
    type: "slot",
    source: "(15:4) <Button text on:click={() => (showDialog = false)}>",
    ctx
  });
  return block;
} // (16:4) <Button text on:click={() => (showDialog = false)}>


function create_default_slot_6(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("Agree");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "Agree");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_6.name,
    type: "slot",
    source: "(16:4) <Button text on:click={() => (showDialog = false)}>",
    ctx
  });
  return block;
} // (14:2) <div slot="actions">


function create_actions_slot_1(ctx) {
  let div;
  let button0;
  let t;
  let button1;
  let current;
  button0 = new Button({
    props: {
      text: true,
      $$slots: {
        default: [create_default_slot_7]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  button0.$on("click",
  /*click_handler*/
  ctx[2]);
  button1 = new Button({
    props: {
      text: true,
      $$slots: {
        default: [create_default_slot_6]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  button1.$on("click",
  /*click_handler_1*/
  ctx[3]);
  const block = {
    c: function create() {
      div = element("div");
      create_component(button0.$$.fragment);
      t = space();
      create_component(button1.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {
        slot: true
      });
      var div_nodes = children(div);
      claim_component(button0.$$.fragment, div_nodes);
      t = claim_space(div_nodes);
      claim_component(button1.$$.fragment, div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "slot", "actions");
      add_location(div, file$1, 13, 2, 409);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      mount_component(button0, div, null);
      append_dev(div, t);
      mount_component(button1, div, null);
      current = true;
    },
    p: function update(ctx, dirty) {
      const button0_changes = {};

      if (dirty &
      /*$$scope*/
      1024) {
        button0_changes.$$scope = {
          dirty,
          ctx
        };
      }

      button0.$set(button0_changes);
      const button1_changes = {};

      if (dirty &
      /*$$scope*/
      1024) {
        button1_changes.$$scope = {
          dirty,
          ctx
        };
      }

      button1.$set(button1_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(button0.$$.fragment, local);
      transition_in(button1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(button0.$$.fragment, local);
      transition_out(button1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div);
      destroy_component(button0);
      destroy_component(button1);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_actions_slot_1.name,
    type: "slot",
    source: "(14:2) <div slot=\\\"actions\\\">",
    ctx
  });
  return block;
} // (11:0) <Dialog bind:value={showDialog}>


function create_default_slot_5(ctx) {
  let t0;
  let div;
  let t1;
  let t2;
  const block = {
    c: function create() {
      t0 = space();
      div = element("div");
      t1 = text("I'm not sure about today's weather.");
      t2 = space();
      this.h();
    },
    l: function claim(nodes) {
      t0 = claim_space(nodes);
      div = claim_element(nodes, "DIV", {
        class: true
      });
      var div_nodes = children(div);
      t1 = claim_text(div_nodes, "I'm not sure about today's weather.");
      div_nodes.forEach(detach_dev);
      t2 = claim_space(nodes);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "text-gray-700 dark:text-gray-100");
      add_location(div, file$1, 12, 2, 319);
    },
    m: function mount(target, anchor) {
      insert_dev(target, t0, anchor);
      insert_dev(target, div, anchor);
      append_dev(div, t1);
      insert_dev(target, t2, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(t0);
      if (detaching) detach_dev(div);
      if (detaching) detach_dev(t2);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_5.name,
    type: "slot",
    source: "(11:0) <Dialog bind:value={showDialog}>",
    ctx
  });
  return block;
} // (21:2) <h5 slot="title">


function create_title_slot(ctx) {
  let h5;
  let t;
  const block = {
    c: function create() {
      h5 = element("h5");
      t = text("Do you think you can close me by clicking outside?");
      this.h();
    },
    l: function claim(nodes) {
      h5 = claim_element(nodes, "H5", {
        slot: true
      });
      var h5_nodes = children(h5);
      t = claim_text(h5_nodes, "Do you think you can close me by clicking outside?");
      h5_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(h5, "slot", "title");
      add_location(h5, file$1, 20, 2, 640);
    },
    m: function mount(target, anchor) {
      insert_dev(target, h5, anchor);
      append_dev(h5, t);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(h5);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_title_slot.name,
    type: "slot",
    source: "(21:2) <h5 slot=\\\"title\\\">",
    ctx
  });
  return block;
} // (24:4) <Button text on:click={() => (showDialog2 = false)}>


function create_default_slot_4(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("Yes");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "Yes");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_4.name,
    type: "slot",
    source: "(24:4) <Button text on:click={() => (showDialog2 = false)}>",
    ctx
  });
  return block;
} // (25:4) <Button text on:click={() => (showDialog2 = false)}>


function create_default_slot_3(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("No");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "No");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_3.name,
    type: "slot",
    source: "(25:4) <Button text on:click={() => (showDialog2 = false)}>",
    ctx
  });
  return block;
} // (23:2) <div slot="actions">


function create_actions_slot(ctx) {
  let div;
  let button0;
  let t;
  let button1;
  let current;
  button0 = new Button({
    props: {
      text: true,
      $$slots: {
        default: [create_default_slot_4]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  button0.$on("click",
  /*click_handler_2*/
  ctx[5]);
  button1 = new Button({
    props: {
      text: true,
      $$slots: {
        default: [create_default_slot_3]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  button1.$on("click",
  /*click_handler_3*/
  ctx[6]);
  const block = {
    c: function create() {
      div = element("div");
      create_component(button0.$$.fragment);
      t = space();
      create_component(button1.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {
        slot: true
      });
      var div_nodes = children(div);
      claim_component(button0.$$.fragment, div_nodes);
      t = claim_space(div_nodes);
      claim_component(button1.$$.fragment, div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "slot", "actions");
      add_location(div, file$1, 22, 2, 779);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      mount_component(button0, div, null);
      append_dev(div, t);
      mount_component(button1, div, null);
      current = true;
    },
    p: function update(ctx, dirty) {
      const button0_changes = {};

      if (dirty &
      /*$$scope*/
      1024) {
        button0_changes.$$scope = {
          dirty,
          ctx
        };
      }

      button0.$set(button0_changes);
      const button1_changes = {};

      if (dirty &
      /*$$scope*/
      1024) {
        button1_changes.$$scope = {
          dirty,
          ctx
        };
      }

      button1.$set(button1_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(button0.$$.fragment, local);
      transition_in(button1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(button0.$$.fragment, local);
      transition_out(button1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div);
      destroy_component(button0);
      destroy_component(button1);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_actions_slot.name,
    type: "slot",
    source: "(23:2) <div slot=\\\"actions\\\">",
    ctx
  });
  return block;
} // (20:0) <Dialog persistent bind:value={showDialog2}>


function create_default_slot_2(ctx) {
  let t0;
  let div;
  let t1;
  let t2;
  const block = {
    c: function create() {
      t0 = space();
      div = element("div");
      t1 = text("Doubt it.");
      t2 = space();
      this.h();
    },
    l: function claim(nodes) {
      t0 = claim_space(nodes);
      div = claim_element(nodes, "DIV", {
        class: true
      });
      var div_nodes = children(div);
      t1 = claim_text(div_nodes, "Doubt it.");
      div_nodes.forEach(detach_dev);
      t2 = claim_space(nodes);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "text-gray-700 dark:text-gray-100");
      add_location(div, file$1, 21, 2, 715);
    },
    m: function mount(target, anchor) {
      insert_dev(target, t0, anchor);
      insert_dev(target, div, anchor);
      append_dev(div, t1);
      insert_dev(target, t2, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(t0);
      if (detaching) detach_dev(div);
      if (detaching) detach_dev(t2);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_2.name,
    type: "slot",
    source: "(20:0) <Dialog persistent bind:value={showDialog2}>",
    ctx
  });
  return block;
} // (30:2) <Button on:click={() => (showDialog = true)}>


function create_default_slot_1(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("Show dialog");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "Show dialog");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_1.name,
    type: "slot",
    source: "(30:2) <Button on:click={() => (showDialog = true)}>",
    ctx
  });
  return block;
} // (34:2) <Button color="secondary" on:click={() => (showDialog2 = true)}>


function create_default_slot(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("Show persistent dialog");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "Show persistent dialog");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(34:2) <Button color=\\\"secondary\\\" on:click={() => (showDialog2 = true)}>",
    ctx
  });
  return block;
}

function create_fragment$1(ctx) {
  let dialog0;
  let updating_value;
  let t0;
  let dialog1;
  let updating_value_1;
  let t1;
  let div0;
  let button0;
  let t2;
  let div1;
  let button1;
  let t3;
  let code;
  let current;

  function dialog0_value_binding(value) {
    /*dialog0_value_binding*/
    ctx[4].call(null, value);
  }

  let dialog0_props = {
    $$slots: {
      default: [create_default_slot_5],
      actions: [create_actions_slot_1],
      title: [create_title_slot_1]
    },
    $$scope: {
      ctx
    }
  };

  if (
  /*showDialog*/
  ctx[0] !== void 0) {
    dialog0_props.value =
    /*showDialog*/
    ctx[0];
  }

  dialog0 = new Dialog({
    props: dialog0_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(dialog0, "value", dialog0_value_binding));

  function dialog1_value_binding(value) {
    /*dialog1_value_binding*/
    ctx[7].call(null, value);
  }

  let dialog1_props = {
    persistent: true,
    $$slots: {
      default: [create_default_slot_2],
      actions: [create_actions_slot],
      title: [create_title_slot]
    },
    $$scope: {
      ctx
    }
  };

  if (
  /*showDialog2*/
  ctx[1] !== void 0) {
    dialog1_props.value =
    /*showDialog2*/
    ctx[1];
  }

  dialog1 = new Dialog({
    props: dialog1_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(dialog1, "value", dialog1_value_binding));
  button0 = new Button({
    props: {
      $$slots: {
        default: [create_default_slot_1]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  button0.$on("click",
  /*click_handler_4*/
  ctx[8]);
  button1 = new Button({
    props: {
      color: "secondary",
      $$slots: {
        default: [create_default_slot]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  button1.$on("click",
  /*click_handler_5*/
  ctx[9]);
  code = new Code({
    props: {
      code: dialog
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(dialog0.$$.fragment);
      t0 = space();
      create_component(dialog1.$$.fragment);
      t1 = space();
      div0 = element("div");
      create_component(button0.$$.fragment);
      t2 = space();
      div1 = element("div");
      create_component(button1.$$.fragment);
      t3 = space();
      create_component(code.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      claim_component(dialog0.$$.fragment, nodes);
      t0 = claim_space(nodes);
      claim_component(dialog1.$$.fragment, nodes);
      t1 = claim_space(nodes);
      div0 = claim_element(nodes, "DIV", {
        class: true
      });
      var div0_nodes = children(div0);
      claim_component(button0.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach_dev);
      t2 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", {
        class: true
      });
      var div1_nodes = children(div1);
      claim_component(button1.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach_dev);
      t3 = claim_space(nodes);
      claim_component(code.$$.fragment, nodes);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div0, "class", "py-2");
      add_location(div0, file$1, 28, 0, 957);
      attr_dev(div1, "class", "py-2");
      add_location(div1, file$1, 32, 0, 1052);
    },
    m: function mount(target, anchor) {
      mount_component(dialog0, target, anchor);
      insert_dev(target, t0, anchor);
      mount_component(dialog1, target, anchor);
      insert_dev(target, t1, anchor);
      insert_dev(target, div0, anchor);
      mount_component(button0, div0, null);
      insert_dev(target, t2, anchor);
      insert_dev(target, div1, anchor);
      mount_component(button1, div1, null);
      insert_dev(target, t3, anchor);
      mount_component(code, target, anchor);
      current = true;
    },
    p: function update(ctx, [dirty]) {
      const dialog0_changes = {};

      if (dirty &
      /*$$scope, showDialog*/
      1025) {
        dialog0_changes.$$scope = {
          dirty,
          ctx
        };
      }

      if (!updating_value && dirty &
      /*showDialog*/
      1) {
        updating_value = true;
        dialog0_changes.value =
        /*showDialog*/
        ctx[0];
        add_flush_callback(() => updating_value = false);
      }

      dialog0.$set(dialog0_changes);
      const dialog1_changes = {};

      if (dirty &
      /*$$scope, showDialog2*/
      1026) {
        dialog1_changes.$$scope = {
          dirty,
          ctx
        };
      }

      if (!updating_value_1 && dirty &
      /*showDialog2*/
      2) {
        updating_value_1 = true;
        dialog1_changes.value =
        /*showDialog2*/
        ctx[1];
        add_flush_callback(() => updating_value_1 = false);
      }

      dialog1.$set(dialog1_changes);
      const button0_changes = {};

      if (dirty &
      /*$$scope*/
      1024) {
        button0_changes.$$scope = {
          dirty,
          ctx
        };
      }

      button0.$set(button0_changes);
      const button1_changes = {};

      if (dirty &
      /*$$scope*/
      1024) {
        button1_changes.$$scope = {
          dirty,
          ctx
        };
      }

      button1.$set(button1_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(dialog0.$$.fragment, local);
      transition_in(dialog1.$$.fragment, local);
      transition_in(button0.$$.fragment, local);
      transition_in(button1.$$.fragment, local);
      transition_in(code.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(dialog0.$$.fragment, local);
      transition_out(dialog1.$$.fragment, local);
      transition_out(button0.$$.fragment, local);
      transition_out(button1.$$.fragment, local);
      transition_out(code.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(dialog0, detaching);
      if (detaching) detach_dev(t0);
      destroy_component(dialog1, detaching);
      if (detaching) detach_dev(t1);
      if (detaching) detach_dev(div0);
      destroy_component(button0);
      if (detaching) detach_dev(t2);
      if (detaching) detach_dev(div1);
      destroy_component(button1);
      if (detaching) detach_dev(t3);
      destroy_component(code, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$1.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance$1($$self, $$props, $$invalidate) {
  let showDialog = false;
  let showDialog2 = false;
  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Dialogs> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Dialogs", $$slots, []);

  const click_handler = () => $$invalidate(0, showDialog = false);

  const click_handler_1 = () => $$invalidate(0, showDialog = false);

  function dialog0_value_binding(value) {
    showDialog = value;
    $$invalidate(0, showDialog);
  }

  const click_handler_2 = () => $$invalidate(1, showDialog2 = false);

  const click_handler_3 = () => $$invalidate(1, showDialog2 = false);

  function dialog1_value_binding(value) {
    showDialog2 = value;
    $$invalidate(1, showDialog2);
  }

  const click_handler_4 = () => $$invalidate(0, showDialog = true);

  const click_handler_5 = () => $$invalidate(1, showDialog2 = true);

  $$self.$capture_state = () => ({
    Button,
    Dialog,
    Code,
    dialog,
    showDialog,
    showDialog2
  });

  $$self.$inject_state = $$props => {
    if ("showDialog" in $$props) $$invalidate(0, showDialog = $$props.showDialog);
    if ("showDialog2" in $$props) $$invalidate(1, showDialog2 = $$props.showDialog2);
  };

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  return [showDialog, showDialog2, click_handler, click_handler_1, dialog0_value_binding, click_handler_2, click_handler_3, dialog1_value_binding, click_handler_4, click_handler_5];
}

class Dialogs extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$1, create_fragment$1, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Dialogs",
      options,
      id: create_fragment$1.name
    });
  }

}

export default Dialogs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

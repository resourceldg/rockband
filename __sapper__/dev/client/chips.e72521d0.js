import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, e as element, j as append_dev, K as createEventDispatcher, G as ClassBuilder, a7 as filterProps, v as validate_slots, F as assign, H as exclude_internal_props, ar as scale, V as r, a8 as utils, L as Icon, x as create_slot, k as space, c as claim_element, a as children, m as claim_space, b as detach_dev, g as attr_dev, f as add_location, I as set_attributes, a9 as toggle_class, h as insert_dev, M as listen_dev, W as action_destroyer, r as transition_in, T as group_outros, u as transition_out, U as check_outros, B as update_slot, J as get_spread_update, ap as create_out_transition, O as run_all, o as create_component, p as claim_component, q as mount_component, w as destroy_component, an as stop_propagation, R as empty, Q as bubble, t as text, l as claim_text, z as set_data_dev, C as Button, a0 as binding_callbacks, a1 as bind, a2 as add_flush_callback, n as noop } from './client.b35f7c39.js';
import { C as Code } from './Code.b0cc587e.js';
import { S as Snackbar } from './index.22e00675.js';

/* src/components/Chip/Chip.svelte generated by Svelte v3.24.0 */
const file = "src/components/Chip/Chip.svelte";

function add_css() {
  var style = element("style");
  style.id = "svelte-ixci48-style";
  style.textContent = ".p-1\\/2.svelte-ixci48{padding:0.125rem}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hpcC5zdmVsdGUiLCJzb3VyY2VzIjpbIkNoaXAuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcbiAgaW1wb3J0IHsgc2NhbGUgfSBmcm9tIFwic3ZlbHRlL3RyYW5zaXRpb25cIjtcbiAgaW1wb3J0IGNyZWF0ZVJpcHBsZSBmcm9tIFwiLi4vUmlwcGxlL3JpcHBsZS5qc1wiO1xuICBpbXBvcnQgdXRpbHMsIHsgQ2xhc3NCdWlsZGVyLCBmaWx0ZXJQcm9wcyB9IGZyb20gXCIuLi8uLi91dGlscy9jbGFzc2VzLmpzXCI7XG5cbiAgaW1wb3J0IEljb24gZnJvbSBcIi4uL0ljb25cIjtcblxuXG5cbiAgZXhwb3J0IGxldCByZW1vdmFibGUgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBpY29uID0gXCJcIjtcbiAgZXhwb3J0IGxldCBvdXRsaW5lZCA9IGZhbHNlO1xuICBleHBvcnQgbGV0IHNlbGVjdGVkID0gZmFsc2U7XG4gIGV4cG9ydCBsZXQgc2VsZWN0YWJsZSA9IHRydWU7XG4gIGV4cG9ydCBsZXQgY29sb3IgPSBcInByaW1hcnlcIjtcbiAgZXhwb3J0IGxldCByZW1vdmUgPSBcIlwiO1xuICBleHBvcnQgbGV0IGFkZCA9IFwiXCI7XG4gIGV4cG9ydCBsZXQgcmVwbGFjZSA9IHt9O1xuXG4gICQ6IHJpcHBsZSA9IGNyZWF0ZVJpcHBsZShjb2xvcik7XG5cbiAgbGV0IHZhbHVlID0gdHJ1ZTtcblxuICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gIGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgIGRpc3BhdGNoKFwiY2xvc2VcIik7XG4gICAgdmFsdWUgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdCgpIHtcbiAgICBpZiAoIXNlbGVjdGFibGUpIHJldHVybjtcblxuICAgIHNlbGVjdGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IHsgYmcsIHR4dCwgYm9yZGVyIH0gPSB1dGlscyhjb2xvcik7XG5cbiAgY29uc3QgY2IgPSBuZXcgQ2xhc3NCdWlsZGVyKCk7XG5cbiAgJDogY2xhc3NlcyA9IGNiXG4gICAgLmZsdXNoKClcbiAgICAuYWRkKCdyZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW4gZmxleCBpdGVtcy1jZW50ZXIgcm91bmRlZC1mdWxsIHB4LTIgcHktMScpXG4gICAgLmFkZCgnYmctdHJhbnNwYXJlbnQgYm9yZGVyJywgb3V0bGluZWQpXG4gICAgLmFkZCgnYm9yZGVyLWdyYXktNDAwIGJvcmRlci1zb2xpZCBob3ZlcjpiZy1ncmF5LTUwIGRhcmstaG92ZXI6YmctZGFyay00MDAgYmctZ3JheS0zMDAgZGFyazpiZy1kYXJrLTYwMCcsICFzZWxlY3RlZClcbiAgICAuYWRkKGAke2JvcmRlcigpfSBkYXJrOiR7Ym9yZGVyKCc4MDAnKX0gJHt0eHQoKX0gJHtiZygxMDApfSBob3Zlcjoke2JnKDUwKX1gLCBzZWxlY3RlZClcbiAgICAucmVtb3ZlKHJlbW92ZSlcbiAgICAucmVwbGFjZShyZXBsYWNlKVxuICAgIC5hZGQoYWRkKVxuICAgIC5nZXQoKTtcblxuICBjb25zdCBwcm9wcyA9IGZpbHRlclByb3BzKFtcbiAgICAncmVtb3ZhYmxlJyxcbiAgICAnaWNvbicsXG4gICAgJ291dGxpbmVkJyxcbiAgICAnc2VsZWN0ZWQnLFxuICAgICdzZWxlY3RhYmxlJyxcbiAgICAnY29sb3InLFxuICBdLCAkJHByb3BzKTtcblxuICAkOiBpY29uQ2xhc3MgPSBzZWxlY3RlZCA/IGBob3Zlcjoke2JnKDMwMCl9ICR7YmcoNDAwKX1gIDogXCJob3ZlcjpiZy1ncmF5LTQwMCBiZy1ncmF5LTUwMCBkYXJrOmJnLWdyYXktODAwXCI7XG5cbiAgICQ6IGMgPSBjYlxuICAgICAgLmZsdXNoKClcbiAgICAgIC5hZGQoJCRwcm9wcy5jbGFzcylcbiAgICAgIC5nZXQoKTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIC5wLTFcXC8yIHtcbiAgICBwYWRkaW5nOiAwLjEyNXJlbTtcbiAgfVxuPC9zdHlsZT5cblxueyNpZiB2YWx1ZX1cbiAgPHNwYW4gY2xhc3M9XCJ7Y30gbXgtMSBpbmxpbmUtYmxvY2tcIiBvdXQ6c2NhbGU9e3sgZHVyYXRpb246IDEwMCB9fT5cbiAgICA8YnV0dG9uXG4gICAgICBjbGFzcz17Y2xhc3Nlc31cbiAgICAgIG9uOmNsaWNrXG4gICAgICB1c2U6cmlwcGxlXG4gICAgICB7Li4ucHJvcHN9XG4gICAgICBvbjpjbGljaz17c2VsZWN0fT5cbiAgICAgIHsjaWYgaWNvbn1cbiAgICAgICAgPEljb24gc21hbGwgY2xhc3M9e3NlbGVjdGVkID8gdHh0KDQwMCkgOiAndGV4dC1ncmF5LTYwMCd9PlxuICAgICAgICAgIHtpY29ufVxuICAgICAgICA8L0ljb24+XG4gICAgICB7L2lmfVxuICAgICAgPHNwYW4gY2xhc3M9XCJweC0yIHRleHQtc21cIj5cbiAgICAgICAgPHNsb3QgLz5cbiAgICAgIDwvc3Bhbj5cbiAgICAgIHsjaWYgcmVtb3ZhYmxlfVxuICAgICAgICA8c3BhblxuICAgICAgICAgIGNsYXNzPVwicm91bmRlZC1mdWxsIHAtMS8yIGlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBjdXJzb3ItcG9pbnRlciB7aWNvbkNsYXNzfVwiXG4gICAgICAgICAgb246Y2xpY2t8c3RvcFByb3BhZ2F0aW9uPXtjbG9zZX0+XG4gICAgICAgICAgPEljb24gY2xhc3M9XCJ0ZXh0LXdoaXRlIGRhcms6dGV4dC13aGl0ZVwiIHhzPmNsZWFyPC9JY29uPlxuICAgICAgICA8L3NwYW4+XG4gICAgICB7L2lmfVxuICAgIDwvYnV0dG9uPlxuICA8L3NwYW4+XG57L2lmfVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNFRSxPQUFPLGNBQUMsQ0FBQyxBQUNQLE9BQU8sQ0FBRSxRQUFRLEFBQ25CLENBQUMifQ== */";
  append_dev(document.head, style);
} // (76:0) {#if value}


function create_if_block(ctx) {
  let span1;
  let button;
  let t0;
  let span0;
  let t1;
  let ripple_action;
  let span1_class_value;
  let span1_outro;
  let current;
  let mounted;
  let dispose;
  let if_block0 =
  /*icon*/
  ctx[2] && create_if_block_2(ctx);
  const default_slot_template =
  /*$$slots*/
  ctx[18].default;
  const default_slot = create_slot(default_slot_template, ctx,
  /*$$scope*/
  ctx[20], null);
  let if_block1 =
  /*removable*/
  ctx[1] && create_if_block_1(ctx);
  let button_levels = [{
    class:
    /*classes*/
    ctx[5]
  },
  /*props*/
  ctx[11]];
  let button_data = {};

  for (let i = 0; i < button_levels.length; i += 1) {
    button_data = assign(button_data, button_levels[i]);
  }

  const block = {
    c: function create() {
      span1 = element("span");
      button = element("button");
      if (if_block0) if_block0.c();
      t0 = space();
      span0 = element("span");
      if (default_slot) default_slot.c();
      t1 = space();
      if (if_block1) if_block1.c();
      this.h();
    },
    l: function claim(nodes) {
      span1 = claim_element(nodes, "SPAN", {
        class: true
      });
      var span1_nodes = children(span1);
      button = claim_element(span1_nodes, "BUTTON", {
        class: true
      });
      var button_nodes = children(button);
      if (if_block0) if_block0.l(button_nodes);
      t0 = claim_space(button_nodes);
      span0 = claim_element(button_nodes, "SPAN", {
        class: true
      });
      var span0_nodes = children(span0);
      if (default_slot) default_slot.l(span0_nodes);
      span0_nodes.forEach(detach_dev);
      t1 = claim_space(button_nodes);
      if (if_block1) if_block1.l(button_nodes);
      button_nodes.forEach(detach_dev);
      span1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(span0, "class", "px-2 text-sm");
      add_location(span0, file, 88, 6, 1995);
      set_attributes(button, button_data);
      toggle_class(button, "svelte-ixci48", true);
      add_location(button, file, 77, 4, 1756);
      attr_dev(span1, "class", span1_class_value = "" + (
      /*c*/
      ctx[7] + " mx-1 inline-block" + " svelte-ixci48"));
      add_location(span1, file, 76, 2, 1685);
    },
    m: function mount(target, anchor) {
      insert_dev(target, span1, anchor);
      append_dev(span1, button);
      if (if_block0) if_block0.m(button, null);
      append_dev(button, t0);
      append_dev(button, span0);

      if (default_slot) {
        default_slot.m(span0, null);
      }

      append_dev(button, t1);
      if (if_block1) if_block1.m(button, null);
      current = true;

      if (!mounted) {
        dispose = [listen_dev(button, "click",
        /*click_handler*/
        ctx[19], false, false, false), action_destroyer(ripple_action =
        /*ripple*/
        ctx[4].call(null, button)), listen_dev(button, "click",
        /*select*/
        ctx[9], false, false, false)];
        mounted = true;
      }
    },
    p: function update(ctx, dirty) {
      if (
      /*icon*/
      ctx[2]) {
        if (if_block0) {
          if_block0.p(ctx, dirty);

          if (dirty &
          /*icon*/
          4) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_2(ctx);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(button, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }

      if (default_slot) {
        if (default_slot.p && dirty &
        /*$$scope*/
        1048576) {
          update_slot(default_slot, default_slot_template, ctx,
          /*$$scope*/
          ctx[20], dirty, null, null);
        }
      }

      if (
      /*removable*/
      ctx[1]) {
        if (if_block1) {
          if_block1.p(ctx, dirty);

          if (dirty &
          /*removable*/
          2) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_1(ctx);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(button, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }

      set_attributes(button, button_data = get_spread_update(button_levels, [(!current || dirty &
      /*classes*/
      32) && {
        class:
        /*classes*/
        ctx[5]
      },
      /*props*/
      ctx[11]]));
      toggle_class(button, "svelte-ixci48", true);

      if (!current || dirty &
      /*c*/
      128 && span1_class_value !== (span1_class_value = "" + (
      /*c*/
      ctx[7] + " mx-1 inline-block" + " svelte-ixci48"))) {
        attr_dev(span1, "class", span1_class_value);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block0);
      transition_in(default_slot, local);
      transition_in(if_block1);
      if (span1_outro) span1_outro.end(1);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block0);
      transition_out(default_slot, local);
      transition_out(if_block1);
      span1_outro = create_out_transition(span1, scale, {
        duration: 100
      });
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(span1);
      if (if_block0) if_block0.d();
      if (default_slot) default_slot.d(detaching);
      if (if_block1) if_block1.d();
      if (detaching && span1_outro) span1_outro.end();
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(76:0) {#if value}",
    ctx
  });
  return block;
} // (84:6) {#if icon}


function create_if_block_2(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon({
    props: {
      small: true,
      class:
      /*selected*/
      ctx[0] ?
      /*txt*/
      ctx[10](400) : "text-gray-600",
      $$slots: {
        default: [create_default_slot_1]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(icon_1.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(icon_1.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(icon_1, target, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      const icon_1_changes = {};
      if (dirty &
      /*selected*/
      1) icon_1_changes.class =
      /*selected*/
      ctx[0] ?
      /*txt*/
      ctx[10](400) : "text-gray-600";

      if (dirty &
      /*$$scope, icon*/
      1048580) {
        icon_1_changes.$$scope = {
          dirty,
          ctx
        };
      }

      icon_1.$set(icon_1_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(icon_1, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_2.name,
    type: "if",
    source: "(84:6) {#if icon}",
    ctx
  });
  return block;
} // (85:8) <Icon small class={selected ? txt(400) : 'text-gray-600'}>


function create_default_slot_1(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text(
      /*icon*/
      ctx[2]);
    },
    l: function claim(nodes) {
      t = claim_text(nodes,
      /*icon*/
      ctx[2]);
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    p: function update(ctx, dirty) {
      if (dirty &
      /*icon*/
      4) set_data_dev(t,
      /*icon*/
      ctx[2]);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_1.name,
    type: "slot",
    source: "(85:8) <Icon small class={selected ? txt(400) : 'text-gray-600'}>",
    ctx
  });
  return block;
} // (92:6) {#if removable}


function create_if_block_1(ctx) {
  let span;
  let icon_1;
  let span_class_value;
  let current;
  let mounted;
  let dispose;
  icon_1 = new Icon({
    props: {
      class: "text-white dark:text-white",
      xs: true,
      $$slots: {
        default: [create_default_slot]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      span = element("span");
      create_component(icon_1.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      span = claim_element(nodes, "SPAN", {
        class: true
      });
      var span_nodes = children(span);
      claim_component(icon_1.$$.fragment, span_nodes);
      span_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(span, "class", span_class_value = "rounded-full p-1/2 inline-flex items-center cursor-pointer " +
      /*iconClass*/
      ctx[6] + " svelte-ixci48");
      add_location(span, file, 92, 8, 2084);
    },
    m: function mount(target, anchor) {
      insert_dev(target, span, anchor);
      mount_component(icon_1, span, null);
      current = true;

      if (!mounted) {
        dispose = listen_dev(span, "click", stop_propagation(
        /*close*/
        ctx[8]), false, false, true);
        mounted = true;
      }
    },
    p: function update(ctx, dirty) {
      const icon_1_changes = {};

      if (dirty &
      /*$$scope*/
      1048576) {
        icon_1_changes.$$scope = {
          dirty,
          ctx
        };
      }

      icon_1.$set(icon_1_changes);

      if (!current || dirty &
      /*iconClass*/
      64 && span_class_value !== (span_class_value = "rounded-full p-1/2 inline-flex items-center cursor-pointer " +
      /*iconClass*/
      ctx[6] + " svelte-ixci48")) {
        attr_dev(span, "class", span_class_value);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(icon_1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(icon_1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(span);
      destroy_component(icon_1);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(92:6) {#if removable}",
    ctx
  });
  return block;
} // (96:10) <Icon class="text-white dark:text-white" xs>


function create_default_slot(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("clear");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "clear");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(96:10) <Icon class=\\\"text-white dark:text-white\\\" xs>",
    ctx
  });
  return block;
}

function create_fragment(ctx) {
  let if_block_anchor;
  let current;
  let if_block =
  /*value*/
  ctx[3] && create_if_block(ctx);
  const block = {
    c: function create() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block) if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx, [dirty]) {
      if (
      /*value*/
      ctx[3]) {
        if (if_block) {
          if_block.p(ctx, dirty);

          if (dirty &
          /*value*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (if_block) if_block.d(detaching);
      if (detaching) detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance($$self, $$props, $$invalidate) {
  let {
    removable = false
  } = $$props;
  let {
    icon = ""
  } = $$props;
  let {
    outlined = false
  } = $$props;
  let {
    selected = false
  } = $$props;
  let {
    selectable = true
  } = $$props;
  let {
    color = "primary"
  } = $$props;
  let {
    remove = ""
  } = $$props;
  let {
    add = ""
  } = $$props;
  let {
    replace = {}
  } = $$props;
  let value = true;
  const dispatch = createEventDispatcher();

  function close() {
    dispatch("close");
    $$invalidate(3, value = false);
  }

  function select() {
    if (!selectable) return;
    $$invalidate(0, selected = true);
  }

  const {
    bg,
    txt,
    border
  } = utils(color);
  const cb = new ClassBuilder();
  const props = filterProps(["removable", "icon", "outlined", "selected", "selectable", "color"], $$props);
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Chip", $$slots, ['default']);

  function click_handler(event) {
    bubble($$self, event);
  }

  $$self.$set = $$new_props => {
    $$invalidate(25, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("removable" in $$new_props) $$invalidate(1, removable = $$new_props.removable);
    if ("icon" in $$new_props) $$invalidate(2, icon = $$new_props.icon);
    if ("outlined" in $$new_props) $$invalidate(12, outlined = $$new_props.outlined);
    if ("selected" in $$new_props) $$invalidate(0, selected = $$new_props.selected);
    if ("selectable" in $$new_props) $$invalidate(13, selectable = $$new_props.selectable);
    if ("color" in $$new_props) $$invalidate(14, color = $$new_props.color);
    if ("remove" in $$new_props) $$invalidate(15, remove = $$new_props.remove);
    if ("add" in $$new_props) $$invalidate(16, add = $$new_props.add);
    if ("replace" in $$new_props) $$invalidate(17, replace = $$new_props.replace);
    if ("$$scope" in $$new_props) $$invalidate(20, $$scope = $$new_props.$$scope);
  };

  $$self.$capture_state = () => ({
    createEventDispatcher,
    scale,
    createRipple: r,
    utils,
    ClassBuilder,
    filterProps,
    Icon,
    removable,
    icon,
    outlined,
    selected,
    selectable,
    color,
    remove,
    add,
    replace,
    value,
    dispatch,
    close,
    select,
    bg,
    txt,
    border,
    cb,
    props,
    ripple,
    classes,
    iconClass,
    c
  });

  $$self.$inject_state = $$new_props => {
    $$invalidate(25, $$props = assign(assign({}, $$props), $$new_props));
    if ("removable" in $$props) $$invalidate(1, removable = $$new_props.removable);
    if ("icon" in $$props) $$invalidate(2, icon = $$new_props.icon);
    if ("outlined" in $$props) $$invalidate(12, outlined = $$new_props.outlined);
    if ("selected" in $$props) $$invalidate(0, selected = $$new_props.selected);
    if ("selectable" in $$props) $$invalidate(13, selectable = $$new_props.selectable);
    if ("color" in $$props) $$invalidate(14, color = $$new_props.color);
    if ("remove" in $$props) $$invalidate(15, remove = $$new_props.remove);
    if ("add" in $$props) $$invalidate(16, add = $$new_props.add);
    if ("replace" in $$props) $$invalidate(17, replace = $$new_props.replace);
    if ("value" in $$props) $$invalidate(3, value = $$new_props.value);
    if ("ripple" in $$props) $$invalidate(4, ripple = $$new_props.ripple);
    if ("classes" in $$props) $$invalidate(5, classes = $$new_props.classes);
    if ("iconClass" in $$props) $$invalidate(6, iconClass = $$new_props.iconClass);
    if ("c" in $$props) $$invalidate(7, c = $$new_props.c);
  };

  let ripple;
  let classes;
  let iconClass;
  let c;

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*color*/
    16384) {
       $$invalidate(4, ripple = r(color));
    }

    if ($$self.$$.dirty &
    /*outlined, selected, remove, replace, add*/
    233473) {
       $$invalidate(5, classes = cb.flush().add("relative overflow-hidden flex items-center rounded-full px-2 py-1").add("bg-transparent border", outlined).add("border-gray-400 border-solid hover:bg-gray-50 dark-hover:bg-dark-400 bg-gray-300 dark:bg-dark-600", !selected).add(`${border()} dark:${border("800")} ${txt()} ${bg(100)} hover:${bg(50)}`, selected).remove(remove).replace(replace).add(add).get());
    }

    if ($$self.$$.dirty &
    /*selected*/
    1) {
       $$invalidate(6, iconClass = selected ? `hover:${bg(300)} ${bg(400)}` : "hover:bg-gray-400 bg-gray-500 dark:bg-gray-800");
    }

     $$invalidate(7, c = cb.flush().add($$props.class).get());
  };

  $$props = exclude_internal_props($$props);
  return [selected, removable, icon, value, ripple, classes, iconClass, c, close, select, txt, props, outlined, selectable, color, remove, add, replace, $$slots, click_handler, $$scope];
}

class Chip extends SvelteComponentDev {
  constructor(options) {
    super(options);
    if (!document.getElementById("svelte-ixci48-style")) add_css();
    init(this, options, instance, create_fragment, safe_not_equal, {
      removable: 1,
      icon: 2,
      outlined: 12,
      selected: 0,
      selectable: 13,
      color: 14,
      remove: 15,
      add: 16,
      replace: 17
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Chip",
      options,
      id: create_fragment.name
    });
  }

  get removable() {
    throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set removable(value) {
    throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get icon() {
    throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set icon(value) {
    throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get outlined() {
    throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set outlined(value) {
    throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get selected() {
    throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set selected(value) {
    throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get selectable() {
    throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set selectable(value) {
    throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get color() {
    throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set color(value) {
    throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get remove() {
    throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set remove(value) {
    throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get add() {
    throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set add(value) {
    throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get replace() {
    throw new Error("<Chip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set replace(value) {
    throw new Error("<Chip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

var chip = "<script>\n  import { Chip } from \"smelte\";\n\n  let closed = false;\n  let clicked = false;\n</script>\n\n<Chip\n  icon=\"face\"\n  removable\n  selectable\n  on:close={() => closed = true}\n  on:click={() => clicked = true}\n>test</Chip>";

var chipOutlined = "<script>\n  import { Chip } from \"smelte\";\n\n  let closed = false;\n  let clicked = false;\n</script>\n\n<Chip\n  icon=\"pan_tool\"\n  outlined\n  removable\n  selectable\n  on:close={() => closed = true}\n  on:click={() => clicked = true}\n>Cats</Chip>\n<Chip\n  icon=\"print\"\n  outlined\n  removable\n  selectable\n  on:close={() => closed = true}\n  on:click={() => clicked = true}\n>Dogs</Chip>\n<Chip\n  icon=\"pageview\"\n  outlined\n  removable\n  selectable\n  on:close={() => closed = true}\n  on:click={() => clicked = true}\n>Plants</Chip>\n<Chip\n  icon=\"pets\"\n  outlined\n  removable\n  selectable\n  on:close={() => closed = true}\n  on:click={() => clicked = true}\n>Parents</Chip>";

/* src/routes/components/chips.svelte generated by Svelte v3.24.0 */
const file$1 = "src/routes/components/chips.svelte"; // (15:0) <Chip   icon="face"   selectable   on:close={() => (closed = true)}   on:click={() => (clicked = true)}>

function create_default_slot_8(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("test");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "test");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_8.name,
    type: "slot",
    source: "(15:0) <Chip   icon=\\\"face\\\"   selectable   on:close={() => (closed = true)}   on:click={() => (clicked = true)}>",
    ctx
  });
  return block;
} // (28:0) <Chip   icon="pan_tool"   outlined   removable   selectable   on:close={() => (closed = true)}   on:click={() => (clicked = true)}>


function create_default_slot_7(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("Cats");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "Cats");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_7.name,
    type: "slot",
    source: "(28:0) <Chip   icon=\\\"pan_tool\\\"   outlined   removable   selectable   on:close={() => (closed = true)}   on:click={() => (clicked = true)}>",
    ctx
  });
  return block;
} // (37:0) <Chip   icon="print"   outlined   removable   selectable   color="blue"   on:close={() => (closed = true)}   on:click={() => (clicked = true)}>


function create_default_slot_6(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("Dogs");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "Dogs");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_6.name,
    type: "slot",
    source: "(37:0) <Chip   icon=\\\"print\\\"   outlined   removable   selectable   color=\\\"blue\\\"   on:close={() => (closed = true)}   on:click={() => (clicked = true)}>",
    ctx
  });
  return block;
} // (47:0) <Chip   icon="pageview"   outlined   removable   selectable   color="alert"   on:close={() => (closed = true)}   on:click={() => (clicked = true)}>


function create_default_slot_5(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("Plants");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "Plants");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_5.name,
    type: "slot",
    source: "(47:0) <Chip   icon=\\\"pageview\\\"   outlined   removable   selectable   color=\\\"alert\\\"   on:close={() => (closed = true)}   on:click={() => (clicked = true)}>",
    ctx
  });
  return block;
} // (57:0) <Chip   icon="pets"   outlined   removable   selectable   color="secondary"   on:close={() => (closed = true)}   on:click={() => (clicked = true)}>


function create_default_slot_4(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("Parents");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "Parents");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_4.name,
    type: "slot",
    source: "(57:0) <Chip   icon=\\\"pets\\\"   outlined   removable   selectable   color=\\\"secondary\\\"   on:close={() => (closed = true)}   on:click={() => (clicked = true)}>",
    ctx
  });
  return block;
} // (75:4) <Button text on:click={() => (closed = false)}>


function create_default_slot_3(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("Dismiss");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "Dismiss");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_3.name,
    type: "slot",
    source: "(75:4) <Button text on:click={() => (closed = false)}>",
    ctx
  });
  return block;
} // (74:2) <div slot="action">


function create_action_slot_1(ctx) {
  let div;
  let button;
  let current;
  button = new Button({
    props: {
      text: true,
      $$slots: {
        default: [create_default_slot_3]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  button.$on("click",
  /*click_handler_5*/
  ctx[12]);
  const block = {
    c: function create() {
      div = element("div");
      create_component(button.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {
        slot: true
      });
      var div_nodes = children(div);
      claim_component(button.$$.fragment, div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "slot", "action");
      add_location(div, file$1, 73, 2, 1349);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      mount_component(button, div, null);
      current = true;
    },
    p: function update(ctx, dirty) {
      const button_changes = {};

      if (dirty &
      /*$$scope*/
      65536) {
        button_changes.$$scope = {
          dirty,
          ctx
        };
      }

      button.$set(button_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(button.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(button.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div);
      destroy_component(button);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_action_slot_1.name,
    type: "slot",
    source: "(74:2) <div slot=\\\"action\\\">",
    ctx
  });
  return block;
} // (72:0) <Snackbar bind:value={closed}>


function create_default_slot_2(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("Chip was removed successfully.\n  ");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "Chip was removed successfully.\n  ");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_2.name,
    type: "slot",
    source: "(72:0) <Snackbar bind:value={closed}>",
    ctx
  });
  return block;
} // (82:4) <Button text on:click={() => (clicked = false)}>


function create_default_slot_1$1(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("Dismiss");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "Dismiss");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_1$1.name,
    type: "slot",
    source: "(82:4) <Button text on:click={() => (clicked = false)}>",
    ctx
  });
  return block;
} // (81:2) <div slot="action">


function create_action_slot(ctx) {
  let div;
  let button;
  let current;
  button = new Button({
    props: {
      text: true,
      $$slots: {
        default: [create_default_slot_1$1]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  button.$on("click",
  /*click_handler_6*/
  ctx[14]);
  const block = {
    c: function create() {
      div = element("div");
      create_component(button.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {
        slot: true
      });
      var div_nodes = children(div);
      claim_component(button.$$.fragment, div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "slot", "action");
      add_location(div, file$1, 80, 2, 1526);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      mount_component(button, div, null);
      current = true;
    },
    p: function update(ctx, dirty) {
      const button_changes = {};

      if (dirty &
      /*$$scope*/
      65536) {
        button_changes.$$scope = {
          dirty,
          ctx
        };
      }

      button.$set(button_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(button.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(button.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div);
      destroy_component(button);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_action_slot.name,
    type: "slot",
    source: "(81:2) <div slot=\\\"action\\\">",
    ctx
  });
  return block;
} // (79:0) <Snackbar bind:value={clicked}>


function create_default_slot$1(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text("Chip was clicked successfully.\n  ");
    },
    l: function claim(nodes) {
      t = claim_text(nodes, "Chip was clicked successfully.\n  ");
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot$1.name,
    type: "slot",
    source: "(79:0) <Snackbar bind:value={clicked}>",
    ctx
  });
  return block;
}

function create_fragment$1(ctx) {
  let h50;
  let t0;
  let t1;
  let chip0;
  let t2;
  let div0;
  let code0;
  let t3;
  let h51;
  let t4;
  let t5;
  let chip1;
  let t6;
  let chip2;
  let t7;
  let chip3;
  let t8;
  let chip4;
  let t9;
  let div1;
  let code1;
  let t10;
  let snackbar0;
  let updating_value;
  let t11;
  let snackbar1;
  let updating_value_1;
  let current;
  chip0 = new Chip({
    props: {
      icon: "face",
      selectable: true,
      $$slots: {
        default: [create_default_slot_8]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  chip0.$on("close",
  /*close_handler*/
  ctx[2]);
  chip0.$on("click",
  /*click_handler*/
  ctx[3]);
  code0 = new Code({
    props: {
      code: chip
    },
    $$inline: true
  });
  chip1 = new Chip({
    props: {
      icon: "pan_tool",
      outlined: true,
      removable: true,
      selectable: true,
      $$slots: {
        default: [create_default_slot_7]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  chip1.$on("close",
  /*close_handler_1*/
  ctx[4]);
  chip1.$on("click",
  /*click_handler_1*/
  ctx[5]);
  chip2 = new Chip({
    props: {
      icon: "print",
      outlined: true,
      removable: true,
      selectable: true,
      color: "blue",
      $$slots: {
        default: [create_default_slot_6]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  chip2.$on("close",
  /*close_handler_2*/
  ctx[6]);
  chip2.$on("click",
  /*click_handler_2*/
  ctx[7]);
  chip3 = new Chip({
    props: {
      icon: "pageview",
      outlined: true,
      removable: true,
      selectable: true,
      color: "alert",
      $$slots: {
        default: [create_default_slot_5]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  chip3.$on("close",
  /*close_handler_3*/
  ctx[8]);
  chip3.$on("click",
  /*click_handler_3*/
  ctx[9]);
  chip4 = new Chip({
    props: {
      icon: "pets",
      outlined: true,
      removable: true,
      selectable: true,
      color: "secondary",
      $$slots: {
        default: [create_default_slot_4]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  chip4.$on("close",
  /*close_handler_4*/
  ctx[10]);
  chip4.$on("click",
  /*click_handler_4*/
  ctx[11]);
  code1 = new Code({
    props: {
      lang: "javascript",
      code: chipOutlined
    },
    $$inline: true
  });

  function snackbar0_value_binding(value) {
    /*snackbar0_value_binding*/
    ctx[13].call(null, value);
  }

  let snackbar0_props = {
    $$slots: {
      default: [create_default_slot_2],
      action: [create_action_slot_1]
    },
    $$scope: {
      ctx
    }
  };

  if (
  /*closed*/
  ctx[0] !== void 0) {
    snackbar0_props.value =
    /*closed*/
    ctx[0];
  }

  snackbar0 = new Snackbar({
    props: snackbar0_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(snackbar0, "value", snackbar0_value_binding));

  function snackbar1_value_binding(value) {
    /*snackbar1_value_binding*/
    ctx[15].call(null, value);
  }

  let snackbar1_props = {
    $$slots: {
      default: [create_default_slot$1],
      action: [create_action_slot]
    },
    $$scope: {
      ctx
    }
  };

  if (
  /*clicked*/
  ctx[1] !== void 0) {
    snackbar1_props.value =
    /*clicked*/
    ctx[1];
  }

  snackbar1 = new Snackbar({
    props: snackbar1_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(snackbar1, "value", snackbar1_value_binding));
  const block = {
    c: function create() {
      h50 = element("h5");
      t0 = text("Basic");
      t1 = space();
      create_component(chip0.$$.fragment);
      t2 = space();
      div0 = element("div");
      create_component(code0.$$.fragment);
      t3 = space();
      h51 = element("h5");
      t4 = text("Outlined");
      t5 = space();
      create_component(chip1.$$.fragment);
      t6 = space();
      create_component(chip2.$$.fragment);
      t7 = space();
      create_component(chip3.$$.fragment);
      t8 = space();
      create_component(chip4.$$.fragment);
      t9 = space();
      div1 = element("div");
      create_component(code1.$$.fragment);
      t10 = space();
      create_component(snackbar0.$$.fragment);
      t11 = space();
      create_component(snackbar1.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      h50 = claim_element(nodes, "H5", {
        class: true
      });
      var h50_nodes = children(h50);
      t0 = claim_text(h50_nodes, "Basic");
      h50_nodes.forEach(detach_dev);
      t1 = claim_space(nodes);
      claim_component(chip0.$$.fragment, nodes);
      t2 = claim_space(nodes);
      div0 = claim_element(nodes, "DIV", {
        class: true
      });
      var div0_nodes = children(div0);
      claim_component(code0.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach_dev);
      t3 = claim_space(nodes);
      h51 = claim_element(nodes, "H5", {
        class: true
      });
      var h51_nodes = children(h51);
      t4 = claim_text(h51_nodes, "Outlined");
      h51_nodes.forEach(detach_dev);
      t5 = claim_space(nodes);
      claim_component(chip1.$$.fragment, nodes);
      t6 = claim_space(nodes);
      claim_component(chip2.$$.fragment, nodes);
      t7 = claim_space(nodes);
      claim_component(chip3.$$.fragment, nodes);
      t8 = claim_space(nodes);
      claim_component(chip4.$$.fragment, nodes);
      t9 = claim_space(nodes);
      div1 = claim_element(nodes, "DIV", {
        class: true
      });
      var div1_nodes = children(div1);
      claim_component(code1.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach_dev);
      t10 = claim_space(nodes);
      claim_component(snackbar0.$$.fragment, nodes);
      t11 = claim_space(nodes);
      claim_component(snackbar1.$$.fragment, nodes);
      this.h();
    },
    h: function hydrate() {
      attr_dev(h50, "class", "mt-6 mb-2");
      add_location(h50, file$1, 13, 0, 329);
      attr_dev(div0, "class", "my-4");
      add_location(div0, file$1, 22, 0, 483);
      attr_dev(h51, "class", "mt-6 mb-2");
      add_location(h51, file$1, 26, 0, 533);
      attr_dev(div1, "class", "my-4");
      add_location(div1, file$1, 67, 0, 1207);
    },
    m: function mount(target, anchor) {
      insert_dev(target, h50, anchor);
      append_dev(h50, t0);
      insert_dev(target, t1, anchor);
      mount_component(chip0, target, anchor);
      insert_dev(target, t2, anchor);
      insert_dev(target, div0, anchor);
      mount_component(code0, div0, null);
      insert_dev(target, t3, anchor);
      insert_dev(target, h51, anchor);
      append_dev(h51, t4);
      insert_dev(target, t5, anchor);
      mount_component(chip1, target, anchor);
      insert_dev(target, t6, anchor);
      mount_component(chip2, target, anchor);
      insert_dev(target, t7, anchor);
      mount_component(chip3, target, anchor);
      insert_dev(target, t8, anchor);
      mount_component(chip4, target, anchor);
      insert_dev(target, t9, anchor);
      insert_dev(target, div1, anchor);
      mount_component(code1, div1, null);
      insert_dev(target, t10, anchor);
      mount_component(snackbar0, target, anchor);
      insert_dev(target, t11, anchor);
      mount_component(snackbar1, target, anchor);
      current = true;
    },
    p: function update(ctx, [dirty]) {
      const chip0_changes = {};

      if (dirty &
      /*$$scope*/
      65536) {
        chip0_changes.$$scope = {
          dirty,
          ctx
        };
      }

      chip0.$set(chip0_changes);
      const chip1_changes = {};

      if (dirty &
      /*$$scope*/
      65536) {
        chip1_changes.$$scope = {
          dirty,
          ctx
        };
      }

      chip1.$set(chip1_changes);
      const chip2_changes = {};

      if (dirty &
      /*$$scope*/
      65536) {
        chip2_changes.$$scope = {
          dirty,
          ctx
        };
      }

      chip2.$set(chip2_changes);
      const chip3_changes = {};

      if (dirty &
      /*$$scope*/
      65536) {
        chip3_changes.$$scope = {
          dirty,
          ctx
        };
      }

      chip3.$set(chip3_changes);
      const chip4_changes = {};

      if (dirty &
      /*$$scope*/
      65536) {
        chip4_changes.$$scope = {
          dirty,
          ctx
        };
      }

      chip4.$set(chip4_changes);
      const snackbar0_changes = {};

      if (dirty &
      /*$$scope, closed*/
      65537) {
        snackbar0_changes.$$scope = {
          dirty,
          ctx
        };
      }

      if (!updating_value && dirty &
      /*closed*/
      1) {
        updating_value = true;
        snackbar0_changes.value =
        /*closed*/
        ctx[0];
        add_flush_callback(() => updating_value = false);
      }

      snackbar0.$set(snackbar0_changes);
      const snackbar1_changes = {};

      if (dirty &
      /*$$scope, clicked*/
      65538) {
        snackbar1_changes.$$scope = {
          dirty,
          ctx
        };
      }

      if (!updating_value_1 && dirty &
      /*clicked*/
      2) {
        updating_value_1 = true;
        snackbar1_changes.value =
        /*clicked*/
        ctx[1];
        add_flush_callback(() => updating_value_1 = false);
      }

      snackbar1.$set(snackbar1_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(chip0.$$.fragment, local);
      transition_in(code0.$$.fragment, local);
      transition_in(chip1.$$.fragment, local);
      transition_in(chip2.$$.fragment, local);
      transition_in(chip3.$$.fragment, local);
      transition_in(chip4.$$.fragment, local);
      transition_in(code1.$$.fragment, local);
      transition_in(snackbar0.$$.fragment, local);
      transition_in(snackbar1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(chip0.$$.fragment, local);
      transition_out(code0.$$.fragment, local);
      transition_out(chip1.$$.fragment, local);
      transition_out(chip2.$$.fragment, local);
      transition_out(chip3.$$.fragment, local);
      transition_out(chip4.$$.fragment, local);
      transition_out(code1.$$.fragment, local);
      transition_out(snackbar0.$$.fragment, local);
      transition_out(snackbar1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(h50);
      if (detaching) detach_dev(t1);
      destroy_component(chip0, detaching);
      if (detaching) detach_dev(t2);
      if (detaching) detach_dev(div0);
      destroy_component(code0);
      if (detaching) detach_dev(t3);
      if (detaching) detach_dev(h51);
      if (detaching) detach_dev(t5);
      destroy_component(chip1, detaching);
      if (detaching) detach_dev(t6);
      destroy_component(chip2, detaching);
      if (detaching) detach_dev(t7);
      destroy_component(chip3, detaching);
      if (detaching) detach_dev(t8);
      destroy_component(chip4, detaching);
      if (detaching) detach_dev(t9);
      if (detaching) detach_dev(div1);
      destroy_component(code1);
      if (detaching) detach_dev(t10);
      destroy_component(snackbar0, detaching);
      if (detaching) detach_dev(t11);
      destroy_component(snackbar1, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$1.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance$1($$self, $$props, $$invalidate) {
  let closed = false;
  let clicked = false;
  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Chips> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Chips", $$slots, []);

  const close_handler = () => $$invalidate(0, closed = true);

  const click_handler = () => $$invalidate(1, clicked = true);

  const close_handler_1 = () => $$invalidate(0, closed = true);

  const click_handler_1 = () => $$invalidate(1, clicked = true);

  const close_handler_2 = () => $$invalidate(0, closed = true);

  const click_handler_2 = () => $$invalidate(1, clicked = true);

  const close_handler_3 = () => $$invalidate(0, closed = true);

  const click_handler_3 = () => $$invalidate(1, clicked = true);

  const close_handler_4 = () => $$invalidate(0, closed = true);

  const click_handler_4 = () => $$invalidate(1, clicked = true);

  const click_handler_5 = () => $$invalidate(0, closed = false);

  function snackbar0_value_binding(value) {
    closed = value;
    $$invalidate(0, closed);
  }

  const click_handler_6 = () => $$invalidate(1, clicked = false);

  function snackbar1_value_binding(value) {
    clicked = value;
    $$invalidate(1, clicked);
  }

  $$self.$capture_state = () => ({
    Chip,
    Button,
    Snackbar,
    Code,
    chip,
    chipOutlined,
    closed,
    clicked
  });

  $$self.$inject_state = $$props => {
    if ("closed" in $$props) $$invalidate(0, closed = $$props.closed);
    if ("clicked" in $$props) $$invalidate(1, clicked = $$props.clicked);
  };

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  return [closed, clicked, close_handler, click_handler, close_handler_1, click_handler_1, close_handler_2, click_handler_2, close_handler_3, click_handler_3, close_handler_4, click_handler_4, click_handler_5, snackbar0_value_binding, click_handler_6, snackbar1_value_binding];
}

class Chips extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$1, create_fragment$1, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Chips",
      options,
      id: create_fragment$1.name
    });
  }

}

export default Chips;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

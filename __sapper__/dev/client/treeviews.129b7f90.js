import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, F as assign, am as List, K as createEventDispatcher, v as validate_slots, H as exclude_internal_props, at as ListItem, L as Icon, ah as slide, o as create_component, p as claim_component, q as mount_component, J as get_spread_update, a5 as get_spread_object, r as transition_in, u as transition_out, w as destroy_component, Q as bubble, e as element, c as claim_element, a as children, b as detach_dev, g as attr_dev, f as add_location, h as insert_dev, ac as add_render_callback, ao as create_in_transition, k as space, m as claim_space, j as append_dev, T as group_outros, U as check_outros, x as create_slot, t as text, l as claim_text, z as set_data_dev, B as update_slot } from './client.4c142522.js';
import { C as Code } from './Code.497e1b62.js';

/* src/components/Treeview/Treeview.svelte generated by Svelte v3.24.0 */
const file = "src/components/Treeview/Treeview.svelte"; // (57:8) {#if showExpandIcon && !item.hideArrow && item.items}

function create_if_block_1(ctx) {
  let icon;
  let current;
  icon = new Icon({
    props: {
      tip:
      /*expanded*/
      ctx[7].includes(
      /*item*/
      ctx[22]),
      $$slots: {
        default: [create_default_slot_2]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(icon.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(icon.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      const icon_changes = {};
      if (dirty &
      /*expanded, item*/
      4194432) icon_changes.tip =
      /*expanded*/
      ctx[7].includes(
      /*item*/
      ctx[22]);

      if (dirty &
      /*$$scope, expandIcon*/
      1048592) {
        icon_changes.$$scope = {
          dirty,
          ctx
        };
      }

      icon.$set(icon_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(icon, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(57:8) {#if showExpandIcon && !item.hideArrow && item.items}",
    ctx
  });
  return block;
} // (58:10) <Icon tip={expanded.includes(item)}>


function create_default_slot_2(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text(
      /*expandIcon*/
      ctx[4]);
    },
    l: function claim(nodes) {
      t = claim_text(nodes,
      /*expandIcon*/
      ctx[4]);
    },
    m: function mount(target, anchor) {
      insert_dev(target, t, anchor);
    },
    p: function update(ctx, dirty) {
      if (dirty &
      /*expandIcon*/
      16) set_data_dev(t,
      /*expandIcon*/
      ctx[4]);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_2.name,
    type: "slot",
    source: "(58:10) <Icon tip={expanded.includes(item)}>",
    ctx
  });
  return block;
} // (60:14) <span>


function fallback_block(ctx) {
  let span;
  let t_value =
  /*item*/
  ctx[22].text + "";
  let t;
  const block = {
    c: function create() {
      span = element("span");
      t = text(t_value);
      this.h();
    },
    l: function claim(nodes) {
      span = claim_element(nodes, "SPAN", {});
      var span_nodes = children(span);
      t = claim_text(span_nodes, t_value);
      span_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      add_location(span, file, 59, 14, 1360);
    },
    m: function mount(target, anchor) {
      insert_dev(target, span, anchor);
      append_dev(span, t);
    },
    p: function update(ctx, dirty) {
      if (dirty &
      /*item*/
      4194304 && t_value !== (t_value =
      /*item*/
      ctx[22].text + "")) set_data_dev(t, t_value);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(span);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block.name,
    type: "fallback",
    source: "(60:14) <span>",
    ctx
  });
  return block;
} // (47:4) <ListItem       {item}       {...$$props}       {...item}       selected={selectable && selected === item}       {selectedClasses}       on:click={() => toggle(item) }       on:click     >


function create_default_slot_1(ctx) {
  let div;
  let t;
  let current;
  let if_block =
  /*showExpandIcon*/
  ctx[3] && !
  /*item*/
  ctx[22].hideArrow &&
  /*item*/
  ctx[22].items && create_if_block_1(ctx);
  const default_slot_template =
  /*$$slots*/
  ctx[15].default;
  const default_slot = create_slot(default_slot_template, ctx,
  /*$$scope*/
  ctx[20], null);
  const default_slot_or_fallback = default_slot || fallback_block(ctx);
  const block = {
    c: function create() {
      div = element("div");
      if (if_block) if_block.c();
      t = space();
      if (default_slot_or_fallback) default_slot_or_fallback.c();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {
        class: true
      });
      var div_nodes = children(div);
      if (if_block) if_block.l(div_nodes);
      t = claim_space(div_nodes);
      if (default_slot_or_fallback) default_slot_or_fallback.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "flex items-center");
      add_location(div, file, 55, 6, 1172);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      if (if_block) if_block.m(div, null);
      append_dev(div, t);

      if (default_slot_or_fallback) {
        default_slot_or_fallback.m(div, null);
      }

      current = true;
    },
    p: function update(ctx, dirty) {
      if (
      /*showExpandIcon*/
      ctx[3] && !
      /*item*/
      ctx[22].hideArrow &&
      /*item*/
      ctx[22].items) {
        if (if_block) {
          if_block.p(ctx, dirty);

          if (dirty &
          /*showExpandIcon, item*/
          4194312) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1(ctx);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, t);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }

      if (default_slot) {
        if (default_slot.p && dirty &
        /*$$scope*/
        1048576) {
          update_slot(default_slot, default_slot_template, ctx,
          /*$$scope*/
          ctx[20], dirty, null, null);
        }
      } else {
        if (default_slot_or_fallback && default_slot_or_fallback.p && dirty &
        /*item*/
        4194304) {
          default_slot_or_fallback.p(ctx, dirty);
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      transition_in(default_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      transition_out(default_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div);
      if (if_block) if_block.d();
      if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_1.name,
    type: "slot",
    source: "(47:4) <ListItem       {item}       {...$$props}       {...item}       selected={selectable && selected === item}       {selectedClasses}       on:click={() => toggle(item) }       on:click     >",
    ctx
  });
  return block;
} // (64:4) {#if item.items && expanded.includes(item)}


function create_if_block(ctx) {
  let div;
  let treeview;
  let div_intro;
  let current;
  const treeview_spread_levels = [
  /*$$props*/
  ctx[9], {
    items:
    /*item*/
    ctx[22].items
  }, {
    level:
    /*level*/
    ctx[2] + 1
  }];
  let treeview_props = {};

  for (let i = 0; i < treeview_spread_levels.length; i += 1) {
    treeview_props = assign(treeview_props, treeview_spread_levels[i]);
  }

  treeview = new Treeview({
    props: treeview_props,
    $$inline: true
  });
  treeview.$on("click",
  /*click_handler_1*/
  ctx[18]);
  treeview.$on("select",
  /*select_handler*/
  ctx[19]);
  const block = {
    c: function create() {
      div = element("div");
      create_component(treeview.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {
        class: true
      });
      var div_nodes = children(div);
      claim_component(treeview.$$.fragment, div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "ml-6");
      add_location(div, file, 64, 6, 1476);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      mount_component(treeview, div, null);
      current = true;
    },
    p: function update(ctx, dirty) {
      const treeview_changes = dirty &
      /*$$props, item, level*/
      4194820 ? get_spread_update(treeview_spread_levels, [dirty &
      /*$$props*/
      512 && get_spread_object(
      /*$$props*/
      ctx[9]), dirty &
      /*item*/
      4194304 && {
        items:
        /*item*/
        ctx[22].items
      }, dirty &
      /*level*/
      4 && {
        level:
        /*level*/
        ctx[2] + 1
      }]) : {};
      treeview.$set(treeview_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(treeview.$$.fragment, local);

      if (!div_intro) {
        add_render_callback(() => {
          div_intro = create_in_transition(div, slide, {});
          div_intro.start();
        });
      }

      current = true;
    },
    o: function outro(local) {
      transition_out(treeview.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div);
      destroy_component(treeview);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(64:4) {#if item.items && expanded.includes(item)}",
    ctx
  });
  return block;
} // (46:2) <span slot="item" let:item>


function create_item_slot(ctx) {
  let span;
  let listitem;
  let t;
  let show_if =
  /*item*/
  ctx[22].items &&
  /*expanded*/
  ctx[7].includes(
  /*item*/
  ctx[22]);
  let current;
  const listitem_spread_levels = [{
    item:
    /*item*/
    ctx[22]
  },
  /*$$props*/
  ctx[9],
  /*item*/
  ctx[22], {
    selected:
    /*selectable*/
    ctx[5] &&
    /*selected*/
    ctx[0] ===
    /*item*/
    ctx[22]
  }, {
    selectedClasses:
    /*selectedClasses*/
    ctx[6]
  }];

  function click_handler_2(...args) {
    return (
      /*click_handler_2*/
      ctx[16](
      /*item*/
      ctx[22], ...args)
    );
  }

  let listitem_props = {
    $$slots: {
      default: [create_default_slot_1]
    },
    $$scope: {
      ctx
    }
  };

  for (let i = 0; i < listitem_spread_levels.length; i += 1) {
    listitem_props = assign(listitem_props, listitem_spread_levels[i]);
  }

  listitem = new ListItem({
    props: listitem_props,
    $$inline: true
  });
  listitem.$on("click", click_handler_2);
  listitem.$on("click",
  /*click_handler*/
  ctx[17]);
  let if_block = show_if && create_if_block(ctx);
  const block = {
    c: function create() {
      span = element("span");
      create_component(listitem.$$.fragment);
      t = space();
      if (if_block) if_block.c();
      this.h();
    },
    l: function claim(nodes) {
      span = claim_element(nodes, "SPAN", {
        slot: true
      });
      var span_nodes = children(span);
      claim_component(listitem.$$.fragment, span_nodes);
      t = claim_space(span_nodes);
      if (if_block) if_block.l(span_nodes);
      span_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(span, "slot", "item");
      add_location(span, file, 45, 2, 945);
    },
    m: function mount(target, anchor) {
      insert_dev(target, span, anchor);
      mount_component(listitem, span, null);
      append_dev(span, t);
      if (if_block) if_block.m(span, null);
      current = true;
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      const listitem_changes = dirty &
      /*item, $$props, selectable, selected, selectedClasses*/
      4194913 ? get_spread_update(listitem_spread_levels, [dirty &
      /*item*/
      4194304 && {
        item:
        /*item*/
        ctx[22]
      }, dirty &
      /*$$props*/
      512 && get_spread_object(
      /*$$props*/
      ctx[9]), dirty &
      /*item*/
      4194304 && get_spread_object(
      /*item*/
      ctx[22]), dirty &
      /*selectable, selected, item*/
      4194337 && {
        selected:
        /*selectable*/
        ctx[5] &&
        /*selected*/
        ctx[0] ===
        /*item*/
        ctx[22]
      }, dirty &
      /*selectedClasses*/
      64 && {
        selectedClasses:
        /*selectedClasses*/
        ctx[6]
      }]) : {};

      if (dirty &
      /*$$scope, item, expanded, expandIcon, showExpandIcon*/
      5243032) {
        listitem_changes.$$scope = {
          dirty,
          ctx
        };
      }

      listitem.$set(listitem_changes);
      if (dirty &
      /*item, expanded*/
      4194432) show_if =
      /*item*/
      ctx[22].items &&
      /*expanded*/
      ctx[7].includes(
      /*item*/
      ctx[22]);

      if (show_if) {
        if (if_block) {
          if_block.p(ctx, dirty);

          if (dirty &
          /*item, expanded*/
          4194432) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(span, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(listitem.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(listitem.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(span);
      destroy_component(listitem);
      if (if_block) if_block.d();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_item_slot.name,
    type: "slot",
    source: "(46:2) <span slot=\\\"item\\\" let:item>",
    ctx
  });
  return block;
}

function create_fragment(ctx) {
  let list;
  let current;
  const list_spread_levels = [{
    items:
    /*items*/
    ctx[1]
  },
  /*$$props*/
  ctx[9]];
  let list_props = {
    $$slots: {
      item: [create_item_slot, ({
        item
      }) => ({
        22: item
      }), ({
        item
      }) => item ? 4194304 : 0]
    },
    $$scope: {
      ctx
    }
  };

  for (let i = 0; i < list_spread_levels.length; i += 1) {
    list_props = assign(list_props, list_spread_levels[i]);
  }

  list = new List({
    props: list_props,
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(list.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(list.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(list, target, anchor);
      current = true;
    },
    p: function update(ctx, [dirty]) {
      const list_changes = dirty &
      /*items, $$props*/
      514 ? get_spread_update(list_spread_levels, [dirty &
      /*items*/
      2 && {
        items:
        /*items*/
        ctx[1]
      }, dirty &
      /*$$props*/
      512 && get_spread_object(
      /*$$props*/
      ctx[9])]) : {};

      if (dirty &
      /*$$scope, item, level, expanded, selectable, selected, selectedClasses, expandIcon, showExpandIcon*/
      5243133) {
        list_changes.$$scope = {
          dirty,
          ctx
        };
      }

      list.$set(list_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(list, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

const classesDefault = "rounded";

function instance($$self, $$props, $$invalidate) {
  let {
    items = []
  } = $$props;
  const value = "";
  const text = "";
  const dense = false;
  const navigation = false;
  const select = false;
  let {
    level = 0
  } = $$props;
  let {
    showExpandIcon = true
  } = $$props;
  let {
    expandIcon = "arrow_right"
  } = $$props;
  let {
    selectable = true
  } = $$props;
  let {
    selected = null
  } = $$props;
  let {
    selectedClasses = "bg-primary-trans"
  } = $$props;
  let expanded = [];
  const dispatch = createEventDispatcher();

  function toggle(i) {
    dispatch("select", i);

    if (selectable && !i.items) {
      $$invalidate(0, selected = i);
    }

    $$invalidate(7, expanded = i && !expanded.includes(i) ? [...expanded, i] : expanded.filter(si => si !== i));
  }

  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Treeview", $$slots, ['default']);

  const click_handler_2 = item => toggle(item);

  function click_handler(event) {
    bubble($$self, event);
  }

  function click_handler_1(event) {
    bubble($$self, event);
  }

  function select_handler(event) {
    bubble($$self, event);
  }

  $$self.$set = $$new_props => {
    $$invalidate(9, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("items" in $$new_props) $$invalidate(1, items = $$new_props.items);
    if ("level" in $$new_props) $$invalidate(2, level = $$new_props.level);
    if ("showExpandIcon" in $$new_props) $$invalidate(3, showExpandIcon = $$new_props.showExpandIcon);
    if ("expandIcon" in $$new_props) $$invalidate(4, expandIcon = $$new_props.expandIcon);
    if ("selectable" in $$new_props) $$invalidate(5, selectable = $$new_props.selectable);
    if ("selected" in $$new_props) $$invalidate(0, selected = $$new_props.selected);
    if ("selectedClasses" in $$new_props) $$invalidate(6, selectedClasses = $$new_props.selectedClasses);
    if ("$$scope" in $$new_props) $$invalidate(20, $$scope = $$new_props.$$scope);
  };

  $$self.$capture_state = () => ({
    List,
    ListItem,
    Icon,
    createEventDispatcher,
    slide,
    items,
    value,
    text,
    dense,
    navigation,
    select,
    level,
    showExpandIcon,
    expandIcon,
    selectable,
    selected,
    selectedClasses,
    classesDefault,
    expanded,
    dispatch,
    toggle
  });

  $$self.$inject_state = $$new_props => {
    $$invalidate(9, $$props = assign(assign({}, $$props), $$new_props));
    if ("items" in $$props) $$invalidate(1, items = $$new_props.items);
    if ("level" in $$props) $$invalidate(2, level = $$new_props.level);
    if ("showExpandIcon" in $$props) $$invalidate(3, showExpandIcon = $$new_props.showExpandIcon);
    if ("expandIcon" in $$props) $$invalidate(4, expandIcon = $$new_props.expandIcon);
    if ("selectable" in $$props) $$invalidate(5, selectable = $$new_props.selectable);
    if ("selected" in $$props) $$invalidate(0, selected = $$new_props.selected);
    if ("selectedClasses" in $$props) $$invalidate(6, selectedClasses = $$new_props.selectedClasses);
    if ("expanded" in $$props) $$invalidate(7, expanded = $$new_props.expanded);
  };

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$props = exclude_internal_props($$props);
  return [selected, items, level, showExpandIcon, expandIcon, selectable, selectedClasses, expanded, toggle, $$props, value, text, dense, navigation, select, $$slots, click_handler_2, click_handler, click_handler_1, select_handler, $$scope];
}

class Treeview extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      items: 1,
      value: 10,
      text: 11,
      dense: 12,
      navigation: 13,
      select: 14,
      level: 2,
      showExpandIcon: 3,
      expandIcon: 4,
      selectable: 5,
      selected: 0,
      selectedClasses: 6
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Treeview",
      options,
      id: create_fragment.name
    });
  }

  get items() {
    throw new Error("<Treeview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set items(value) {
    throw new Error("<Treeview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get value() {
    return this.$$.ctx[10];
  }

  set value(value) {
    throw new Error("<Treeview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get text() {
    return this.$$.ctx[11];
  }

  set text(value) {
    throw new Error("<Treeview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get dense() {
    return this.$$.ctx[12];
  }

  set dense(value) {
    throw new Error("<Treeview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get navigation() {
    return this.$$.ctx[13];
  }

  set navigation(value) {
    throw new Error("<Treeview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get select() {
    return this.$$.ctx[14];
  }

  set select(value) {
    throw new Error("<Treeview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get level() {
    throw new Error("<Treeview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set level(value) {
    throw new Error("<Treeview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get showExpandIcon() {
    throw new Error("<Treeview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set showExpandIcon(value) {
    throw new Error("<Treeview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get expandIcon() {
    throw new Error("<Treeview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set expandIcon(value) {
    throw new Error("<Treeview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get selectable() {
    throw new Error("<Treeview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set selectable(value) {
    throw new Error("<Treeview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get selected() {
    throw new Error("<Treeview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set selected(value) {
    throw new Error("<Treeview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get selectedClasses() {
    throw new Error("<Treeview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set selectedClasses(value) {
    throw new Error("<Treeview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

var treeview = "<script>\n  import { Treeview } from \"smelte\";\n</script>\n\n<Treeview items={[\n  {\n    text: \"test\",\n    items: [\n      { text: \"subtest\" },\n      { text: \"subtest2\" },\n      { text: \"subtest3\" },\n      { text: \"subtest4\", \n        items: [\n          { text: \"subtest\" },\n          { text: \"subtest2\" },\n          { text: \"subtest3\" },\n          { text: \"subtest4\" },\n        ]\n      },\n    ]\n  },\n  {\n    text: \"test2\",\n    items: [\n      { text: \"subtest\" },\n      { text: \"subtest2\" },\n      { text: \"subtest3\" },\n      { text: \"subtest4\" },\n    ]\n  },\n  {\n    text: \"test3\",\n    items: [\n      { text: \"subtest\" },\n      { text: \"subtest2\" },\n      { text: \"subtest3\" },\n      { text: \"subtest4\" },\n    ]\n  }\n]} />";

/* src/routes/components/treeviews.svelte generated by Svelte v3.24.0 */
const file$1 = "src/routes/components/treeviews.svelte";

function create_fragment$1(ctx) {
  let small;
  let t0;
  let t1;
  let t2;
  let treeview_1;
  let t3;
  let code;
  let current;
  treeview_1 = new Treeview({
    props: {
      items: [{
        text: "test",
        items: [{
          text: "subtest"
        }, {
          text: "subtest2"
        }, {
          text: "subtest3"
        }, {
          text: "subtest4",
          items: [{
            text: "subtest"
          }, {
            text: "subtest2"
          }, {
            text: "subtest3"
          }, {
            text: "subtest4"
          }]
        }]
      }, {
        text: "test2",
        items: [{
          text: "subtest"
        }, {
          text: "subtest2"
        }, {
          text: "subtest3"
        }, {
          text: "subtest4"
        }]
      }, {
        text: "test3",
        items: [{
          text: "subtest"
        }, {
          text: "subtest2"
        }, {
          text: "subtest3"
        }, {
          text: "subtest4"
        }]
      }]
    },
    $$inline: true
  });
  treeview_1.$on("select",
  /*select_handler*/
  ctx[1]);
  code = new Code({
    props: {
      code: treeview
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      small = element("small");
      t0 = text("I selected ");
      t1 = text(
      /*selected*/
      ctx[0]);
      t2 = space();
      create_component(treeview_1.$$.fragment);
      t3 = space();
      create_component(code.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      small = claim_element(nodes, "SMALL", {});
      var small_nodes = children(small);
      t0 = claim_text(small_nodes, "I selected ");
      t1 = claim_text(small_nodes,
      /*selected*/
      ctx[0]);
      small_nodes.forEach(detach_dev);
      t2 = claim_space(nodes);
      claim_component(treeview_1.$$.fragment, nodes);
      t3 = claim_space(nodes);
      claim_component(code.$$.fragment, nodes);
      this.h();
    },
    h: function hydrate() {
      add_location(small, file$1, 8, 0, 182);
    },
    m: function mount(target, anchor) {
      insert_dev(target, small, anchor);
      append_dev(small, t0);
      append_dev(small, t1);
      insert_dev(target, t2, anchor);
      mount_component(treeview_1, target, anchor);
      insert_dev(target, t3, anchor);
      mount_component(code, target, anchor);
      current = true;
    },
    p: function update(ctx, [dirty]) {
      if (!current || dirty &
      /*selected*/
      1) set_data_dev(t1,
      /*selected*/
      ctx[0]);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(treeview_1.$$.fragment, local);
      transition_in(code.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(treeview_1.$$.fragment, local);
      transition_out(code.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(small);
      if (detaching) detach_dev(t2);
      destroy_component(treeview_1, detaching);
      if (detaching) detach_dev(t3);
      destroy_component(code, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$1.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance$1($$self, $$props, $$invalidate) {
  let selected = "nothing";
  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Treeviews> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Treeviews", $$slots, []);

  const select_handler = i => $$invalidate(0, selected = i.detail.text);

  $$self.$capture_state = () => ({
    Treeview,
    Code,
    treeview,
    selected
  });

  $$self.$inject_state = $$props => {
    if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
  };

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  return [selected, select_handler];
}

class Treeviews extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$1, create_fragment$1, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Treeviews",
      options,
      id: create_fragment$1.name
    });
  }

}

export default Treeviews;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

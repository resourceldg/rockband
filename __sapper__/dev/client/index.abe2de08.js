import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, ax as globals, e as element, j as append_dev, K as createEventDispatcher, v as validate_slots, ay as onDestroy, x as create_slot, B as update_slot, r as transition_in, u as transition_out, c as claim_element, a as children, b as detach_dev, g as attr_dev, f as add_location, h as insert_dev, W as action_destroyer, T as group_outros, U as check_outros, F as assign, H as exclude_internal_props, al as fade, o as create_component, p as claim_component, q as mount_component, w as destroy_component, R as empty, n as noop } from './client.97066c0b.js';

/* node_modules/svelte-waypoint/src/Waypoint.svelte generated by Svelte v3.24.0 */
const {
  document: document_1
} = globals;
const file = "node_modules/svelte-waypoint/src/Waypoint.svelte";

function add_css() {
  var style = element("style");
  style.id = "svelte-142y8oi-style";
  style.textContent = ".wrapper.svelte-142y8oi{display:inline-block}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2F5cG9pbnQuc3ZlbHRlIiwic291cmNlcyI6WyJXYXlwb2ludC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyLCBvbkRlc3Ryb3kgfSBmcm9tICdzdmVsdGUnO1xuXG4gIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgZXhwb3J0IGxldCBvZmZzZXQgPSAwO1xuICBleHBvcnQgbGV0IHRocm90dGxlID0gMjUwO1xuICBleHBvcnQgbGV0IGMgPSAnJztcbiAgZXhwb3J0IGxldCBzdHlsZSA9ICcnO1xuICBleHBvcnQgbGV0IG9uY2UgPSB0cnVlO1xuICBleHBvcnQgbGV0IHRocmVzaG9sZCA9IDEuMDtcbiAgZXhwb3J0IGxldCBkaXNhYmxlZCA9IGZhbHNlO1xuXG4gIGxldCBjbGFzc05hbWUgPSBcIlwiO1xuICBleHBvcnQgeyBjbGFzc05hbWUgYXMgY2xhc3MgfTtcblxuICBsZXQgdmlzaWJsZSA9IGRpc2FibGVkO1xuICBsZXQgd2FzVmlzaWJsZSA9IGZhbHNlO1xuICBsZXQgaW50ZXJzZWN0aW5nID0gZmFsc2U7XG4gIGxldCByZW1vdmVIYW5kbGVycyA9ICgpID0+IHt9O1xuXG4gIGZ1bmN0aW9uIHRocm90dGxlRm4oZm4sIHRpbWUpIHtcbiAgICBsZXQgbGFzdCwgZGVmZXJUaW1lcjtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBub3cgPSArbmV3IERhdGU7XG5cbiAgICAgIGlmIChsYXN0ICYmIG5vdyA8IGxhc3QgKyB0aW1lKSB7XG4gICAgICAgIC8vIGhvbGQgb24gdG8gaXRcbiAgICAgICAgY2xlYXJUaW1lb3V0KGRlZmVyVGltZXIpO1xuICAgICAgICBkZWZlclRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbGFzdCA9IG5vdztcbiAgICAgICAgICBmbigpO1xuICAgICAgICB9LCB0aW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxhc3QgPSBub3c7XG4gICAgICAgIGZuKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGxFdmVudHMod2FzVmlzaWJsZSwgb2JzZXJ2ZXIsIG5vZGUpIHtcbiAgICBpZiAodmlzaWJsZSAmJiAhd2FzVmlzaWJsZSkge1xuICAgICAgZGlzcGF0Y2goJ2VudGVyJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHdhc1Zpc2libGUgJiYgIWludGVyc2VjdGluZykge1xuICAgICAgZGlzcGF0Y2goJ2xlYXZlJyk7XG4gICAgfVxuXG4gICAgaWYgKG9uY2UgJiYgd2FzVmlzaWJsZSAmJiAhaW50ZXJzZWN0aW5nKSB7XG4gICAgICByZW1vdmVIYW5kbGVycygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHdheXBvaW50KG5vZGUpIHtcbiAgICBpZiAoIXdpbmRvdyB8fCBkaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgaWYgKHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlciAmJiB3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeSkge1xuICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKFsgeyBpc0ludGVyc2VjdGluZyB9IF0pID0+IHtcbiAgICAgICAgd2FzVmlzaWJsZSA9IHZpc2libGU7XG5cbiAgICAgICAgaW50ZXJzZWN0aW5nID0gaXNJbnRlcnNlY3Rpbmc7XG5cbiAgICAgICAgaWYgKHdhc1Zpc2libGUgJiYgb25jZSAmJiAhaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICBjYWxsRXZlbnRzKHdhc1Zpc2libGUsIG9ic2VydmVyLCBub2RlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2aXNpYmxlID0gaXNJbnRlcnNlY3Rpbmc7XG5cbiAgICAgICAgY2FsbEV2ZW50cyh3YXNWaXNpYmxlLCBvYnNlcnZlciwgbm9kZSk7XG4gICAgICB9LCB7XG4gICAgICAgIHJvb3RNYXJnaW46IG9mZnNldCArICdweCcsXG4gICAgICAgIHRocmVzaG9sZCxcbiAgICAgIH0pO1xuXG4gICAgICBvYnNlcnZlci5vYnNlcnZlKG5vZGUpO1xuXG4gICAgICByZW1vdmVIYW5kbGVycyA9ICgpID0+IG9ic2VydmVyLnVub2JzZXJ2ZShub2RlKTtcblxuICAgICAgcmV0dXJuIHJlbW92ZUhhbmRsZXJzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrSXNWaXNpYmxlKCkge1xuICAgICAgLy8gS3Vkb3MgaHR0cHM6Ly9naXRodWIuY29tL3R3b2Jpbi9yZWFjdC1sYXp5bG9hZC9ibG9iL21hc3Rlci9zcmMvaW5kZXguanN4I0w5M1xuICAgICAgaWYgKCEobm9kZS5vZmZzZXRXaWR0aCB8fCBub2RlLm9mZnNldEhlaWdodCB8fCBub2RlLmdldENsaWVudFJlY3RzKCkubGVuZ3RoKSkgcmV0dXJuO1xuXG4gICAgICBsZXQgdG9wO1xuICAgICAgbGV0IGhlaWdodDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgKHsgdG9wLCBoZWlnaHQgfSA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAoeyB0b3AsIGhlaWdodCB9ID0gZGVmYXVsdEJvdW5kaW5nQ2xpZW50UmVjdCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHdpbmRvd0lubmVySGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0XG4gICAgICAgIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cbiAgICAgIHdhc1Zpc2libGUgPSB2aXNpYmxlO1xuICAgICAgaW50ZXJzZWN0aW5nID0gKHRvcCAtIG9mZnNldCA8PSB3aW5kb3dJbm5lckhlaWdodCkgJiZcbiAgICAgICAgKHRvcCArIGhlaWdodCArIG9mZnNldCA+PSAwKTtcblxuICAgICAgaWYgKHdhc1Zpc2libGUgJiYgb25jZSAmJiAhaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgY2FsbEV2ZW50cyh3YXNWaXNpYmxlLCBvYnNlcnZlciwgbm9kZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmlzaWJsZSA9IGludGVyc2VjdGluZztcblxuICAgICAgY2FsbEV2ZW50cyh3YXNWaXNpYmxlKTtcbiAgICB9XG5cbiAgICBjaGVja0lzVmlzaWJsZSgpO1xuXG4gICAgY29uc3QgdGhyb3R0bGVkID0gdGhyb3R0bGVGbihjaGVja0lzVmlzaWJsZSwgdGhyb3R0bGUpO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRocm90dGxlZCk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRocm90dGxlZCk7XG5cbiAgICByZW1vdmVIYW5kbGVycyA9ICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aHJvdHRsZWQpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRocm90dGxlZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbW92ZUhhbmRsZXJzO1xuICB9XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuLndyYXBwZXIge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG48L3N0eWxlPlxuXG48ZGl2IGNsYXNzPVwid3JhcHBlciB7Y2xhc3NOYW1lfSB7Y31cIiB7c3R5bGV9IHVzZTp3YXlwb2ludD5cbiAgeyNpZiB2aXNpYmxlfVxuICAgIDxzbG90IC8+XG4gIHsvaWZ9XG48L2Rpdj5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvSUEsUUFBUSxlQUFDLENBQUMsQUFDUixPQUFPLENBQUUsWUFBWSxBQUN2QixDQUFDIn0= */";
  append_dev(document_1.head, style);
} // (139:2) {#if visible}


function create_if_block(ctx) {
  let current;
  const default_slot_template =
  /*$$slots*/
  ctx[11].default;
  const default_slot = create_slot(default_slot_template, ctx,
  /*$$scope*/
  ctx[10], null);
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }

      current = true;
    },
    p: function update(ctx, dirty) {
      if (default_slot) {
        if (default_slot.p && dirty &
        /*$$scope*/
        1024) {
          update_slot(default_slot, default_slot_template, ctx,
          /*$$scope*/
          ctx[10], dirty, null, null);
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(139:2) {#if visible}",
    ctx
  });
  return block;
}

function create_fragment(ctx) {
  let div;
  let div_class_value;
  let waypoint_action;
  let current;
  let mounted;
  let dispose;
  let if_block =
  /*visible*/
  ctx[3] && create_if_block(ctx);
  const block = {
    c: function create() {
      div = element("div");
      if (if_block) if_block.c();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {
        class: true,
        style: true
      });
      var div_nodes = children(div);
      if (if_block) if_block.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", div_class_value = "wrapper " +
      /*className*/
      ctx[2] + " " +
      /*c*/
      ctx[0] + " svelte-142y8oi");
      attr_dev(div, "style",
      /*style*/
      ctx[1]);
      add_location(div, file, 137, 0, 3091);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      if (if_block) if_block.m(div, null);
      current = true;

      if (!mounted) {
        dispose = action_destroyer(waypoint_action =
        /*waypoint*/
        ctx[4].call(null, div));
        mounted = true;
      }
    },
    p: function update(ctx, [dirty]) {
      if (
      /*visible*/
      ctx[3]) {
        if (if_block) {
          if_block.p(ctx, dirty);

          if (dirty &
          /*visible*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }

      if (!current || dirty &
      /*className, c*/
      5 && div_class_value !== (div_class_value = "wrapper " +
      /*className*/
      ctx[2] + " " +
      /*c*/
      ctx[0] + " svelte-142y8oi")) {
        attr_dev(div, "class", div_class_value);
      }

      if (!current || dirty &
      /*style*/
      2) {
        attr_dev(div, "style",
        /*style*/
        ctx[1]);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div);
      if (if_block) if_block.d();
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function throttleFn(fn, time) {
  let last, deferTimer;
  return () => {
    const now = +new Date();

    if (last && now < last + time) {
      // hold on to it
      clearTimeout(deferTimer);
      deferTimer = setTimeout(function () {
        last = now;
        fn();
      }, time);
    } else {
      last = now;
      fn();
    }
  };
}

function instance($$self, $$props, $$invalidate) {
  const dispatch = createEventDispatcher();
  let {
    offset = 0
  } = $$props;
  let {
    throttle = 250
  } = $$props;
  let {
    c = ""
  } = $$props;
  let {
    style = ""
  } = $$props;
  let {
    once = true
  } = $$props;
  let {
    threshold = 1
  } = $$props;
  let {
    disabled = false
  } = $$props;
  let {
    class: className = ""
  } = $$props;
  let visible = disabled;
  let wasVisible = false;
  let intersecting = false;

  let removeHandlers = () => {};

  function callEvents(wasVisible, observer, node) {
    if (visible && !wasVisible) {
      dispatch("enter");
      return;
    }

    if (wasVisible && !intersecting) {
      dispatch("leave");
    }

    if (once && wasVisible && !intersecting) {
      removeHandlers();
    }
  }

  function waypoint(node) {
    if (!window || disabled) return;

    if (window.IntersectionObserver && window.IntersectionObserverEntry) {
      const observer = new IntersectionObserver(([{
        isIntersecting
      }]) => {
        wasVisible = visible;
        intersecting = isIntersecting;

        if (wasVisible && once && !isIntersecting) {
          callEvents(wasVisible);
          return;
        }

        $$invalidate(3, visible = isIntersecting);
        callEvents(wasVisible);
      }, {
        rootMargin: offset + "px",
        threshold
      });
      observer.observe(node);

      removeHandlers = () => observer.unobserve(node);

      return removeHandlers;
    }

    function checkIsVisible() {
      // Kudos https://github.com/twobin/react-lazyload/blob/master/src/index.jsx#L93
      if (!(node.offsetWidth || node.offsetHeight || node.getClientRects().length)) return;
      let top;
      let height;

      try {
        ({
          top,
          height
        } = node.getBoundingClientRect());
      } catch (e) {
        ({
          top,
          height
        } = defaultBoundingClientRect);
      }

      const windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;
      wasVisible = visible;
      intersecting = top - offset <= windowInnerHeight && top + height + offset >= 0;

      if (wasVisible && once && !isIntersecting) {
        callEvents(wasVisible, observer);
        return;
      }

      $$invalidate(3, visible = intersecting);
      callEvents(wasVisible);
    }

    checkIsVisible();
    const throttled = throttleFn(checkIsVisible, throttle);
    window.addEventListener("scroll", throttled);
    window.addEventListener("resize", throttled);

    removeHandlers = () => {
      window.removeEventListener("scroll", throttled);
      window.removeEventListener("resize", throttled);
    };

    return removeHandlers;
  }

  const writable_props = ["offset", "throttle", "c", "style", "once", "threshold", "disabled", "class"];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Waypoint> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Waypoint", $$slots, ['default']);

  $$self.$set = $$props => {
    if ("offset" in $$props) $$invalidate(5, offset = $$props.offset);
    if ("throttle" in $$props) $$invalidate(6, throttle = $$props.throttle);
    if ("c" in $$props) $$invalidate(0, c = $$props.c);
    if ("style" in $$props) $$invalidate(1, style = $$props.style);
    if ("once" in $$props) $$invalidate(7, once = $$props.once);
    if ("threshold" in $$props) $$invalidate(8, threshold = $$props.threshold);
    if ("disabled" in $$props) $$invalidate(9, disabled = $$props.disabled);
    if ("class" in $$props) $$invalidate(2, className = $$props.class);
    if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
  };

  $$self.$capture_state = () => ({
    createEventDispatcher,
    onDestroy,
    dispatch,
    offset,
    throttle,
    c,
    style,
    once,
    threshold,
    disabled,
    className,
    visible,
    wasVisible,
    intersecting,
    removeHandlers,
    throttleFn,
    callEvents,
    waypoint
  });

  $$self.$inject_state = $$props => {
    if ("offset" in $$props) $$invalidate(5, offset = $$props.offset);
    if ("throttle" in $$props) $$invalidate(6, throttle = $$props.throttle);
    if ("c" in $$props) $$invalidate(0, c = $$props.c);
    if ("style" in $$props) $$invalidate(1, style = $$props.style);
    if ("once" in $$props) $$invalidate(7, once = $$props.once);
    if ("threshold" in $$props) $$invalidate(8, threshold = $$props.threshold);
    if ("disabled" in $$props) $$invalidate(9, disabled = $$props.disabled);
    if ("className" in $$props) $$invalidate(2, className = $$props.className);
    if ("visible" in $$props) $$invalidate(3, visible = $$props.visible);
    if ("wasVisible" in $$props) wasVisible = $$props.wasVisible;
    if ("intersecting" in $$props) intersecting = $$props.intersecting;
    if ("removeHandlers" in $$props) removeHandlers = $$props.removeHandlers;
  };

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  return [c, style, className, visible, waypoint, offset, throttle, once, threshold, disabled, $$scope, $$slots];
}

class Waypoint extends SvelteComponentDev {
  constructor(options) {
    super(options);
    if (!document_1.getElementById("svelte-142y8oi-style")) add_css();
    init(this, options, instance, create_fragment, safe_not_equal, {
      offset: 5,
      throttle: 6,
      c: 0,
      style: 1,
      once: 7,
      threshold: 8,
      disabled: 9,
      class: 2
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Waypoint",
      options,
      id: create_fragment.name
    });
  }

  get offset() {
    throw new Error("<Waypoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set offset(value) {
    throw new Error("<Waypoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get throttle() {
    throw new Error("<Waypoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set throttle(value) {
    throw new Error("<Waypoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get c() {
    throw new Error("<Waypoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set c(value) {
    throw new Error("<Waypoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get style() {
    throw new Error("<Waypoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set style(value) {
    throw new Error("<Waypoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get once() {
    throw new Error("<Waypoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set once(value) {
    throw new Error("<Waypoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get threshold() {
    throw new Error("<Waypoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set threshold(value) {
    throw new Error("<Waypoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get disabled() {
    throw new Error("<Waypoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set disabled(value) {
    throw new Error("<Waypoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get class() {
    throw new Error("<Waypoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set class(value) {
    throw new Error("<Waypoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

/* src/components/Image/Image.svelte generated by Svelte v3.24.0 */
const file$1 = "src/components/Image/Image.svelte";

const get_loading_slot_changes = dirty => ({});

const get_loading_slot_context = ctx => ({}); // (33:20) 


function create_if_block_2(ctx) {
  let current;
  const loading_slot_template =
  /*$$slots*/
  ctx[9].loading;
  const loading_slot = create_slot(loading_slot_template, ctx,
  /*$$scope*/
  ctx[10], get_loading_slot_context);
  const block = {
    c: function create() {
      if (loading_slot) loading_slot.c();
    },
    l: function claim(nodes) {
      if (loading_slot) loading_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (loading_slot) {
        loading_slot.m(target, anchor);
      }

      current = true;
    },
    p: function update(ctx, dirty) {
      if (loading_slot) {
        if (loading_slot.p && dirty &
        /*$$scope*/
        1024) {
          update_slot(loading_slot, loading_slot_template, ctx,
          /*$$scope*/
          ctx[10], dirty, get_loading_slot_changes, get_loading_slot_context);
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(loading_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(loading_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (loading_slot) loading_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_2.name,
    type: "if",
    source: "(33:20) ",
    ctx
  });
  return block;
} // (31:22) 


function create_if_block_1(ctx) {
  let img;
  let img_class_value;
  let img_src_value;
  const block = {
    c: function create() {
      img = element("img");
      this.h();
    },
    l: function claim(nodes) {
      img = claim_element(nodes, "IMG", {
        class: true,
        src: true,
        alt: true,
        width: true,
        height: true
      });
      this.h();
    },
    h: function hydrate() {
      attr_dev(img, "class", img_class_value =
      /*$$props*/
      ctx[8].class);
      if (img.src !== (img_src_value =
      /*thumbnail*/
      ctx[4])) attr_dev(img, "src", img_src_value);
      attr_dev(img, "alt",
      /*alt*/
      ctx[0]);
      attr_dev(img, "width",
      /*width*/
      ctx[1]);
      attr_dev(img, "height",
      /*height*/
      ctx[2]);
      add_location(img, file$1, 31, 4, 648);
    },
    m: function mount(target, anchor) {
      insert_dev(target, img, anchor);
    },
    p: function update(ctx, dirty) {
      if (dirty &
      /*$$props*/
      256 && img_class_value !== (img_class_value =
      /*$$props*/
      ctx[8].class)) {
        attr_dev(img, "class", img_class_value);
      }

      if (dirty &
      /*thumbnail*/
      16 && img.src !== (img_src_value =
      /*thumbnail*/
      ctx[4])) {
        attr_dev(img, "src", img_src_value);
      }

      if (dirty &
      /*alt*/
      1) {
        attr_dev(img, "alt",
        /*alt*/
        ctx[0]);
      }

      if (dirty &
      /*width*/
      2) {
        attr_dev(img, "width",
        /*width*/
        ctx[1]);
      }

      if (dirty &
      /*height*/
      4) {
        attr_dev(img, "height",
        /*height*/
        ctx[2]);
      }
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(img);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(31:22) ",
    ctx
  });
  return block;
} // (29:2) {#if loaded}


function create_if_block$1(ctx) {
  let img;
  let img_class_value;
  let img_src_value;
  const block = {
    c: function create() {
      img = element("img");
      this.h();
    },
    l: function claim(nodes) {
      img = claim_element(nodes, "IMG", {
        class: true,
        src: true,
        alt: true,
        width: true,
        height: true
      });
      this.h();
    },
    h: function hydrate() {
      attr_dev(img, "class", img_class_value =
      /*$$props*/
      ctx[8].class);
      if (img.src !== (img_src_value =
      /*src*/
      ctx[3])) attr_dev(img, "src", img_src_value);
      attr_dev(img, "alt",
      /*alt*/
      ctx[0]);
      attr_dev(img, "width",
      /*width*/
      ctx[1]);
      attr_dev(img, "height",
      /*height*/
      ctx[2]);
      add_location(img, file$1, 29, 4, 562);
    },
    m: function mount(target, anchor) {
      insert_dev(target, img, anchor);
    },
    p: function update(ctx, dirty) {
      if (dirty &
      /*$$props*/
      256 && img_class_value !== (img_class_value =
      /*$$props*/
      ctx[8].class)) {
        attr_dev(img, "class", img_class_value);
      }

      if (dirty &
      /*src*/
      8 && img.src !== (img_src_value =
      /*src*/
      ctx[3])) {
        attr_dev(img, "src", img_src_value);
      }

      if (dirty &
      /*alt*/
      1) {
        attr_dev(img, "alt",
        /*alt*/
        ctx[0]);
      }

      if (dirty &
      /*width*/
      2) {
        attr_dev(img, "width",
        /*width*/
        ctx[1]);
      }

      if (dirty &
      /*height*/
      4) {
        attr_dev(img, "height",
        /*height*/
        ctx[2]);
      }
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(img);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block$1.name,
    type: "if",
    source: "(29:2) {#if loaded}",
    ctx
  });
  return block;
} // (28:0) <Waypoint class={$$props.class} once on:enter={load} style="height: {height}px" offset="0">


function create_default_slot(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block$1, create_if_block_1, create_if_block_2];
  const if_blocks = [];

  function select_block_type(ctx, dirty) {
    if (
    /*loaded*/
    ctx[5]) return 0;
    if (
    /*thumbnail*/
    ctx[4]) return 1;
    if (
    /*loading*/
    ctx[6]) return 2;
    return -1;
  }

  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }

  const block = {
    c: function create() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block) if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }

      insert_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx);

      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }

        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];

          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
            if_block.c();
          }

          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        } else {
          if_block = null;
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }

      if (detaching) detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(28:0) <Waypoint class={$$props.class} once on:enter={load} style=\\\"height: {height}px\\\" offset=\\\"0\\\">",
    ctx
  });
  return block;
}

function create_fragment$1(ctx) {
  let waypoint;
  let current;
  waypoint = new Waypoint({
    props: {
      class:
      /*$$props*/
      ctx[8].class,
      once: true,
      style: "height: " +
      /*height*/
      ctx[2] + "px",
      offset: "0",
      $$slots: {
        default: [create_default_slot]
      },
      $$scope: {
        ctx
      }
    },
    $$inline: true
  });
  waypoint.$on("enter",
  /*load*/
  ctx[7]);
  const block = {
    c: function create() {
      create_component(waypoint.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(waypoint.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(waypoint, target, anchor);
      current = true;
    },
    p: function update(ctx, [dirty]) {
      const waypoint_changes = {};
      if (dirty &
      /*$$props*/
      256) waypoint_changes.class =
      /*$$props*/
      ctx[8].class;
      if (dirty &
      /*height*/
      4) waypoint_changes.style = "height: " +
      /*height*/
      ctx[2] + "px";

      if (dirty &
      /*$$scope, src, alt, width, height, loaded, thumbnail, loading*/
      1151) {
        waypoint_changes.$$scope = {
          dirty,
          ctx
        };
      }

      waypoint.$set(waypoint_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(waypoint.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(waypoint.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(waypoint, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment$1.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance$1($$self, $$props, $$invalidate) {
  let {
    alt = ""
  } = $$props;
  let {
    width = ""
  } = $$props;
  let {
    height = ""
  } = $$props;
  let {
    src = ""
  } = $$props;
  let {
    thumbnail = ""
  } = $$props;
  let loaded = false;
  let loading = false;

  function load() {
    const img = new Image();
    img.src = src;
    $$invalidate(6, loading = true);

    img.onload = () => {
      $$invalidate(6, loading = false);
      $$invalidate(5, loaded = true);
    };
  }

  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("Image", $$slots, ['loading']);

  $$self.$set = $$new_props => {
    $$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("alt" in $$new_props) $$invalidate(0, alt = $$new_props.alt);
    if ("width" in $$new_props) $$invalidate(1, width = $$new_props.width);
    if ("height" in $$new_props) $$invalidate(2, height = $$new_props.height);
    if ("src" in $$new_props) $$invalidate(3, src = $$new_props.src);
    if ("thumbnail" in $$new_props) $$invalidate(4, thumbnail = $$new_props.thumbnail);
    if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
  };

  $$self.$capture_state = () => ({
    Waypoint,
    fade,
    alt,
    width,
    height,
    src,
    thumbnail,
    loaded,
    loading,
    load
  });

  $$self.$inject_state = $$new_props => {
    $$invalidate(8, $$props = assign(assign({}, $$props), $$new_props));
    if ("alt" in $$props) $$invalidate(0, alt = $$new_props.alt);
    if ("width" in $$props) $$invalidate(1, width = $$new_props.width);
    if ("height" in $$props) $$invalidate(2, height = $$new_props.height);
    if ("src" in $$props) $$invalidate(3, src = $$new_props.src);
    if ("thumbnail" in $$props) $$invalidate(4, thumbnail = $$new_props.thumbnail);
    if ("loaded" in $$props) $$invalidate(5, loaded = $$new_props.loaded);
    if ("loading" in $$props) $$invalidate(6, loading = $$new_props.loading);
  };

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$props = exclude_internal_props($$props);
  return [alt, width, height, src, thumbnail, loaded, loading, load, $$props, $$slots, $$scope];
}

class Image_1 extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance$1, create_fragment$1, safe_not_equal, {
      alt: 0,
      width: 1,
      height: 2,
      src: 3,
      thumbnail: 4
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Image_1",
      options,
      id: create_fragment$1.name
    });
  }

  get alt() {
    throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set alt(value) {
    throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get width() {
    throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set width(value) {
    throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get height() {
    throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set height(value) {
    throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get src() {
    throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set src(value) {
    throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get thumbnail() {
    throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set thumbnail(value) {
    throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

export { Image_1 as I };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
